// Generated from PostgreSqlParser.g4 by ANTLR 4.13.1
package org.springframework.ide.vscode.parser.postgresql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class PostgreSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		WHITESPACE=1, BLOCK_COMMENT=2, LINE_COMMENT=3, A_=4, ABORT=5, ABS=6, ABSOLUTE=7, 
		ACCESS=8, ACTION=9, ADA=10, ADD=11, ADMIN=12, AFTER=13, AGGREGATE=14, 
		ALIAS=15, ALL=16, ALLOCATE=17, ALSO=18, ALTER=19, ALWAYS=20, ANALYSE=21, 
		ANALYZE=22, AND=23, ANY=24, ARE=25, ARRAY=26, AS=27, ASC=28, ASENSITIVE=29, 
		ASSERTION=30, ASSIGNMENT=31, ASYMMETRIC=32, AT=33, ATOMIC=34, ATTRIBUTE=35, 
		ATTRIBUTES=36, AUTHORIZATION=37, AVG=38, BACKWARD=39, BEFORE=40, BEGIN=41, 
		BERNOULLI=42, BETWEEN=43, BIGINT=44, BINARY=45, BIT=46, BIT_LENGTH=47, 
		BITVAR=48, BLOB=49, BOOLEAN=50, BOTH=51, BREADTH=52, BUFFERS=53, BY=54, 
		C_=55, CACHE=56, CALL=57, CALLED=58, CARDINALITY=59, CASCADE=60, CASCADED=61, 
		CASE=62, CAST=63, CATALOG=64, CATALOG_NAME=65, CEIL=66, CEILING=67, CHAIN=68, 
		CHAR=69, CHAR_LENGTH=70, CHARACTER=71, CHARACTER_LENGTH=72, CHARACTER_SET_CATALOG=73, 
		CHARACTER_SET_NAME=74, CHARACTER_SET_SCHEMA=75, CHARACTERISTICS=76, CHARACTERS=77, 
		CHECK=78, CHECKED=79, CHECKPOINT=80, CLASS=81, CLASS_ORIGIN=82, CLOB=83, 
		CLOSE=84, CLUSTER=85, COALESCE=86, COBOL=87, COLLATE=88, COLLATION=89, 
		COLLATION_CATALOG=90, COLLATION_NAME=91, COLLATION_SCHEMA=92, COLLECT=93, 
		COLUMN=94, COLUMN_NAME=95, COMMAND_FUNCTION=96, COMMAND_FUNCTION_CODE=97, 
		COMMENT=98, COMMIT=99, COMMITTED=100, COMPLETION=101, CONDITION=102, CONDITION_NUMBER=103, 
		CONFIGURATION=104, CONFLICT=105, CONNECT=106, CONNECTION=107, CONNECTION_NAME=108, 
		CONSTRAINT=109, CONSTRAINT_CATALOG=110, CONSTRAINT_NAME=111, CONSTRAINT_SCHEMA=112, 
		CONSTRAINTS=113, CONSTRUCTOR=114, CONTAINS=115, CONTINUE=116, CONVERSION=117, 
		CONVERT=118, COPY=119, CORR=120, CORRESPONDING=121, COSTS=122, COUNT=123, 
		COVAR_POP=124, COVAR_SAMP=125, CREATE=126, CREATEDB=127, CREATEUSER=128, 
		CROSS=129, CSV=130, CUBE=131, CUME_DIST=132, CURRENT=133, CURRENT_DATE=134, 
		CURRENT_DEFAULT_TRANSFORM_GROUP=135, CURRENT_PATH=136, CURRENT_ROLE=137, 
		CURRENT_TIME=138, CURRENT_TIMESTAMP=139, CURRENT_TRANSFORM_GROUP_FOR_TYPE=140, 
		CURRENT_USER=141, CURSOR=142, CURSOR_NAME=143, CYCLE=144, DATA=145, DATABASE=146, 
		DATE=147, DATETIME_INTERVAL_CODE=148, DATETIME_INTERVAL_PRECISION=149, 
		DAY=150, DEALLOCATE=151, DEC=152, DECIMAL=153, DECLARE=154, DEFAULT=155, 
		DEFAULTS=156, DEFERABLE=157, DEFERRABLE=158, DEFERRED=159, DEFINED=160, 
		DEFINER=161, DEGREE=162, DELETE=163, DELIMITER=164, DELIMITERS=165, DENSE_RANK=166, 
		DEPENDS=167, DEPTH=168, DEREF=169, DERIVED=170, DESC=171, DESCRIBE=172, 
		DESCRIPTOR=173, DESTROY=174, DESTRUCTOR=175, DETERMINISTIC=176, DIAGNOSTICS=177, 
		DICTIONARY=178, DISABLE=179, DISABLE_PAGE_SKIPPING=180, DISCARD=181, DISCONNECT=182, 
		DISPATCH=183, DISTINCT=184, DO=185, DOMAIN=186, DOUBLE=187, DROP=188, 
		DYNAMIC=189, DYNAMIC_FUNCTION=190, DYNAMIC_FUNCTION_CODE=191, EACH=192, 
		ELEMENT=193, ELSE=194, ENABLE=195, ENCODING=196, ENCRYPTED=197, END=198, 
		END_EXEC=199, EQUALS=200, ESCAPE=201, EVERY=202, EXCEPT=203, EXCEPTION=204, 
		EXCLUDE=205, EXCLUDING=206, EXCLUSIVE=207, EXEC=208, EXECUTE=209, EXISTING=210, 
		EXISTS=211, EXP=212, EXPLAIN=213, EXTENDED=214, EXTENSION=215, EXTERNAL=216, 
		EXTRACT=217, FALSE=218, FETCH=219, FIELDS=220, FILTER=221, FINAL=222, 
		FIRST=223, FLOAT=224, FLOOR=225, FOLLOWING=226, FOR=227, FORCE=228, FOREIGN=229, 
		FORMAT=230, FORTRAN=231, FORWARD=232, FOUND=233, FREE=234, FREEZE=235, 
		FROM=236, FULL=237, FUNCTION=238, FUSION=239, G_=240, GENERAL=241, GENERATED=242, 
		GET=243, GLOBAL=244, GO=245, GOTO=246, GRANT=247, GRANTED=248, GREATEST=249, 
		GROUP=250, GROUPING=251, HANDLER=252, HAVING=253, HIERARCHY=254, HOLD=255, 
		HOST=256, HOUR=257, IDENTITY=258, IGNORE=259, ILIKE=260, IMMEDIATE=261, 
		IMMUTABLE=262, IMPLEMENTATION=263, IMPLICIT=264, IN=265, INCLUDING=266, 
		INCREMENT=267, INDEX=268, INDICATOR=269, INFIX=270, INHERITS=271, INITIALIZE=272, 
		INITIALLY=273, INNER=274, INOUT=275, INPUT=276, INSENSITIVE=277, INSERT=278, 
		INSTANCE=279, INSTANTIABLE=280, INSTEAD=281, INT=282, INTEGER=283, INTERSECT=284, 
		INTERSECTION=285, INTERVAL=286, INTO=287, INVOKER=288, IS=289, ISOLATION=290, 
		ITERATE=291, JOIN=292, K_=293, KEY=294, KEY_MEMBER=295, KEY_TYPE=296, 
		LABEL=297, LANCOMPILER=298, LANGUAGE=299, LARGE=300, LAST=301, LATERAL=302, 
		LEADING=303, LEAST=304, LEFT=305, LENGTH=306, LESS=307, LEVEL=308, LIKE=309, 
		LIMIT=310, LISTEN=311, LN=312, LOAD=313, LOCAL=314, LOCALTIME=315, LOCALTIMESTAMP=316, 
		LOCATION=317, LOCATOR=318, LOCK=319, LOCKED=320, LOWER=321, M_=322, MAIN=323, 
		MAP=324, MAPPING=325, MATCH=326, MATCH_SIMPLE=327, MATCHED=328, MAX=329, 
		MAXVALUE=330, MEMBER=331, MERGE=332, MESSAGE_LENGTH=333, MESSAGE_OCTET_LENGTH=334, 
		MESSAGE_TEXT=335, METHOD=336, MIN=337, MINUTE=338, MINVALUE=339, MOD=340, 
		MODE=341, MODIFIES=342, MODIFY=343, MODULE=344, MONTH=345, MORE_=346, 
		MOVE=347, MULTISET=348, MUMPS=349, NAME=350, NAMES=351, NATIONAL=352, 
		NATURAL=353, NCHAR=354, NCLOB=355, NESTING=356, NEW=357, NEXT=358, NO=359, 
		NOCREATEDB=360, NOCREATEUSER=361, NONE=362, NORMALIZE=363, NORMALIZED=364, 
		NOT=365, NOTHING=366, NOTIFY=367, NOTNULL=368, NOWAIT=369, NULL=370, NULLABLE=371, 
		NULLIF=372, NULLS=373, NUMBER=374, NUMERIC=375, OBJECT=376, OCTET_LENGTH=377, 
		OCTETS=378, OF=379, OFF=380, OFFSET=381, OIDS=382, OLD=383, ON=384, ONLY=385, 
		OPEN=386, OPERATION=387, OPERATOR=388, OPTION=389, OPTIONS=390, OR=391, 
		ORDER=392, ORDERING=393, ORDINALITY=394, OTHERS=395, OUT=396, OUTER=397, 
		OUTPUT=398, OVER=399, OVERLAPS=400, OVERLAY=401, OVERRIDING=402, OWNER=403, 
		PAD=404, PARAMETER=405, PARAMETER_MODE=406, PARAMETER_NAME=407, PARAMETER_ORDINAL_POSITION=408, 
		PARAMETER_SPECIFIC_CATALOG=409, PARAMETER_SPECIFIC_NAME=410, PARAMETER_SPECIFIC_SCHEMA=411, 
		PARAMETERS=412, PARSER=413, PARTIAL=414, PARTITION=415, PASCAL=416, PASSWORD=417, 
		PATH=418, PERCENT_RANK=419, PERCENTILE_CONT=420, PERCENTILE_DISC=421, 
		PLACING=422, PLAIN=423, PLANS=424, PLI=425, POSITION=426, POSTFIX=427, 
		POWER=428, PRECEDING=429, PRECISION=430, PREFIX=431, PREORDER=432, PREPARE=433, 
		PREPARED=434, PRESERVE=435, PRIMARY=436, PRIOR=437, PRIVILEGES=438, PROCEDURAL=439, 
		PROCEDURE=440, PUBLIC=441, PUBLICATION=442, QUOTE=443, RANGE=444, RANK=445, 
		READ=446, READS=447, REAL=448, REASSIGN=449, RECHECK=450, RECURSIVE=451, 
		REF=452, REFERENCES=453, REFERENCING=454, REFRESH=455, REGR_AVGX=456, 
		REGR_AVGY=457, REGR_COUNT=458, REGR_INTERCEPT=459, REGR_R2=460, REGR_SLOPE=461, 
		REGR_SXX=462, REGR_SXY=463, REGR_SYY=464, REINDEX=465, RELATIVE=466, RELEASE=467, 
		RENAME=468, REPEATABLE=469, REPLACE=470, REPLICA=471, RESET=472, RESTART=473, 
		RESTRICT=474, RESULT=475, RETURN=476, RETURNED_CARDINALITY=477, RETURNED_LENGTH=478, 
		RETURNED_OCTET_LENGTH=479, RETURNED_SQLSTATE=480, RETURNING=481, RETURNS=482, 
		REVOKE=483, RIGHT=484, ROLE=485, ROLLBACK=486, ROLLUP=487, ROUTINE=488, 
		ROUTINE_CATALOG=489, ROUTINE_NAME=490, ROUTINE_SCHEMA=491, ROW=492, ROW_COUNT=493, 
		ROW_NUMBER=494, ROWS=495, RULE=496, SAVEPOINT=497, SCALE=498, SCHEMA=499, 
		SCHEMA_NAME=500, SCOPE=501, SCOPE_CATALOG=502, SCOPE_NAME=503, SCOPE_SCHEMA=504, 
		SCROLL=505, SEARCH=506, SECOND=507, SECTION=508, SECURITY=509, SELECT=510, 
		SELF=511, SENSITIVE=512, SEQUENCE=513, SEQUENCES=514, SERIALIZABLE=515, 
		SERVER_NAME=516, SESSION=517, SESSION_USER=518, SET=519, SETOF=520, SETS=521, 
		SHARE=522, SHOW=523, SIMILAR=524, SIMPLE=525, SIZE=526, SKIP_=527, SMALLINT=528, 
		SNAPSHOT=529, SOME=530, SOURCE=531, SPACE=532, SPECIFIC=533, SPECIFIC_NAME=534, 
		SPECIFICTYPE=535, SQL=536, SQLCODE=537, SQLERROR=538, SQLEXCEPTION=539, 
		SQLSTATE=540, SQLWARNING=541, SQRT=542, STABLE=543, START=544, STATE=545, 
		STATEMENT=546, STATIC=547, STATISTICS=548, STDDEV_POP=549, STDDEV_SAMP=550, 
		STDIN=551, STDOUT=552, STORAGE=553, STRICT=554, STRUCTURE=555, STYLE=556, 
		SUBCLASS_ORIGIN=557, SUBLIST=558, SUBMULTISET=559, SUBSCRIPTION=560, SUBSTRING=561, 
		SUM=562, SYMMETRIC=563, SYSID=564, SYSTEM=565, SYSTEM_USER=566, TABLE=567, 
		TABLE_NAME=568, TABLESAMPLE=569, TABLESPACE=570, TEMP=571, TEMPLATE=572, 
		TEMPORARY=573, TERMINATE=574, THAN=575, THEN=576, TIES=577, TIME=578, 
		TIMESTAMP=579, TIMEZONE_HOUR=580, TIMEZONE_MINUTE=581, TIMING=582, TO=583, 
		TOAST=584, TOP_LEVEL_COUNT=585, TRAILING=586, TRANSACTION=587, TRANSACTION_ACTIVE=588, 
		TRANSACTIONS_COMMITTED=589, TRANSACTIONS_ROLLED_BACK=590, TRANSFORM=591, 
		TRANSFORMS=592, TRANSLATE=593, TRANSLATION=594, TREAT=595, TRIGGER=596, 
		TRIGGER_CATALOG=597, TRIGGER_NAME=598, TRIGGER_SCHEMA=599, TRIM=600, TRUE=601, 
		TRUNCATE=602, TRUSTED=603, TYPE=604, UESCAPE=605, UNBOUNDED=606, UNCOMMITTED=607, 
		UNDER=608, UNENCRYPTED=609, UNION=610, UNIQUE=611, UNKNOWN=612, UNLISTEN=613, 
		UNLOGGED=614, UNNAMED=615, UNNEST=616, UNTIL=617, UPDATE=618, UPPER=619, 
		USAGE=620, USER=621, USER_DEFINED_TYPE_CATALOG=622, USER_DEFINED_TYPE_CODE=623, 
		USER_DEFINED_TYPE_NAME=624, USER_DEFINED_TYPE_SCHEMA=625, USING=626, VACUUM=627, 
		VALID=628, VALIDATE=629, VALIDATOR=630, VALUE=631, VALUES=632, VAR_POP=633, 
		VAR_SAMP=634, VARCHAR=635, VARIABLE=636, VARIADIC=637, VARYING=638, VERBOSE=639, 
		VIEW=640, VOLATILE=641, WHEN=642, WHENEVER=643, WHERE=644, WIDTH_BUCKET=645, 
		WINDOW=646, WITH=647, WITHIN=648, WITHOUT=649, WORK=650, WRITE=651, YAML=652, 
		YEAR=653, YES=654, ZONE=655, SUPERUSER=656, NOSUPERUSER=657, CREATEROLE=658, 
		NOCREATEROLE=659, INHERIT=660, NOINHERIT=661, LOGIN=662, NOLOGIN=663, 
		REPLICATION=664, NOREPLICATION=665, BYPASSRLS=666, NOBYPASSRLS=667, SFUNC=668, 
		STYPE=669, SSPACE=670, FINALFUNC=671, FINALFUNC_EXTRA=672, COMBINEFUNC=673, 
		SERIALFUNC=674, DESERIALFUNC=675, INITCOND=676, MSFUNC=677, MINVFUNC=678, 
		MSTYPE=679, MSSPACE=680, MFINALFUNC=681, MFINALFUNC_EXTRA=682, MINITCOND=683, 
		SORTOP=684, PARALLEL=685, HYPOTHETICAL=686, SAFE=687, RESTRICTED=688, 
		UNSAFE=689, BASETYPE=690, IF=691, LOCALE=692, LC_COLLATE=693, LC_CTYPE=694, 
		PROVIDER=695, VERSION=696, ALLOW_CONNECTIONS=697, IS_TEMPLATE=698, EVENT=699, 
		WRAPPER=700, SERVER=701, BTREE=702, HASH_=703, GIST=704, SPGIST=705, GIN=706, 
		BRIN=707, CONCURRENTLY=708, INLINE=709, MATERIALIZED=710, LEFTARG=711, 
		RIGHTARG=712, COMMUTATOR=713, NEGATOR=714, HASHES=715, MERGES=716, FAMILY=717, 
		POLICY=718, OWNED=719, ABSTIME=720, BIGSERIAL=721, BIT_VARYING=722, BOOL=723, 
		BOX=724, BYTEA=725, CHARACTER_VARYING=726, CIDR=727, CIRCLE=728, FLOAT4=729, 
		FLOAT8=730, INET=731, INT2=732, INT4=733, INT8=734, JSON=735, JSONB=736, 
		LINE=737, LSEG=738, MACADDR=739, MACADDR8=740, MONEY=741, PG_LSN=742, 
		POINT=743, POLYGON=744, RELTIME=745, SERIAL=746, SERIAL2=747, SERIAL4=748, 
		SERIAL8=749, SMALLSERIAL=750, STSTEM=751, TEXT=752, TIMESTAMPTZ=753, TIMETZ=754, 
		TSQUERY=755, TSVECTOR=756, TXID_SNAPSHOT=757, UUID=758, VARBIT=759, XML=760, 
		COMMA=761, COLON=762, COLON_COLON=763, DOLLAR=764, DOLLAR_DOLLAR=765, 
		STAR=766, OPEN_PAREN=767, CLOSE_PAREN=768, OPEN_BRACKET=769, CLOSE_BRACKET=770, 
		BIT_STRING=771, REGEX_STRING=772, NUMERIC_LITERAL=773, INTEGER_LITERAL=774, 
		HEX_INTEGER_LITERAL=775, DOT=776, SINGLEQ_STRING_LITERAL=777, DOUBLEQ_STRING_LITERAL=778, 
		IDENTIFIER=779, DOLLAR_DEC=780, IDENTIFIER_UNICODE=781, AMP=782, AMP_AMP=783, 
		AMP_LT=784, AT_AT=785, AT_GT=786, AT_SIGN=787, BANG=788, BANG_BANG=789, 
		BANG_EQUAL=790, CARET=791, EQUAL=792, EQUAL_GT=793, GT=794, GTE=795, GT_GT=796, 
		HASH=797, HASH_EQ=798, HASH_GT=799, HASH_GT_GT=800, HASH_HASH=801, HYPHEN_GT=802, 
		HYPHEN_GT_GT=803, HYPHEN_PIPE_HYPHEN=804, LT=805, LTE=806, LT_AT=807, 
		LT_CARET=808, LT_GT=809, LT_HYPHEN_GT=810, LT_LT=811, LT_LT_EQ=812, LT_QMARK_GT=813, 
		MINUS=814, PERCENT=815, PIPE=816, PIPE_PIPE=817, PIPE_PIPE_SLASH=818, 
		PIPE_SLASH=819, PLUS=820, QMARK=821, QMARK_AMP=822, QMARK_HASH=823, QMARK_HYPHEN=824, 
		QMARK_PIPE=825, SLASH=826, TIL=827, TIL_EQ=828, TIL_GTE_TIL=829, TIL_GT_TIL=830, 
		TIL_LTE_TIL=831, TIL_LT_TIL=832, TIL_STAR=833, TIL_TIL=834, SEMI=835, 
		SPEL=836;
	public static final int
		RULE_root = 0, RULE_stmt = 1, RULE_abort_stmt = 2, RULE_alter_stmt = 3, 
		RULE_alter_aggregate_stmt = 4, RULE_alter_collation_stmt = 5, RULE_alter_conversion_stmt = 6, 
		RULE_alter_database_stmt = 7, RULE_alter_default_privileges_stmt = 8, 
		RULE_alter_domain_stmt = 9, RULE_alter_event_trigger_stmt = 10, RULE_alter_extension_stmt = 11, 
		RULE_alter_foreign_data_wrapper_stmt = 12, RULE_alter_foreign_table_action = 13, 
		RULE_alter_foreign_table_action_list = 14, RULE_alter_foreign_table_stmt = 15, 
		RULE_alter_function_stmt = 16, RULE_alter_group_stmt = 17, RULE_alter_index_stmt = 18, 
		RULE_alter_language_stmt = 19, RULE_alter_large_object_stmt = 20, RULE_alter_materialize_view_stmt = 21, 
		RULE_alter_operator_stmt = 22, RULE_alter_operator_class_stmt = 23, RULE_alter_operator_family_stmt = 24, 
		RULE_alter_policy_stmt = 25, RULE_alter_publication_stmt = 26, RULE_alter_role_options = 27, 
		RULE_alter_role_stmt = 28, RULE_alter_rule_stmt = 29, RULE_alter_schema_stmt = 30, 
		RULE_alter_sequence_stmt = 31, RULE_alter_server_options_list = 32, RULE_alter_server_stmt = 33, 
		RULE_alter_statistics_stmt = 34, RULE_alter_subscription_stmt = 35, RULE_alter_system_stmt = 36, 
		RULE_alter_table_stmt = 37, RULE_alter_tablespace_stmt = 38, RULE_alter_text_search_config_stmt = 39, 
		RULE_alter_text_search_dict_stmt = 40, RULE_alter_text_search_parser_stmt = 41, 
		RULE_alter_text_search_template_stmt = 42, RULE_alter_trigger_stmt = 43, 
		RULE_alter_type_stmt = 44, RULE_alter_user_stmt = 45, RULE_alter_user_mapping_stmt = 46, 
		RULE_alter_view_stmt = 47, RULE_analyze_stmt = 48, RULE_close_stmt = 49, 
		RULE_cluster_stmt = 50, RULE_comment_stmt = 51, RULE_commit_stmt = 52, 
		RULE_commit_prepared_stmt = 53, RULE_copy_stmt = 54, RULE_create_stmt = 55, 
		RULE_create_access_method_stmt = 56, RULE_create_aggregate_stmt = 57, 
		RULE_create_cast_stmt = 58, RULE_create_collation_opt = 59, RULE_create_collation_opt_list = 60, 
		RULE_create_collation_stmt = 61, RULE_create_conversion_stmt = 62, RULE_create_database_stmt = 63, 
		RULE_domain_constraint = 64, RULE_create_domain_stmt = 65, RULE_create_event_trigger_cond = 66, 
		RULE_create_event_trigger_stmt = 67, RULE_create_foreign_data_options = 68, 
		RULE_create_foreign_data_stmt = 69, RULE_create_foreign_table_stmt = 70, 
		RULE_create_function_stmt = 71, RULE_create_group_stmt = 72, RULE_create_index_stmt = 73, 
		RULE_create_language_stmt = 74, RULE_create_materialized_view_stmt = 75, 
		RULE_create_operator_stmt = 76, RULE_create_operator_class_opt = 77, RULE_create_operator_class_stmt = 78, 
		RULE_create_operator_family_stmt = 79, RULE_create_policy_stmt = 80, RULE_create_role_stmt = 81, 
		RULE_create_rule_event = 82, RULE_create_rule_stmt = 83, RULE_create_schema_stmt = 84, 
		RULE_create_sequence_stmt = 85, RULE_create_server_stmt = 86, RULE_create_statistics_stmt = 87, 
		RULE_create_subscription_stmt = 88, RULE_create_table_stmt = 89, RULE_create_table_as_stmt = 90, 
		RULE_create_tablespace_stmt = 91, RULE_create_text_search_config_stmt = 92, 
		RULE_create_text_search_dict_stmt = 93, RULE_create_text_search_parser_stmt = 94, 
		RULE_create_text_search_template_stmt = 95, RULE_create_transform_stmt = 96, 
		RULE_create_trigger_stmt = 97, RULE_create_type_stmt = 98, RULE_create_user_stmt = 99, 
		RULE_create_user_mapping_stmt = 100, RULE_create_view_stmt = 101, RULE_deallocate_stmt = 102, 
		RULE_declare_stmt = 103, RULE_delete_stmt = 104, RULE_discard_stmt = 105, 
		RULE_drop_stmt = 106, RULE_drop_access_method_stmt = 107, RULE_drop_aggregate_stmt = 108, 
		RULE_drop_cast_stmt = 109, RULE_drop_collation_stmt = 110, RULE_drop_conversion_stmt = 111, 
		RULE_drop_database_stmt = 112, RULE_drop_domain_stmt = 113, RULE_drop_event_trigger_stmt = 114, 
		RULE_drop_extension_stmt = 115, RULE_drop_foreign_data_wrapper_stmt = 116, 
		RULE_drop_foreign_table_stmt = 117, RULE_drop_function_stmt = 118, RULE_drop_group_stmt = 119, 
		RULE_drop_index_stmt = 120, RULE_drop_language_stmt = 121, RULE_drop_materialized_view_stmt = 122, 
		RULE_drop_operator_stmt = 123, RULE_drop_operator_class_stmt = 124, RULE_drop_operator_family_stmt = 125, 
		RULE_drop_owned_stmt = 126, RULE_drop_policy_stmt = 127, RULE_drop_publication_stmt = 128, 
		RULE_drop_role_stmt = 129, RULE_drop_rule_stmt = 130, RULE_drop_schema_stmt = 131, 
		RULE_drop_sequence_stmt = 132, RULE_drop_server_stmt = 133, RULE_drop_statistics_stmt = 134, 
		RULE_drop_subscription_stmt = 135, RULE_drop_table_stmt = 136, RULE_drop_tablespace_stmt = 137, 
		RULE_drop_text_search_config_stmt = 138, RULE_drop_text_search_dict_stmt = 139, 
		RULE_drop_text_search_parser_stmt = 140, RULE_drop_text_search_template_stmt = 141, 
		RULE_drop_transform_stmt = 142, RULE_drop_trigger_stmt = 143, RULE_drop_type_stmt = 144, 
		RULE_drop_user_stmt = 145, RULE_drop_user_mapping_stmt = 146, RULE_drop_view_stmt = 147, 
		RULE_execute_stmt = 148, RULE_explain_stmt = 149, RULE_fetch_stmt = 150, 
		RULE_grant_stmt = 151, RULE_import_foreign_schema_stmt = 152, RULE_insert_stmt = 153, 
		RULE_listen_stmt = 154, RULE_load_stmt = 155, RULE_lock_stmt = 156, RULE_move_stmt = 157, 
		RULE_notify_stmt = 158, RULE_prepare_stmt = 159, RULE_prepare_transaction_stmt = 160, 
		RULE_reassign_owned_stmt = 161, RULE_refresh_materialized_view_stmt = 162, 
		RULE_reindex_stmt = 163, RULE_release_savepoint_stmt = 164, RULE_reset_stmt = 165, 
		RULE_revoke_stmt = 166, RULE_rollback_stmt = 167, RULE_rollback_prepared_stmt = 168, 
		RULE_rollback_to_savepoint_stmt = 169, RULE_savepoint_stmt = 170, RULE_security_label_stmt = 171, 
		RULE_select_stmt = 172, RULE_select_into_stmt = 173, RULE_with_clause = 174, 
		RULE_with_expr = 175, RULE_set_stmt = 176, RULE_set_constraints_stmt = 177, 
		RULE_set_role_stmt = 178, RULE_set_session_authorization_stmt = 179, RULE_transaction_mode = 180, 
		RULE_transaction_mode_list = 181, RULE_set_transaction_stmt = 182, RULE_show_stmt = 183, 
		RULE_truncate_stmt = 184, RULE_unlisten_stmt = 185, RULE_update_stmt = 186, 
		RULE_vacuum_opt = 187, RULE_vacuum_opt_list = 188, RULE_vacuum_stmt = 189, 
		RULE_values_stmt = 190, RULE_selector_clause = 191, RULE_from_clause = 192, 
		RULE_where_clause = 193, RULE_group_by_clause = 194, RULE_grouping_elem = 195, 
		RULE_grouping_elem_list = 196, RULE_having_clause = 197, RULE_column_list = 198, 
		RULE_explain_parameter = 199, RULE_frame = 200, RULE_frame_start = 201, 
		RULE_frame_end = 202, RULE_frame_clause = 203, RULE_window_definition = 204, 
		RULE_window_clause = 205, RULE_combine_clause = 206, RULE_order_by_clause = 207, 
		RULE_order_by_item = 208, RULE_limit_clause = 209, RULE_offset_clause = 210, 
		RULE_fetch_clause = 211, RULE_for_clause = 212, RULE_updater_clause = 213, 
		RULE_updater_expr = 214, RULE_returning_clause = 215, RULE_expr = 216, 
		RULE_parameter = 217, RULE_parameterOrIntegerLiteral = 218, RULE_parameterOrNumericLiteral = 219, 
		RULE_bool_expr = 220, RULE_case_expr = 221, RULE_expr_list = 222, RULE_expr_list_list = 223, 
		RULE_func_sig_arg = 224, RULE_func_sig_arg_list = 225, RULE_func_sig = 226, 
		RULE_func_sig_list = 227, RULE_type_name = 228, RULE_timezone = 229, RULE_oper = 230, 
		RULE_aggregate = 231, RULE_name_ = 232, RULE_name_list = 233, RULE_identifier_list = 234, 
		RULE_option_expr = 235, RULE_option_list = 236, RULE_table_name_ = 237, 
		RULE_data_type = 238, RULE_data_type_list = 239, RULE_index_method = 240, 
		RULE_func_name = 241, RULE_func_call = 242, RULE_array_cons_expr = 243, 
		RULE_from_item = 244, RULE_with_column_alias = 245, RULE_join_type = 246, 
		RULE_join_clause = 247, RULE_predicate = 248, RULE_aggregate_signature = 249, 
		RULE_column_constraint = 250, RULE_column_constraints = 251, RULE_index_parameters = 252, 
		RULE_exclude_element = 253, RULE_table_constraint = 254, RULE_role_name = 255, 
		RULE_role_name_list = 256, RULE_param_value = 257, RULE_reserved_keyword = 258, 
		RULE_non_reserved_keyword = 259, RULE_identifier = 260, RULE_todo_fill_in = 261, 
		RULE_todo_implement = 262, RULE_correlation_name = 263, RULE_column_name = 264, 
		RULE_alias = 265, RULE_column_alias = 266, RULE_column_definition = 267, 
		RULE_window_name = 268;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "stmt", "abort_stmt", "alter_stmt", "alter_aggregate_stmt", "alter_collation_stmt", 
			"alter_conversion_stmt", "alter_database_stmt", "alter_default_privileges_stmt", 
			"alter_domain_stmt", "alter_event_trigger_stmt", "alter_extension_stmt", 
			"alter_foreign_data_wrapper_stmt", "alter_foreign_table_action", "alter_foreign_table_action_list", 
			"alter_foreign_table_stmt", "alter_function_stmt", "alter_group_stmt", 
			"alter_index_stmt", "alter_language_stmt", "alter_large_object_stmt", 
			"alter_materialize_view_stmt", "alter_operator_stmt", "alter_operator_class_stmt", 
			"alter_operator_family_stmt", "alter_policy_stmt", "alter_publication_stmt", 
			"alter_role_options", "alter_role_stmt", "alter_rule_stmt", "alter_schema_stmt", 
			"alter_sequence_stmt", "alter_server_options_list", "alter_server_stmt", 
			"alter_statistics_stmt", "alter_subscription_stmt", "alter_system_stmt", 
			"alter_table_stmt", "alter_tablespace_stmt", "alter_text_search_config_stmt", 
			"alter_text_search_dict_stmt", "alter_text_search_parser_stmt", "alter_text_search_template_stmt", 
			"alter_trigger_stmt", "alter_type_stmt", "alter_user_stmt", "alter_user_mapping_stmt", 
			"alter_view_stmt", "analyze_stmt", "close_stmt", "cluster_stmt", "comment_stmt", 
			"commit_stmt", "commit_prepared_stmt", "copy_stmt", "create_stmt", "create_access_method_stmt", 
			"create_aggregate_stmt", "create_cast_stmt", "create_collation_opt", 
			"create_collation_opt_list", "create_collation_stmt", "create_conversion_stmt", 
			"create_database_stmt", "domain_constraint", "create_domain_stmt", "create_event_trigger_cond", 
			"create_event_trigger_stmt", "create_foreign_data_options", "create_foreign_data_stmt", 
			"create_foreign_table_stmt", "create_function_stmt", "create_group_stmt", 
			"create_index_stmt", "create_language_stmt", "create_materialized_view_stmt", 
			"create_operator_stmt", "create_operator_class_opt", "create_operator_class_stmt", 
			"create_operator_family_stmt", "create_policy_stmt", "create_role_stmt", 
			"create_rule_event", "create_rule_stmt", "create_schema_stmt", "create_sequence_stmt", 
			"create_server_stmt", "create_statistics_stmt", "create_subscription_stmt", 
			"create_table_stmt", "create_table_as_stmt", "create_tablespace_stmt", 
			"create_text_search_config_stmt", "create_text_search_dict_stmt", "create_text_search_parser_stmt", 
			"create_text_search_template_stmt", "create_transform_stmt", "create_trigger_stmt", 
			"create_type_stmt", "create_user_stmt", "create_user_mapping_stmt", "create_view_stmt", 
			"deallocate_stmt", "declare_stmt", "delete_stmt", "discard_stmt", "drop_stmt", 
			"drop_access_method_stmt", "drop_aggregate_stmt", "drop_cast_stmt", "drop_collation_stmt", 
			"drop_conversion_stmt", "drop_database_stmt", "drop_domain_stmt", "drop_event_trigger_stmt", 
			"drop_extension_stmt", "drop_foreign_data_wrapper_stmt", "drop_foreign_table_stmt", 
			"drop_function_stmt", "drop_group_stmt", "drop_index_stmt", "drop_language_stmt", 
			"drop_materialized_view_stmt", "drop_operator_stmt", "drop_operator_class_stmt", 
			"drop_operator_family_stmt", "drop_owned_stmt", "drop_policy_stmt", "drop_publication_stmt", 
			"drop_role_stmt", "drop_rule_stmt", "drop_schema_stmt", "drop_sequence_stmt", 
			"drop_server_stmt", "drop_statistics_stmt", "drop_subscription_stmt", 
			"drop_table_stmt", "drop_tablespace_stmt", "drop_text_search_config_stmt", 
			"drop_text_search_dict_stmt", "drop_text_search_parser_stmt", "drop_text_search_template_stmt", 
			"drop_transform_stmt", "drop_trigger_stmt", "drop_type_stmt", "drop_user_stmt", 
			"drop_user_mapping_stmt", "drop_view_stmt", "execute_stmt", "explain_stmt", 
			"fetch_stmt", "grant_stmt", "import_foreign_schema_stmt", "insert_stmt", 
			"listen_stmt", "load_stmt", "lock_stmt", "move_stmt", "notify_stmt", 
			"prepare_stmt", "prepare_transaction_stmt", "reassign_owned_stmt", "refresh_materialized_view_stmt", 
			"reindex_stmt", "release_savepoint_stmt", "reset_stmt", "revoke_stmt", 
			"rollback_stmt", "rollback_prepared_stmt", "rollback_to_savepoint_stmt", 
			"savepoint_stmt", "security_label_stmt", "select_stmt", "select_into_stmt", 
			"with_clause", "with_expr", "set_stmt", "set_constraints_stmt", "set_role_stmt", 
			"set_session_authorization_stmt", "transaction_mode", "transaction_mode_list", 
			"set_transaction_stmt", "show_stmt", "truncate_stmt", "unlisten_stmt", 
			"update_stmt", "vacuum_opt", "vacuum_opt_list", "vacuum_stmt", "values_stmt", 
			"selector_clause", "from_clause", "where_clause", "group_by_clause", 
			"grouping_elem", "grouping_elem_list", "having_clause", "column_list", 
			"explain_parameter", "frame", "frame_start", "frame_end", "frame_clause", 
			"window_definition", "window_clause", "combine_clause", "order_by_clause", 
			"order_by_item", "limit_clause", "offset_clause", "fetch_clause", "for_clause", 
			"updater_clause", "updater_expr", "returning_clause", "expr", "parameter", 
			"parameterOrIntegerLiteral", "parameterOrNumericLiteral", "bool_expr", 
			"case_expr", "expr_list", "expr_list_list", "func_sig_arg", "func_sig_arg_list", 
			"func_sig", "func_sig_list", "type_name", "timezone", "oper", "aggregate", 
			"name_", "name_list", "identifier_list", "option_expr", "option_list", 
			"table_name_", "data_type", "data_type_list", "index_method", "func_name", 
			"func_call", "array_cons_expr", "from_item", "with_column_alias", "join_type", 
			"join_clause", "predicate", "aggregate_signature", "column_constraint", 
			"column_constraints", "index_parameters", "exclude_element", "table_constraint", 
			"role_name", "role_name_list", "param_value", "reserved_keyword", "non_reserved_keyword", 
			"identifier", "todo_fill_in", "todo_implement", "correlation_name", "column_name", 
			"alias", "column_alias", "column_definition", "window_name"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, "','", "':'", "'::'", "'$'", "'$$'", "'*'", 
			"'('", "')'", "'['", "']'", null, null, null, null, null, "'.'", null, 
			null, null, null, null, "'&'", "'&&'", "'&<'", "'@@'", "'@>'", "'@'", 
			"'!'", "'!!'", "'!='", "'^'", "'='", "'=>'", "'>'", "'>='", "'>>'", "'#'", 
			"'#='", "'#>'", "'#>>'", "'##'", "'->'", "'->>'", "'-|-'", "'<'", "'<='", 
			"'<@'", "'<^'", "'<>'", "'<->'", "'<<'", "'<<='", "'<?>'", "'-'", "'%'", 
			"'|'", "'||'", "'||/'", "'|/'", "'+'", "'?'", "'?&'", "'?#'", "'?-'", 
			"'?|'", "'/'", "'~'", "'~='", "'~>=~'", "'~>~'", "'~<=~'", "'~<~'", "'~*'", 
			"'~~'", "';'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT", "A_", "ABORT", "ABS", 
			"ABSOLUTE", "ACCESS", "ACTION", "ADA", "ADD", "ADMIN", "AFTER", "AGGREGATE", 
			"ALIAS", "ALL", "ALLOCATE", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", 
			"AND", "ANY", "ARE", "ARRAY", "AS", "ASC", "ASENSITIVE", "ASSERTION", 
			"ASSIGNMENT", "ASYMMETRIC", "AT", "ATOMIC", "ATTRIBUTE", "ATTRIBUTES", 
			"AUTHORIZATION", "AVG", "BACKWARD", "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", 
			"BIGINT", "BINARY", "BIT", "BIT_LENGTH", "BITVAR", "BLOB", "BOOLEAN", 
			"BOTH", "BREADTH", "BUFFERS", "BY", "C_", "CACHE", "CALL", "CALLED", 
			"CARDINALITY", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", "CATALOG_NAME", 
			"CEIL", "CEILING", "CHAIN", "CHAR", "CHAR_LENGTH", "CHARACTER", "CHARACTER_LENGTH", 
			"CHARACTER_SET_CATALOG", "CHARACTER_SET_NAME", "CHARACTER_SET_SCHEMA", 
			"CHARACTERISTICS", "CHARACTERS", "CHECK", "CHECKED", "CHECKPOINT", "CLASS", 
			"CLASS_ORIGIN", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COBOL", "COLLATE", 
			"COLLATION", "COLLATION_CATALOG", "COLLATION_NAME", "COLLATION_SCHEMA", 
			"COLLECT", "COLUMN", "COLUMN_NAME", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
			"COMMENT", "COMMIT", "COMMITTED", "COMPLETION", "CONDITION", "CONDITION_NUMBER", 
			"CONFIGURATION", "CONFLICT", "CONNECT", "CONNECTION", "CONNECTION_NAME", 
			"CONSTRAINT", "CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", 
			"CONSTRAINTS", "CONSTRUCTOR", "CONTAINS", "CONTINUE", "CONVERSION", "CONVERT", 
			"COPY", "CORR", "CORRESPONDING", "COSTS", "COUNT", "COVAR_POP", "COVAR_SAMP", 
			"CREATE", "CREATEDB", "CREATEUSER", "CROSS", "CSV", "CUBE", "CUME_DIST", 
			"CURRENT", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", 
			"CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", 
			"CURRENT_USER", "CURSOR", "CURSOR_NAME", "CYCLE", "DATA", "DATABASE", 
			"DATE", "DATETIME_INTERVAL_CODE", "DATETIME_INTERVAL_PRECISION", "DAY", 
			"DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERABLE", 
			"DEFERRABLE", "DEFERRED", "DEFINED", "DEFINER", "DEGREE", "DELETE", "DELIMITER", 
			"DELIMITERS", "DENSE_RANK", "DEPENDS", "DEPTH", "DEREF", "DERIVED", "DESC", 
			"DESCRIBE", "DESCRIPTOR", "DESTROY", "DESTRUCTOR", "DETERMINISTIC", "DIAGNOSTICS", 
			"DICTIONARY", "DISABLE", "DISABLE_PAGE_SKIPPING", "DISCARD", "DISCONNECT", 
			"DISPATCH", "DISTINCT", "DO", "DOMAIN", "DOUBLE", "DROP", "DYNAMIC", 
			"DYNAMIC_FUNCTION", "DYNAMIC_FUNCTION_CODE", "EACH", "ELEMENT", "ELSE", 
			"ENABLE", "ENCODING", "ENCRYPTED", "END", "END_EXEC", "EQUALS", "ESCAPE", 
			"EVERY", "EXCEPT", "EXCEPTION", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", 
			"EXEC", "EXECUTE", "EXISTING", "EXISTS", "EXP", "EXPLAIN", "EXTENDED", 
			"EXTENSION", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", 
			"FINAL", "FIRST", "FLOAT", "FLOOR", "FOLLOWING", "FOR", "FORCE", "FOREIGN", 
			"FORMAT", "FORTRAN", "FORWARD", "FOUND", "FREE", "FREEZE", "FROM", "FULL", 
			"FUNCTION", "FUSION", "G_", "GENERAL", "GENERATED", "GET", "GLOBAL", 
			"GO", "GOTO", "GRANT", "GRANTED", "GREATEST", "GROUP", "GROUPING", "HANDLER", 
			"HAVING", "HIERARCHY", "HOLD", "HOST", "HOUR", "IDENTITY", "IGNORE", 
			"ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLEMENTATION", "IMPLICIT", "IN", 
			"INCLUDING", "INCREMENT", "INDEX", "INDICATOR", "INFIX", "INHERITS", 
			"INITIALIZE", "INITIALLY", "INNER", "INOUT", "INPUT", "INSENSITIVE", 
			"INSERT", "INSTANCE", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", "INTERSECT", 
			"INTERSECTION", "INTERVAL", "INTO", "INVOKER", "IS", "ISOLATION", "ITERATE", 
			"JOIN", "K_", "KEY", "KEY_MEMBER", "KEY_TYPE", "LABEL", "LANCOMPILER", 
			"LANGUAGE", "LARGE", "LAST", "LATERAL", "LEADING", "LEAST", "LEFT", "LENGTH", 
			"LESS", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LN", "LOAD", "LOCAL", "LOCALTIME", 
			"LOCALTIMESTAMP", "LOCATION", "LOCATOR", "LOCK", "LOCKED", "LOWER", "M_", 
			"MAIN", "MAP", "MAPPING", "MATCH", "MATCH_SIMPLE", "MATCHED", "MAX", 
			"MAXVALUE", "MEMBER", "MERGE", "MESSAGE_LENGTH", "MESSAGE_OCTET_LENGTH", 
			"MESSAGE_TEXT", "METHOD", "MIN", "MINUTE", "MINVALUE", "MOD", "MODE", 
			"MODIFIES", "MODIFY", "MODULE", "MONTH", "MORE_", "MOVE", "MULTISET", 
			"MUMPS", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NESTING", 
			"NEW", "NEXT", "NO", "NOCREATEDB", "NOCREATEUSER", "NONE", "NORMALIZE", 
			"NORMALIZED", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL", 
			"NULLABLE", "NULLIF", "NULLS", "NUMBER", "NUMERIC", "OBJECT", "OCTET_LENGTH", 
			"OCTETS", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPEN", 
			"OPERATION", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDERING", 
			"ORDINALITY", "OTHERS", "OUT", "OUTER", "OUTPUT", "OVER", "OVERLAPS", 
			"OVERLAY", "OVERRIDING", "OWNER", "PAD", "PARAMETER", "PARAMETER_MODE", 
			"PARAMETER_NAME", "PARAMETER_ORDINAL_POSITION", "PARAMETER_SPECIFIC_CATALOG", 
			"PARAMETER_SPECIFIC_NAME", "PARAMETER_SPECIFIC_SCHEMA", "PARAMETERS", 
			"PARSER", "PARTIAL", "PARTITION", "PASCAL", "PASSWORD", "PATH", "PERCENT_RANK", 
			"PERCENTILE_CONT", "PERCENTILE_DISC", "PLACING", "PLAIN", "PLANS", "PLI", 
			"POSITION", "POSTFIX", "POWER", "PRECEDING", "PRECISION", "PREFIX", "PREORDER", 
			"PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", 
			"PROCEDURAL", "PROCEDURE", "PUBLIC", "PUBLICATION", "QUOTE", "RANGE", 
			"RANK", "READ", "READS", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", 
			"REF", "REFERENCES", "REFERENCING", "REFRESH", "REGR_AVGX", "REGR_AVGY", 
			"REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
			"REGR_SXY", "REGR_SYY", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", 
			"REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RESULT", "RETURN", 
			"RETURNED_CARDINALITY", "RETURNED_LENGTH", "RETURNED_OCTET_LENGTH", "RETURNED_SQLSTATE", 
			"RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", 
			"ROUTINE", "ROUTINE_CATALOG", "ROUTINE_NAME", "ROUTINE_SCHEMA", "ROW", 
			"ROW_COUNT", "ROW_NUMBER", "ROWS", "RULE", "SAVEPOINT", "SCALE", "SCHEMA", 
			"SCHEMA_NAME", "SCOPE", "SCOPE_CATALOG", "SCOPE_NAME", "SCOPE_SCHEMA", 
			"SCROLL", "SEARCH", "SECOND", "SECTION", "SECURITY", "SELECT", "SELF", 
			"SENSITIVE", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER_NAME", 
			"SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", 
			"SIMPLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", 
			"SPACE", "SPECIFIC", "SPECIFIC_NAME", "SPECIFICTYPE", "SQL", "SQLCODE", 
			"SQLERROR", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQRT", "STABLE", 
			"START", "STATE", "STATEMENT", "STATIC", "STATISTICS", "STDDEV_POP", 
			"STDDEV_SAMP", "STDIN", "STDOUT", "STORAGE", "STRICT", "STRUCTURE", "STYLE", 
			"SUBCLASS_ORIGIN", "SUBLIST", "SUBMULTISET", "SUBSCRIPTION", "SUBSTRING", 
			"SUM", "SYMMETRIC", "SYSID", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLE_NAME", 
			"TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TERMINATE", 
			"THAN", "THEN", "TIES", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
			"TIMING", "TO", "TOAST", "TOP_LEVEL_COUNT", "TRAILING", "TRANSACTION", 
			"TRANSACTION_ACTIVE", "TRANSACTIONS_COMMITTED", "TRANSACTIONS_ROLLED_BACK", 
			"TRANSFORM", "TRANSFORMS", "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGER", 
			"TRIGGER_CATALOG", "TRIGGER_NAME", "TRIGGER_SCHEMA", "TRIM", "TRUE", 
			"TRUNCATE", "TRUSTED", "TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", 
			"UNDER", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", 
			"UNNAMED", "UNNEST", "UNTIL", "UPDATE", "UPPER", "USAGE", "USER", "USER_DEFINED_TYPE_CATALOG", 
			"USER_DEFINED_TYPE_CODE", "USER_DEFINED_TYPE_NAME", "USER_DEFINED_TYPE_SCHEMA", 
			"USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VALUES", 
			"VAR_POP", "VAR_SAMP", "VARCHAR", "VARIABLE", "VARIADIC", "VARYING", 
			"VERBOSE", "VIEW", "VOLATILE", "WHEN", "WHENEVER", "WHERE", "WIDTH_BUCKET", 
			"WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRITE", "YAML", "YEAR", 
			"YES", "ZONE", "SUPERUSER", "NOSUPERUSER", "CREATEROLE", "NOCREATEROLE", 
			"INHERIT", "NOINHERIT", "LOGIN", "NOLOGIN", "REPLICATION", "NOREPLICATION", 
			"BYPASSRLS", "NOBYPASSRLS", "SFUNC", "STYPE", "SSPACE", "FINALFUNC", 
			"FINALFUNC_EXTRA", "COMBINEFUNC", "SERIALFUNC", "DESERIALFUNC", "INITCOND", 
			"MSFUNC", "MINVFUNC", "MSTYPE", "MSSPACE", "MFINALFUNC", "MFINALFUNC_EXTRA", 
			"MINITCOND", "SORTOP", "PARALLEL", "HYPOTHETICAL", "SAFE", "RESTRICTED", 
			"UNSAFE", "BASETYPE", "IF", "LOCALE", "LC_COLLATE", "LC_CTYPE", "PROVIDER", 
			"VERSION", "ALLOW_CONNECTIONS", "IS_TEMPLATE", "EVENT", "WRAPPER", "SERVER", 
			"BTREE", "HASH_", "GIST", "SPGIST", "GIN", "BRIN", "CONCURRENTLY", "INLINE", 
			"MATERIALIZED", "LEFTARG", "RIGHTARG", "COMMUTATOR", "NEGATOR", "HASHES", 
			"MERGES", "FAMILY", "POLICY", "OWNED", "ABSTIME", "BIGSERIAL", "BIT_VARYING", 
			"BOOL", "BOX", "BYTEA", "CHARACTER_VARYING", "CIDR", "CIRCLE", "FLOAT4", 
			"FLOAT8", "INET", "INT2", "INT4", "INT8", "JSON", "JSONB", "LINE", "LSEG", 
			"MACADDR", "MACADDR8", "MONEY", "PG_LSN", "POINT", "POLYGON", "RELTIME", 
			"SERIAL", "SERIAL2", "SERIAL4", "SERIAL8", "SMALLSERIAL", "STSTEM", "TEXT", 
			"TIMESTAMPTZ", "TIMETZ", "TSQUERY", "TSVECTOR", "TXID_SNAPSHOT", "UUID", 
			"VARBIT", "XML", "COMMA", "COLON", "COLON_COLON", "DOLLAR", "DOLLAR_DOLLAR", 
			"STAR", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
			"BIT_STRING", "REGEX_STRING", "NUMERIC_LITERAL", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
			"DOT", "SINGLEQ_STRING_LITERAL", "DOUBLEQ_STRING_LITERAL", "IDENTIFIER", 
			"DOLLAR_DEC", "IDENTIFIER_UNICODE", "AMP", "AMP_AMP", "AMP_LT", "AT_AT", 
			"AT_GT", "AT_SIGN", "BANG", "BANG_BANG", "BANG_EQUAL", "CARET", "EQUAL", 
			"EQUAL_GT", "GT", "GTE", "GT_GT", "HASH", "HASH_EQ", "HASH_GT", "HASH_GT_GT", 
			"HASH_HASH", "HYPHEN_GT", "HYPHEN_GT_GT", "HYPHEN_PIPE_HYPHEN", "LT", 
			"LTE", "LT_AT", "LT_CARET", "LT_GT", "LT_HYPHEN_GT", "LT_LT", "LT_LT_EQ", 
			"LT_QMARK_GT", "MINUS", "PERCENT", "PIPE", "PIPE_PIPE", "PIPE_PIPE_SLASH", 
			"PIPE_SLASH", "PLUS", "QMARK", "QMARK_AMP", "QMARK_HASH", "QMARK_HYPHEN", 
			"QMARK_PIPE", "SLASH", "TIL", "TIL_EQ", "TIL_GTE_TIL", "TIL_GT_TIL", 
			"TIL_LTE_TIL", "TIL_LT_TIL", "TIL_STAR", "TIL_TIL", "SEMI", "SPEL"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PostgreSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RootContext extends ParserRuleContext {
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public TerminalNode EOF() { return getToken(PostgreSqlParser.EOF, 0); }
		public List<TerminalNode> SEMI() { return getTokens(PostgreSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSqlParser.SEMI, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRoot(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(538);
			stmt();
			setState(547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(543);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(539);
						match(SEMI);
						setState(540);
						stmt();
						}
						} 
					}
					setState(545);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
				}
				setState(546);
				match(SEMI);
				}
			}

			setState(549);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StmtContext extends ParserRuleContext {
		public Abort_stmtContext abort_stmt() {
			return getRuleContext(Abort_stmtContext.class,0);
		}
		public Alter_stmtContext alter_stmt() {
			return getRuleContext(Alter_stmtContext.class,0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return getRuleContext(Analyze_stmtContext.class,0);
		}
		public Create_stmtContext create_stmt() {
			return getRuleContext(Create_stmtContext.class,0);
		}
		public Close_stmtContext close_stmt() {
			return getRuleContext(Close_stmtContext.class,0);
		}
		public Cluster_stmtContext cluster_stmt() {
			return getRuleContext(Cluster_stmtContext.class,0);
		}
		public Comment_stmtContext comment_stmt() {
			return getRuleContext(Comment_stmtContext.class,0);
		}
		public Commit_stmtContext commit_stmt() {
			return getRuleContext(Commit_stmtContext.class,0);
		}
		public Commit_prepared_stmtContext commit_prepared_stmt() {
			return getRuleContext(Commit_prepared_stmtContext.class,0);
		}
		public Copy_stmtContext copy_stmt() {
			return getRuleContext(Copy_stmtContext.class,0);
		}
		public Deallocate_stmtContext deallocate_stmt() {
			return getRuleContext(Deallocate_stmtContext.class,0);
		}
		public Declare_stmtContext declare_stmt() {
			return getRuleContext(Declare_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Discard_stmtContext discard_stmt() {
			return getRuleContext(Discard_stmtContext.class,0);
		}
		public Drop_stmtContext drop_stmt() {
			return getRuleContext(Drop_stmtContext.class,0);
		}
		public Execute_stmtContext execute_stmt() {
			return getRuleContext(Execute_stmtContext.class,0);
		}
		public Explain_stmtContext explain_stmt() {
			return getRuleContext(Explain_stmtContext.class,0);
		}
		public Fetch_stmtContext fetch_stmt() {
			return getRuleContext(Fetch_stmtContext.class,0);
		}
		public Grant_stmtContext grant_stmt() {
			return getRuleContext(Grant_stmtContext.class,0);
		}
		public Import_foreign_schema_stmtContext import_foreign_schema_stmt() {
			return getRuleContext(Import_foreign_schema_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Listen_stmtContext listen_stmt() {
			return getRuleContext(Listen_stmtContext.class,0);
		}
		public Load_stmtContext load_stmt() {
			return getRuleContext(Load_stmtContext.class,0);
		}
		public Lock_stmtContext lock_stmt() {
			return getRuleContext(Lock_stmtContext.class,0);
		}
		public Move_stmtContext move_stmt() {
			return getRuleContext(Move_stmtContext.class,0);
		}
		public Notify_stmtContext notify_stmt() {
			return getRuleContext(Notify_stmtContext.class,0);
		}
		public Prepare_stmtContext prepare_stmt() {
			return getRuleContext(Prepare_stmtContext.class,0);
		}
		public Prepare_transaction_stmtContext prepare_transaction_stmt() {
			return getRuleContext(Prepare_transaction_stmtContext.class,0);
		}
		public Reassign_owned_stmtContext reassign_owned_stmt() {
			return getRuleContext(Reassign_owned_stmtContext.class,0);
		}
		public Refresh_materialized_view_stmtContext refresh_materialized_view_stmt() {
			return getRuleContext(Refresh_materialized_view_stmtContext.class,0);
		}
		public Reindex_stmtContext reindex_stmt() {
			return getRuleContext(Reindex_stmtContext.class,0);
		}
		public Release_savepoint_stmtContext release_savepoint_stmt() {
			return getRuleContext(Release_savepoint_stmtContext.class,0);
		}
		public Reset_stmtContext reset_stmt() {
			return getRuleContext(Reset_stmtContext.class,0);
		}
		public Revoke_stmtContext revoke_stmt() {
			return getRuleContext(Revoke_stmtContext.class,0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return getRuleContext(Rollback_stmtContext.class,0);
		}
		public Rollback_prepared_stmtContext rollback_prepared_stmt() {
			return getRuleContext(Rollback_prepared_stmtContext.class,0);
		}
		public Rollback_to_savepoint_stmtContext rollback_to_savepoint_stmt() {
			return getRuleContext(Rollback_to_savepoint_stmtContext.class,0);
		}
		public Savepoint_stmtContext savepoint_stmt() {
			return getRuleContext(Savepoint_stmtContext.class,0);
		}
		public Security_label_stmtContext security_label_stmt() {
			return getRuleContext(Security_label_stmtContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Select_into_stmtContext select_into_stmt() {
			return getRuleContext(Select_into_stmtContext.class,0);
		}
		public Set_stmtContext set_stmt() {
			return getRuleContext(Set_stmtContext.class,0);
		}
		public Set_constraints_stmtContext set_constraints_stmt() {
			return getRuleContext(Set_constraints_stmtContext.class,0);
		}
		public Set_role_stmtContext set_role_stmt() {
			return getRuleContext(Set_role_stmtContext.class,0);
		}
		public Set_session_authorization_stmtContext set_session_authorization_stmt() {
			return getRuleContext(Set_session_authorization_stmtContext.class,0);
		}
		public Set_transaction_stmtContext set_transaction_stmt() {
			return getRuleContext(Set_transaction_stmtContext.class,0);
		}
		public Show_stmtContext show_stmt() {
			return getRuleContext(Show_stmtContext.class,0);
		}
		public Truncate_stmtContext truncate_stmt() {
			return getRuleContext(Truncate_stmtContext.class,0);
		}
		public Unlisten_stmtContext unlisten_stmt() {
			return getRuleContext(Unlisten_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Vacuum_stmtContext vacuum_stmt() {
			return getRuleContext(Vacuum_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitStmt(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				setState(551);
				abort_stmt();
				}
				break;
			case 2:
				{
				setState(552);
				alter_stmt();
				}
				break;
			case 3:
				{
				setState(553);
				analyze_stmt();
				}
				break;
			case 4:
				{
				setState(554);
				create_stmt();
				}
				break;
			case 5:
				{
				setState(555);
				close_stmt();
				}
				break;
			case 6:
				{
				setState(556);
				cluster_stmt();
				}
				break;
			case 7:
				{
				setState(557);
				comment_stmt();
				}
				break;
			case 8:
				{
				setState(558);
				commit_stmt();
				}
				break;
			case 9:
				{
				setState(559);
				commit_prepared_stmt();
				}
				break;
			case 10:
				{
				setState(560);
				copy_stmt();
				}
				break;
			case 11:
				{
				setState(561);
				deallocate_stmt();
				}
				break;
			case 12:
				{
				setState(562);
				declare_stmt();
				}
				break;
			case 13:
				{
				setState(563);
				delete_stmt();
				}
				break;
			case 14:
				{
				setState(564);
				discard_stmt();
				}
				break;
			case 15:
				{
				setState(565);
				drop_stmt();
				}
				break;
			case 16:
				{
				setState(566);
				execute_stmt();
				}
				break;
			case 17:
				{
				setState(567);
				explain_stmt();
				}
				break;
			case 18:
				{
				setState(568);
				fetch_stmt();
				}
				break;
			case 19:
				{
				setState(569);
				grant_stmt();
				}
				break;
			case 20:
				{
				setState(570);
				import_foreign_schema_stmt();
				}
				break;
			case 21:
				{
				setState(571);
				insert_stmt();
				}
				break;
			case 22:
				{
				setState(572);
				listen_stmt();
				}
				break;
			case 23:
				{
				setState(573);
				load_stmt();
				}
				break;
			case 24:
				{
				setState(574);
				lock_stmt();
				}
				break;
			case 25:
				{
				setState(575);
				move_stmt();
				}
				break;
			case 26:
				{
				setState(576);
				notify_stmt();
				}
				break;
			case 27:
				{
				setState(577);
				prepare_stmt();
				}
				break;
			case 28:
				{
				setState(578);
				prepare_transaction_stmt();
				}
				break;
			case 29:
				{
				setState(579);
				reassign_owned_stmt();
				}
				break;
			case 30:
				{
				setState(580);
				refresh_materialized_view_stmt();
				}
				break;
			case 31:
				{
				setState(581);
				reindex_stmt();
				}
				break;
			case 32:
				{
				setState(582);
				release_savepoint_stmt();
				}
				break;
			case 33:
				{
				setState(583);
				reset_stmt();
				}
				break;
			case 34:
				{
				setState(584);
				revoke_stmt();
				}
				break;
			case 35:
				{
				setState(585);
				rollback_stmt();
				}
				break;
			case 36:
				{
				setState(586);
				rollback_prepared_stmt();
				}
				break;
			case 37:
				{
				setState(587);
				rollback_to_savepoint_stmt();
				}
				break;
			case 38:
				{
				setState(588);
				savepoint_stmt();
				}
				break;
			case 39:
				{
				setState(589);
				security_label_stmt();
				}
				break;
			case 40:
				{
				setState(590);
				select_stmt();
				}
				break;
			case 41:
				{
				setState(591);
				select_into_stmt();
				}
				break;
			case 42:
				{
				setState(592);
				set_stmt();
				}
				break;
			case 43:
				{
				setState(593);
				set_constraints_stmt();
				}
				break;
			case 44:
				{
				setState(594);
				set_role_stmt();
				}
				break;
			case 45:
				{
				setState(595);
				set_session_authorization_stmt();
				}
				break;
			case 46:
				{
				setState(596);
				set_transaction_stmt();
				}
				break;
			case 47:
				{
				setState(597);
				show_stmt();
				}
				break;
			case 48:
				{
				setState(598);
				truncate_stmt();
				}
				break;
			case 49:
				{
				setState(599);
				unlisten_stmt();
				}
				break;
			case 50:
				{
				setState(600);
				update_stmt();
				}
				break;
			case 51:
				{
				setState(601);
				vacuum_stmt();
				}
				break;
			case 52:
				{
				setState(602);
				values_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Abort_stmtContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Abort_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abort_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAbort_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAbort_stmt(this);
		}
	}

	public final Abort_stmtContext abort_stmt() throws RecognitionException {
		Abort_stmtContext _localctx = new Abort_stmtContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_abort_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(605);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_stmtContext extends ParserRuleContext {
		public Alter_aggregate_stmtContext alter_aggregate_stmt() {
			return getRuleContext(Alter_aggregate_stmtContext.class,0);
		}
		public Alter_collation_stmtContext alter_collation_stmt() {
			return getRuleContext(Alter_collation_stmtContext.class,0);
		}
		public Alter_conversion_stmtContext alter_conversion_stmt() {
			return getRuleContext(Alter_conversion_stmtContext.class,0);
		}
		public Alter_database_stmtContext alter_database_stmt() {
			return getRuleContext(Alter_database_stmtContext.class,0);
		}
		public Alter_default_privileges_stmtContext alter_default_privileges_stmt() {
			return getRuleContext(Alter_default_privileges_stmtContext.class,0);
		}
		public Alter_domain_stmtContext alter_domain_stmt() {
			return getRuleContext(Alter_domain_stmtContext.class,0);
		}
		public Alter_event_trigger_stmtContext alter_event_trigger_stmt() {
			return getRuleContext(Alter_event_trigger_stmtContext.class,0);
		}
		public Alter_extension_stmtContext alter_extension_stmt() {
			return getRuleContext(Alter_extension_stmtContext.class,0);
		}
		public Alter_foreign_data_wrapper_stmtContext alter_foreign_data_wrapper_stmt() {
			return getRuleContext(Alter_foreign_data_wrapper_stmtContext.class,0);
		}
		public Alter_foreign_table_stmtContext alter_foreign_table_stmt() {
			return getRuleContext(Alter_foreign_table_stmtContext.class,0);
		}
		public Alter_function_stmtContext alter_function_stmt() {
			return getRuleContext(Alter_function_stmtContext.class,0);
		}
		public Alter_group_stmtContext alter_group_stmt() {
			return getRuleContext(Alter_group_stmtContext.class,0);
		}
		public Alter_index_stmtContext alter_index_stmt() {
			return getRuleContext(Alter_index_stmtContext.class,0);
		}
		public Alter_language_stmtContext alter_language_stmt() {
			return getRuleContext(Alter_language_stmtContext.class,0);
		}
		public Alter_large_object_stmtContext alter_large_object_stmt() {
			return getRuleContext(Alter_large_object_stmtContext.class,0);
		}
		public Alter_materialize_view_stmtContext alter_materialize_view_stmt() {
			return getRuleContext(Alter_materialize_view_stmtContext.class,0);
		}
		public Alter_operator_stmtContext alter_operator_stmt() {
			return getRuleContext(Alter_operator_stmtContext.class,0);
		}
		public Alter_operator_class_stmtContext alter_operator_class_stmt() {
			return getRuleContext(Alter_operator_class_stmtContext.class,0);
		}
		public Alter_operator_family_stmtContext alter_operator_family_stmt() {
			return getRuleContext(Alter_operator_family_stmtContext.class,0);
		}
		public Alter_policy_stmtContext alter_policy_stmt() {
			return getRuleContext(Alter_policy_stmtContext.class,0);
		}
		public Alter_publication_stmtContext alter_publication_stmt() {
			return getRuleContext(Alter_publication_stmtContext.class,0);
		}
		public Alter_role_stmtContext alter_role_stmt() {
			return getRuleContext(Alter_role_stmtContext.class,0);
		}
		public Alter_rule_stmtContext alter_rule_stmt() {
			return getRuleContext(Alter_rule_stmtContext.class,0);
		}
		public Alter_schema_stmtContext alter_schema_stmt() {
			return getRuleContext(Alter_schema_stmtContext.class,0);
		}
		public Alter_sequence_stmtContext alter_sequence_stmt() {
			return getRuleContext(Alter_sequence_stmtContext.class,0);
		}
		public Alter_server_stmtContext alter_server_stmt() {
			return getRuleContext(Alter_server_stmtContext.class,0);
		}
		public Alter_statistics_stmtContext alter_statistics_stmt() {
			return getRuleContext(Alter_statistics_stmtContext.class,0);
		}
		public Alter_subscription_stmtContext alter_subscription_stmt() {
			return getRuleContext(Alter_subscription_stmtContext.class,0);
		}
		public Alter_system_stmtContext alter_system_stmt() {
			return getRuleContext(Alter_system_stmtContext.class,0);
		}
		public Alter_table_stmtContext alter_table_stmt() {
			return getRuleContext(Alter_table_stmtContext.class,0);
		}
		public Alter_tablespace_stmtContext alter_tablespace_stmt() {
			return getRuleContext(Alter_tablespace_stmtContext.class,0);
		}
		public Alter_text_search_config_stmtContext alter_text_search_config_stmt() {
			return getRuleContext(Alter_text_search_config_stmtContext.class,0);
		}
		public Alter_text_search_dict_stmtContext alter_text_search_dict_stmt() {
			return getRuleContext(Alter_text_search_dict_stmtContext.class,0);
		}
		public Alter_text_search_parser_stmtContext alter_text_search_parser_stmt() {
			return getRuleContext(Alter_text_search_parser_stmtContext.class,0);
		}
		public Alter_text_search_template_stmtContext alter_text_search_template_stmt() {
			return getRuleContext(Alter_text_search_template_stmtContext.class,0);
		}
		public Alter_trigger_stmtContext alter_trigger_stmt() {
			return getRuleContext(Alter_trigger_stmtContext.class,0);
		}
		public Alter_type_stmtContext alter_type_stmt() {
			return getRuleContext(Alter_type_stmtContext.class,0);
		}
		public Alter_user_stmtContext alter_user_stmt() {
			return getRuleContext(Alter_user_stmtContext.class,0);
		}
		public Alter_user_mapping_stmtContext alter_user_mapping_stmt() {
			return getRuleContext(Alter_user_mapping_stmtContext.class,0);
		}
		public Alter_view_stmtContext alter_view_stmt() {
			return getRuleContext(Alter_view_stmtContext.class,0);
		}
		public Alter_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_stmt(this);
		}
	}

	public final Alter_stmtContext alter_stmt() throws RecognitionException {
		Alter_stmtContext _localctx = new Alter_stmtContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alter_stmt);
		try {
			setState(647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(607);
				alter_aggregate_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(608);
				alter_collation_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(609);
				alter_conversion_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(610);
				alter_database_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(611);
				alter_default_privileges_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(612);
				alter_domain_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(613);
				alter_event_trigger_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(614);
				alter_extension_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(615);
				alter_foreign_data_wrapper_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(616);
				alter_foreign_table_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(617);
				alter_function_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(618);
				alter_group_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(619);
				alter_index_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(620);
				alter_language_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(621);
				alter_large_object_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(622);
				alter_materialize_view_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(623);
				alter_operator_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(624);
				alter_operator_class_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(625);
				alter_operator_family_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(626);
				alter_policy_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(627);
				alter_publication_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(628);
				alter_role_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(629);
				alter_rule_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(630);
				alter_schema_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(631);
				alter_sequence_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(632);
				alter_server_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(633);
				alter_statistics_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(634);
				alter_subscription_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(635);
				alter_system_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(636);
				alter_table_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(637);
				alter_tablespace_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(638);
				alter_text_search_config_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(639);
				alter_text_search_dict_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(640);
				alter_text_search_parser_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(641);
				alter_text_search_template_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(642);
				alter_trigger_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(643);
				alter_type_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(644);
				alter_user_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(645);
				alter_user_mapping_stmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(646);
				alter_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_aggregate_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSqlParser.AGGREGATE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Aggregate_signatureContext aggregate_signature() {
			return getRuleContext(Aggregate_signatureContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_aggregate_stmt(this);
		}
	}

	public final Alter_aggregate_stmtContext alter_aggregate_stmt() throws RecognitionException {
		Alter_aggregate_stmtContext _localctx = new Alter_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alter_aggregate_stmt);
		try {
			setState(679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(649);
				match(ALTER);
				setState(650);
				match(AGGREGATE);
				setState(651);
				((Alter_aggregate_stmtContext)_localctx).name = identifier(0);
				setState(652);
				match(OPEN_PAREN);
				setState(653);
				aggregate_signature();
				setState(654);
				match(CLOSE_PAREN);
				setState(655);
				match(RENAME);
				setState(656);
				match(TO);
				setState(657);
				((Alter_aggregate_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(659);
				match(ALTER);
				setState(660);
				match(AGGREGATE);
				setState(661);
				((Alter_aggregate_stmtContext)_localctx).name = identifier(0);
				setState(662);
				match(OPEN_PAREN);
				setState(663);
				aggregate_signature();
				setState(664);
				match(CLOSE_PAREN);
				setState(665);
				match(OWNER);
				setState(666);
				match(TO);
				setState(667);
				((Alter_aggregate_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(669);
				match(ALTER);
				setState(670);
				match(AGGREGATE);
				setState(671);
				((Alter_aggregate_stmtContext)_localctx).name = identifier(0);
				setState(672);
				match(OPEN_PAREN);
				setState(673);
				aggregate_signature();
				setState(674);
				match(CLOSE_PAREN);
				setState(675);
				match(SET);
				setState(676);
				match(SCHEMA);
				setState(677);
				((Alter_aggregate_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_collation_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public IdentifierContext new_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSqlParser.COLLATION, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSqlParser.REFRESH, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSqlParser.VERSION, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_collation_stmt(this);
		}
	}

	public final Alter_collation_stmtContext alter_collation_stmt() throws RecognitionException {
		Alter_collation_stmtContext _localctx = new Alter_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_collation_stmt);
		try {
			setState(708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(681);
				match(ALTER);
				setState(682);
				match(COLLATION);
				setState(683);
				((Alter_collation_stmtContext)_localctx).name = name_();
				setState(684);
				match(REFRESH);
				setState(685);
				match(VERSION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(687);
				match(ALTER);
				setState(688);
				match(COLLATION);
				setState(689);
				((Alter_collation_stmtContext)_localctx).name = name_();
				setState(690);
				match(RENAME);
				setState(691);
				match(TO);
				setState(692);
				((Alter_collation_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(694);
				match(ALTER);
				setState(695);
				match(COLLATION);
				setState(696);
				((Alter_collation_stmtContext)_localctx).name = name_();
				setState(697);
				match(OWNER);
				setState(698);
				match(TO);
				setState(699);
				((Alter_collation_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(701);
				match(ALTER);
				setState(702);
				match(COLLATION);
				setState(703);
				((Alter_collation_stmtContext)_localctx).name = name_();
				setState(704);
				match(SET);
				setState(705);
				match(SCHEMA);
				setState(706);
				((Alter_collation_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_conversion_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSqlParser.CONVERSION, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_conversion_stmt(this);
		}
	}

	public final Alter_conversion_stmtContext alter_conversion_stmt() throws RecognitionException {
		Alter_conversion_stmtContext _localctx = new Alter_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alter_conversion_stmt);
		try {
			setState(731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(710);
				match(ALTER);
				setState(711);
				match(CONVERSION);
				setState(712);
				((Alter_conversion_stmtContext)_localctx).name = identifier(0);
				setState(713);
				match(RENAME);
				setState(714);
				match(TO);
				setState(715);
				((Alter_conversion_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(717);
				match(ALTER);
				setState(718);
				match(CONVERSION);
				setState(719);
				((Alter_conversion_stmtContext)_localctx).name = identifier(0);
				setState(720);
				match(OWNER);
				setState(721);
				match(TO);
				setState(722);
				((Alter_conversion_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(724);
				match(ALTER);
				setState(725);
				match(CONVERSION);
				setState(726);
				((Alter_conversion_stmtContext)_localctx).name = identifier(0);
				setState(727);
				match(SET);
				setState(728);
				match(SCHEMA);
				setState(729);
				((Alter_conversion_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_database_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_database_stmt(this);
		}
	}

	public final Alter_database_stmtContext alter_database_stmt() throws RecognitionException {
		Alter_database_stmtContext _localctx = new Alter_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_database_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(733);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_default_privileges_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_default_privileges_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_default_privileges_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_default_privileges_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_default_privileges_stmt(this);
		}
	}

	public final Alter_default_privileges_stmtContext alter_default_privileges_stmt() throws RecognitionException {
		Alter_default_privileges_stmtContext _localctx = new Alter_default_privileges_stmtContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alter_default_privileges_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(735);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_domain_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext constraint_name;
		public IdentifierContext new_constraint_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_name;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSqlParser.DOMAIN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSqlParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSqlParser.NULL, 0); }
		public TerminalNode ADD() { return getToken(PostgreSqlParser.ADD, 0); }
		public Domain_constraintContext domain_constraint() {
			return getRuleContext(Domain_constraintContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSqlParser.VALID, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSqlParser.CONSTRAINT, 0); }
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSqlParser.VALIDATE, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_domain_stmt(this);
		}
	}

	public final Alter_domain_stmtContext alter_domain_stmt() throws RecognitionException {
		Alter_domain_stmtContext _localctx = new Alter_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alter_domain_stmt);
		int _la;
		try {
			setState(813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(737);
				match(ALTER);
				setState(738);
				match(DOMAIN);
				setState(739);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(745);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(740);
					match(SET);
					setState(741);
					match(DEFAULT);
					setState(742);
					expr(0);
					}
					break;
				case DROP:
					{
					setState(743);
					match(DROP);
					setState(744);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(747);
				match(ALTER);
				setState(748);
				match(DOMAIN);
				setState(749);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(750);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(751);
				match(NOT);
				setState(752);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(754);
				match(ALTER);
				setState(755);
				match(DOMAIN);
				setState(756);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(757);
				match(ADD);
				setState(758);
				domain_constraint();
				setState(761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(759);
					match(NOT);
					setState(760);
					match(VALID);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(763);
				match(ALTER);
				setState(764);
				match(DOMAIN);
				setState(765);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(766);
				match(DROP);
				setState(767);
				match(CONSTRAINT);
				setState(770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(768);
					match(IF);
					setState(769);
					match(EXISTS);
					}
				}

				setState(772);
				((Alter_domain_stmtContext)_localctx).constraint_name = identifier(0);
				setState(774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(773);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(776);
				match(ALTER);
				setState(777);
				match(DOMAIN);
				setState(778);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(779);
				match(RENAME);
				setState(780);
				match(CONSTRAINT);
				setState(781);
				((Alter_domain_stmtContext)_localctx).constraint_name = identifier(0);
				setState(782);
				match(TO);
				setState(783);
				((Alter_domain_stmtContext)_localctx).new_constraint_name = identifier(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(785);
				match(ALTER);
				setState(786);
				match(DOMAIN);
				setState(787);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(788);
				match(VALIDATE);
				setState(789);
				match(CONSTRAINT);
				setState(790);
				((Alter_domain_stmtContext)_localctx).constraint_name = identifier(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(792);
				match(ALTER);
				setState(793);
				match(DOMAIN);
				setState(794);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(795);
				match(OWNER);
				setState(796);
				match(TO);
				setState(797);
				((Alter_domain_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(799);
				match(ALTER);
				setState(800);
				match(DOMAIN);
				setState(801);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(802);
				match(RENAME);
				setState(803);
				match(TO);
				setState(804);
				((Alter_domain_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(806);
				match(ALTER);
				setState(807);
				match(DOMAIN);
				setState(808);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(809);
				match(SET);
				setState(810);
				match(SCHEMA);
				setState(811);
				((Alter_domain_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_event_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_owner;
		public IdentifierContext new_name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSqlParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSqlParser.TRIGGER, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSqlParser.DISABLE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(PostgreSqlParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSqlParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSqlParser.ALWAYS, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public Alter_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_event_trigger_stmt(this);
		}
	}

	public final Alter_event_trigger_stmtContext alter_event_trigger_stmt() throws RecognitionException {
		Alter_event_trigger_stmtContext _localctx = new Alter_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alter_event_trigger_stmt);
		int _la;
		try {
			setState(848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(815);
				match(ALTER);
				setState(816);
				match(EVENT);
				setState(817);
				match(TRIGGER);
				setState(818);
				((Alter_event_trigger_stmtContext)_localctx).name = identifier(0);
				setState(819);
				match(DISABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(821);
				match(ALTER);
				setState(822);
				match(EVENT);
				setState(823);
				match(TRIGGER);
				setState(824);
				((Alter_event_trigger_stmtContext)_localctx).name = identifier(0);
				setState(825);
				match(ENABLE);
				setState(827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS || _la==REPLICA) {
					{
					setState(826);
					_la = _input.LA(1);
					if ( !(_la==ALWAYS || _la==REPLICA) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(829);
				match(ALTER);
				setState(830);
				match(EVENT);
				setState(831);
				match(TRIGGER);
				setState(832);
				((Alter_event_trigger_stmtContext)_localctx).name = identifier(0);
				setState(833);
				match(OWNER);
				setState(834);
				match(TO);
				setState(838);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(835);
					((Alter_event_trigger_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(836);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(837);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(840);
				match(ALTER);
				setState(841);
				match(EVENT);
				setState(842);
				match(TRIGGER);
				setState(843);
				((Alter_event_trigger_stmtContext)_localctx).name = identifier(0);
				setState(844);
				match(RENAME);
				setState(845);
				match(TO);
				setState(846);
				((Alter_event_trigger_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_extension_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_version;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSqlParser.EXTENSION, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_extension_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_extension_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_extension_stmt(this);
		}
	}

	public final Alter_extension_stmtContext alter_extension_stmt() throws RecognitionException {
		Alter_extension_stmtContext _localctx = new Alter_extension_stmtContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_extension_stmt);
		int _la;
		try {
			setState(865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(850);
				match(ALTER);
				setState(851);
				match(EXTENSION);
				setState(852);
				((Alter_extension_stmtContext)_localctx).name = identifier(0);
				setState(853);
				match(UPDATE);
				setState(856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(854);
					match(TO);
					setState(855);
					((Alter_extension_stmtContext)_localctx).new_version = identifier(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(858);
				match(ALTER);
				setState(859);
				match(EXTENSION);
				setState(860);
				((Alter_extension_stmtContext)_localctx).name = identifier(0);
				setState(861);
				match(SET);
				setState(862);
				match(SCHEMA);
				setState(863);
				((Alter_extension_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_foreign_data_wrapper_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_foreign_data_wrapper_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_data_wrapper_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_foreign_data_wrapper_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_foreign_data_wrapper_stmt(this);
		}
	}

	public final Alter_foreign_data_wrapper_stmtContext alter_foreign_data_wrapper_stmt() throws RecognitionException {
		Alter_foreign_data_wrapper_stmtContext _localctx = new Alter_foreign_data_wrapper_stmtContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_foreign_data_wrapper_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(867);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_foreign_table_actionContext extends ParserRuleContext {
		public Column_nameContext column_name_;
		public Data_typeContext data_type_;
		public IdentifierContext collation;
		public Column_constraintsContext column_constraints_;
		public Option_listContext attribute_values;
		public Identifier_listContext attributes;
		public Todo_fill_inContext constraint_name;
		public Todo_fill_inContext trigger_name;
		public IdentifierContext parent_table;
		public Role_nameContext new_owner;
		public TerminalNode ADD() { return getToken(PostgreSqlParser.ADD, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSqlParser.COLUMN, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSqlParser.COLLATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_constraintsContext column_constraints() {
			return getRuleContext(Column_constraintsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSqlParser.TYPE, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode DATA() { return getToken(PostgreSqlParser.DATA, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSqlParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSqlParser.NULL, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSqlParser.STATISTICS, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSqlParser.INTEGER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSqlParser.RESET, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PostgreSqlParser.STORAGE, 0); }
		public TerminalNode PLAIN() { return getToken(PostgreSqlParser.PLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTENDED() { return getToken(PostgreSqlParser.EXTENDED, 0); }
		public TerminalNode MAIN() { return getToken(PostgreSqlParser.MAIN, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSqlParser.OPTIONS, 0); }
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSqlParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSqlParser.VALIDATE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSqlParser.CONSTRAINT, 0); }
		public Todo_fill_inContext todo_fill_in() {
			return getRuleContext(Todo_fill_inContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(PostgreSqlParser.DISABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSqlParser.TRIGGER, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSqlParser.USER, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSqlParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSqlParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSqlParser.ALWAYS, 0); }
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSqlParser.OIDS, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSqlParser.WITHOUT, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSqlParser.INHERIT, 0); }
		public TerminalNode NO() { return getToken(PostgreSqlParser.NO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Alter_foreign_table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_foreign_table_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_foreign_table_action(this);
		}
	}

	public final Alter_foreign_table_actionContext alter_foreign_table_action() throws RecognitionException {
		Alter_foreign_table_actionContext _localctx = new Alter_foreign_table_actionContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alter_foreign_table_action);
		int _la;
		try {
			setState(1041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(869);
				match(ADD);
				setState(871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(870);
					match(COLUMN);
					}
				}

				setState(873);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(874);
				((Alter_foreign_table_actionContext)_localctx).data_type_ = data_type();
				setState(877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(875);
					match(COLLATE);
					setState(876);
					((Alter_foreign_table_actionContext)_localctx).collation = identifier(0);
					}
				}

				setState(880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(879);
					((Alter_foreign_table_actionContext)_localctx).column_constraints_ = column_constraints();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(882);
				match(DROP);
				setState(884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(883);
					match(COLUMN);
					}
				}

				setState(888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(886);
					match(IF);
					setState(887);
					match(EXISTS);
					}
				}

				setState(890);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(891);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(894);
				match(ALTER);
				setState(896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(895);
					match(COLUMN);
					}
				}

				setState(898);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(899);
					match(SET);
					setState(900);
					match(DATA);
					}
				}

				setState(903);
				match(TYPE);
				setState(904);
				((Alter_foreign_table_actionContext)_localctx).data_type_ = data_type();
				setState(907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(905);
					match(COLLATE);
					setState(906);
					((Alter_foreign_table_actionContext)_localctx).collation = identifier(0);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(909);
				match(ALTER);
				setState(911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(910);
					match(COLUMN);
					}
				}

				setState(913);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(914);
				match(SET);
				setState(915);
				match(DEFAULT);
				setState(916);
				expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(918);
				match(ALTER);
				setState(920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(919);
					match(COLUMN);
					}
				}

				setState(922);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(923);
				match(DROP);
				setState(924);
				match(DEFAULT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(926);
				match(ALTER);
				setState(928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(927);
					match(COLUMN);
					}
				}

				setState(930);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(931);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(932);
				match(NOT);
				setState(933);
				match(NULL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(935);
				match(ALTER);
				setState(937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(936);
					match(COLUMN);
					}
				}

				setState(939);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(940);
				match(SET);
				setState(941);
				match(STATISTICS);
				setState(942);
				match(INTEGER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(944);
				match(ALTER);
				setState(946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(945);
					match(COLUMN);
					}
				}

				setState(948);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(949);
				match(SET);
				setState(950);
				match(OPEN_PAREN);
				setState(951);
				((Alter_foreign_table_actionContext)_localctx).attribute_values = option_list();
				setState(952);
				match(CLOSE_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(954);
				match(ALTER);
				setState(956);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(955);
					match(COLUMN);
					}
				}

				setState(958);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(959);
				match(RESET);
				setState(960);
				match(OPEN_PAREN);
				setState(961);
				((Alter_foreign_table_actionContext)_localctx).attributes = identifier_list();
				setState(962);
				match(CLOSE_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(964);
				match(ALTER);
				setState(966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(965);
					match(COLUMN);
					}
				}

				setState(968);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(969);
				match(SET);
				setState(970);
				match(STORAGE);
				setState(971);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==EXTERNAL || _la==MAIN || _la==PLAIN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(973);
				match(ALTER);
				setState(975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(974);
					match(COLUMN);
					}
				}

				setState(977);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(978);
				match(OPTIONS);
				{
				setState(980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADD || _la==DROP || _la==SET) {
					{
					setState(979);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SET) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(982);
				match(ADD);
				setState(983);
				table_constraint();
				setState(986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(984);
					match(NOT);
					setState(985);
					match(VALID);
					}
				}

				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(988);
				match(VALIDATE);
				setState(989);
				match(CONSTRAINT);
				setState(990);
				((Alter_foreign_table_actionContext)_localctx).constraint_name = todo_fill_in();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(991);
				match(DROP);
				setState(992);
				match(CONSTRAINT);
				setState(995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(993);
					match(IF);
					setState(994);
					match(EXISTS);
					}
					break;
				}
				setState(997);
				((Alter_foreign_table_actionContext)_localctx).constraint_name = todo_fill_in();
				setState(999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(998);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1001);
				match(DISABLE);
				setState(1002);
				match(TRIGGER);
				setState(1006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1003);
					((Alter_foreign_table_actionContext)_localctx).trigger_name = todo_fill_in();
					}
					break;
				case 2:
					{
					setState(1004);
					match(ALL);
					}
					break;
				case 3:
					{
					setState(1005);
					match(USER);
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1008);
				match(ENABLE);
				setState(1009);
				match(TRIGGER);
				setState(1013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(1010);
					((Alter_foreign_table_actionContext)_localctx).trigger_name = todo_fill_in();
					}
					break;
				case 2:
					{
					setState(1011);
					match(ALL);
					}
					break;
				case 3:
					{
					setState(1012);
					match(USER);
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1015);
				match(ENABLE);
				setState(1016);
				match(REPLICA);
				setState(1017);
				match(TRIGGER);
				setState(1018);
				((Alter_foreign_table_actionContext)_localctx).trigger_name = todo_fill_in();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1019);
				match(ENABLE);
				setState(1020);
				match(ALWAYS);
				setState(1021);
				match(TRIGGER);
				setState(1022);
				((Alter_foreign_table_actionContext)_localctx).trigger_name = todo_fill_in();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1023);
				match(SET);
				setState(1024);
				match(WITH);
				setState(1025);
				match(OIDS);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1026);
				match(SET);
				setState(1027);
				match(WITHOUT);
				setState(1028);
				match(OIDS);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1029);
				match(INHERIT);
				setState(1030);
				((Alter_foreign_table_actionContext)_localctx).parent_table = identifier(0);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1031);
				match(NO);
				setState(1032);
				match(INHERIT);
				setState(1033);
				((Alter_foreign_table_actionContext)_localctx).parent_table = identifier(0);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1034);
				match(OWNER);
				setState(1035);
				match(TO);
				setState(1036);
				((Alter_foreign_table_actionContext)_localctx).new_owner = role_name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1037);
				match(OPTIONS);
				{
				setState(1039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADD || _la==DROP || _la==SET) {
					{
					setState(1038);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SET) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_foreign_table_action_listContext extends ParserRuleContext {
		public List<Alter_foreign_table_actionContext> alter_foreign_table_action() {
			return getRuleContexts(Alter_foreign_table_actionContext.class);
		}
		public Alter_foreign_table_actionContext alter_foreign_table_action(int i) {
			return getRuleContext(Alter_foreign_table_actionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Alter_foreign_table_action_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_table_action_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_foreign_table_action_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_foreign_table_action_list(this);
		}
	}

	public final Alter_foreign_table_action_listContext alter_foreign_table_action_list() throws RecognitionException {
		Alter_foreign_table_action_listContext _localctx = new Alter_foreign_table_action_listContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alter_foreign_table_action_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1043);
			alter_foreign_table_action();
			setState(1048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1044);
				match(COMMA);
				setState(1045);
				alter_foreign_table_action();
				}
				}
				setState(1050);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_foreign_table_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Alter_foreign_table_action_listContext actions;
		public Column_nameContext column_name_;
		public IdentifierContext new_column_name;
		public IdentifierContext new_name;
		public IdentifierContext new_schama;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Alter_foreign_table_action_listContext alter_foreign_table_action_list() {
			return getRuleContext(Alter_foreign_table_action_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSqlParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_foreign_table_stmt(this);
		}
	}

	public final Alter_foreign_table_stmtContext alter_foreign_table_stmt() throws RecognitionException {
		Alter_foreign_table_stmtContext _localctx = new Alter_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alter_foreign_table_stmt);
		int _la;
		try {
			setState(1113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1051);
				match(ALTER);
				setState(1052);
				match(FOREIGN);
				setState(1053);
				match(TABLE);
				setState(1056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1054);
					match(IF);
					setState(1055);
					match(EXISTS);
					}
				}

				setState(1059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1058);
					match(ONLY);
					}
				}

				setState(1061);
				((Alter_foreign_table_stmtContext)_localctx).name = identifier(0);
				setState(1063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(1062);
					match(STAR);
					}
				}

				setState(1065);
				((Alter_foreign_table_stmtContext)_localctx).actions = alter_foreign_table_action_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1067);
				match(ALTER);
				setState(1068);
				match(FOREIGN);
				setState(1069);
				match(TABLE);
				setState(1072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1070);
					match(IF);
					setState(1071);
					match(EXISTS);
					}
				}

				setState(1075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1074);
					match(ONLY);
					}
				}

				setState(1077);
				((Alter_foreign_table_stmtContext)_localctx).name = identifier(0);
				setState(1079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(1078);
					match(STAR);
					}
				}

				setState(1081);
				match(RENAME);
				setState(1083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1082);
					match(COLUMN);
					}
				}

				setState(1085);
				((Alter_foreign_table_stmtContext)_localctx).column_name_ = column_name();
				setState(1086);
				match(TO);
				setState(1087);
				((Alter_foreign_table_stmtContext)_localctx).new_column_name = identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1089);
				match(ALTER);
				setState(1090);
				match(FOREIGN);
				setState(1091);
				match(TABLE);
				setState(1094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1092);
					match(IF);
					setState(1093);
					match(EXISTS);
					}
				}

				setState(1096);
				((Alter_foreign_table_stmtContext)_localctx).name = identifier(0);
				setState(1097);
				match(RENAME);
				setState(1098);
				match(TO);
				setState(1099);
				((Alter_foreign_table_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1101);
				match(ALTER);
				setState(1102);
				match(FOREIGN);
				setState(1103);
				match(TABLE);
				setState(1106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1104);
					match(IF);
					setState(1105);
					match(EXISTS);
					}
				}

				setState(1108);
				((Alter_foreign_table_stmtContext)_localctx).name = identifier(0);
				setState(1109);
				match(SET);
				setState(1110);
				match(SCHEMA);
				setState(1111);
				((Alter_foreign_table_stmtContext)_localctx).new_schama = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_function_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_function_stmt(this);
		}
	}

	public final Alter_function_stmtContext alter_function_stmt() throws RecognitionException {
		Alter_function_stmtContext _localctx = new Alter_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alter_function_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1115);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_group_stmtContext extends ParserRuleContext {
		public Role_nameContext role;
		public Identifier_listContext users;
		public IdentifierContext group_name;
		public IdentifierContext new_name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSqlParser.GROUP, 0); }
		public TerminalNode ADD() { return getToken(PostgreSqlParser.ADD, 0); }
		public TerminalNode USER() { return getToken(PostgreSqlParser.USER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Alter_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_group_stmt(this);
		}
	}

	public final Alter_group_stmtContext alter_group_stmt() throws RecognitionException {
		Alter_group_stmtContext _localctx = new Alter_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_group_stmt);
		try {
			setState(1138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1117);
				match(ALTER);
				setState(1118);
				match(GROUP);
				setState(1119);
				((Alter_group_stmtContext)_localctx).role = role_name();
				setState(1120);
				match(ADD);
				setState(1121);
				match(USER);
				setState(1122);
				((Alter_group_stmtContext)_localctx).users = identifier_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1124);
				match(ALTER);
				setState(1125);
				match(GROUP);
				setState(1126);
				((Alter_group_stmtContext)_localctx).role = role_name();
				setState(1127);
				match(DROP);
				setState(1128);
				match(USER);
				setState(1129);
				((Alter_group_stmtContext)_localctx).users = identifier_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1131);
				match(ALTER);
				setState(1132);
				match(GROUP);
				setState(1133);
				((Alter_group_stmtContext)_localctx).group_name = identifier(0);
				setState(1134);
				match(RENAME);
				setState(1135);
				match(TO);
				setState(1136);
				((Alter_group_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_index_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext tablespace_name;
		public IdentifierContext extension_name;
		public Identifier_listContext roles;
		public IdentifierContext new_tablespace;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSqlParser.INDEX, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSqlParser.TABLESPACE, i);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSqlParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSqlParser.EXTENSION, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode RESET() { return getToken(PostgreSqlParser.RESET, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PostgreSqlParser.IN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSqlParser.NOWAIT, 0); }
		public Alter_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_index_stmt(this);
		}
	}

	public final Alter_index_stmtContext alter_index_stmt() throws RecognitionException {
		Alter_index_stmtContext _localctx = new Alter_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alter_index_stmt);
		int _la;
		try {
			setState(1210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1140);
				match(ALTER);
				setState(1141);
				match(INDEX);
				setState(1144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1142);
					match(IF);
					setState(1143);
					match(EXISTS);
					}
				}

				setState(1146);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1147);
				match(RENAME);
				setState(1148);
				match(TO);
				setState(1149);
				((Alter_index_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1151);
				match(ALTER);
				setState(1152);
				match(INDEX);
				setState(1155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1153);
					match(IF);
					setState(1154);
					match(EXISTS);
					}
				}

				setState(1157);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1158);
				match(SET);
				setState(1159);
				match(TABLESPACE);
				setState(1160);
				((Alter_index_stmtContext)_localctx).tablespace_name = identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1162);
				match(ALTER);
				setState(1163);
				match(INDEX);
				setState(1164);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1165);
				match(DEPENDS);
				setState(1166);
				match(ON);
				setState(1167);
				match(EXTENSION);
				setState(1168);
				((Alter_index_stmtContext)_localctx).extension_name = identifier(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1170);
				match(ALTER);
				setState(1171);
				match(INDEX);
				setState(1174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1172);
					match(IF);
					setState(1173);
					match(EXISTS);
					}
				}

				setState(1176);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1177);
				match(SET);
				setState(1178);
				match(OPEN_PAREN);
				setState(1179);
				option_list();
				setState(1180);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1182);
				match(ALTER);
				setState(1183);
				match(INDEX);
				setState(1186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1184);
					match(IF);
					setState(1185);
					match(EXISTS);
					}
				}

				setState(1188);
				match(RESET);
				setState(1189);
				match(OPEN_PAREN);
				setState(1190);
				identifier_list();
				setState(1191);
				match(CLOSE_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1193);
				match(ALTER);
				setState(1194);
				match(INDEX);
				setState(1195);
				match(ALL);
				setState(1196);
				match(IN);
				setState(1197);
				match(TABLESPACE);
				setState(1198);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1199);
					match(OWNED);
					setState(1200);
					match(BY);
					setState(1201);
					((Alter_index_stmtContext)_localctx).roles = identifier_list();
					}
				}

				setState(1204);
				match(SET);
				setState(1205);
				match(TABLESPACE);
				setState(1206);
				((Alter_index_stmtContext)_localctx).new_tablespace = identifier(0);
				setState(1208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1207);
					match(NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_language_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSqlParser.LANGUAGE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSqlParser.PROCEDURAL, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public Alter_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_language_stmt(this);
		}
	}

	public final Alter_language_stmtContext alter_language_stmt() throws RecognitionException {
		Alter_language_stmtContext _localctx = new Alter_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alter_language_stmt);
		int _la;
		try {
			setState(1235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1212);
				match(ALTER);
				setState(1214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1213);
					match(PROCEDURAL);
					}
				}

				setState(1216);
				match(LANGUAGE);
				setState(1217);
				((Alter_language_stmtContext)_localctx).name = identifier(0);
				setState(1218);
				match(RENAME);
				setState(1219);
				match(TO);
				setState(1220);
				((Alter_language_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1222);
				match(ALTER);
				setState(1224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1223);
					match(PROCEDURAL);
					}
				}

				setState(1226);
				match(LANGUAGE);
				setState(1227);
				((Alter_language_stmtContext)_localctx).name = identifier(0);
				setState(1228);
				match(OWNER);
				setState(1229);
				match(TO);
				setState(1233);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1230);
					((Alter_language_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1231);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1232);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_large_object_stmtContext extends ParserRuleContext {
		public Token large_object_oid;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSqlParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSqlParser.OBJECT, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSqlParser.INTEGER_LITERAL, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_large_object_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_large_object_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_large_object_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_large_object_stmt(this);
		}
	}

	public final Alter_large_object_stmtContext alter_large_object_stmt() throws RecognitionException {
		Alter_large_object_stmtContext _localctx = new Alter_large_object_stmtContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_large_object_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1237);
			match(ALTER);
			setState(1238);
			match(LARGE);
			setState(1239);
			match(OBJECT);
			setState(1240);
			((Alter_large_object_stmtContext)_localctx).large_object_oid = match(INTEGER_LITERAL);
			setState(1241);
			match(OWNER);
			setState(1242);
			match(TO);
			setState(1246);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(1243);
				((Alter_large_object_stmtContext)_localctx).new_owner = identifier(0);
				}
				break;
			case CURRENT_USER:
				{
				setState(1244);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(1245);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_materialize_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_materialize_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_materialize_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_materialize_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_materialize_view_stmt(this);
		}
	}

	public final Alter_materialize_view_stmtContext alter_materialize_view_stmt() throws RecognitionException {
		Alter_materialize_view_stmtContext _localctx = new Alter_materialize_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alter_materialize_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1248);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_operator_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_operator_stmt(this);
		}
	}

	public final Alter_operator_stmtContext alter_operator_stmt() throws RecognitionException {
		Alter_operator_stmtContext _localctx = new Alter_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alter_operator_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1250);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_operator_class_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSqlParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_operator_class_stmt(this);
		}
	}

	public final Alter_operator_class_stmtContext alter_operator_class_stmt() throws RecognitionException {
		Alter_operator_class_stmtContext _localctx = new Alter_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alter_operator_class_stmt);
		try {
			setState(1285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1252);
				match(ALTER);
				setState(1253);
				match(OPERATOR);
				setState(1254);
				match(CLASS);
				setState(1255);
				((Alter_operator_class_stmtContext)_localctx).name = identifier(0);
				setState(1256);
				match(USING);
				setState(1257);
				index_method();
				setState(1258);
				match(RENAME);
				setState(1259);
				match(TO);
				setState(1260);
				((Alter_operator_class_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1262);
				match(ALTER);
				setState(1263);
				match(OPERATOR);
				setState(1264);
				match(CLASS);
				setState(1265);
				((Alter_operator_class_stmtContext)_localctx).name = identifier(0);
				setState(1266);
				match(USING);
				setState(1267);
				index_method();
				setState(1268);
				match(OWNER);
				setState(1269);
				match(TO);
				setState(1273);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1270);
					((Alter_operator_class_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1271);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1272);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1275);
				match(ALTER);
				setState(1276);
				match(OPERATOR);
				setState(1277);
				match(CLASS);
				setState(1278);
				((Alter_operator_class_stmtContext)_localctx).name = identifier(0);
				setState(1279);
				match(USING);
				setState(1280);
				index_method();
				setState(1281);
				match(SET);
				setState(1282);
				match(SCHEMA);
				setState(1283);
				((Alter_operator_class_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_operator_family_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_operator_family_stmt(this);
		}
	}

	public final Alter_operator_family_stmtContext alter_operator_family_stmt() throws RecognitionException {
		Alter_operator_family_stmtContext _localctx = new Alter_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_operator_family_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1287);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_policy_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public IdentifierContext new_name;
		public Role_name_listContext roles;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSqlParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSqlParser.CHECK, 0); }
		public Role_name_listContext role_name_list() {
			return getRuleContext(Role_name_listContext.class,0);
		}
		public Alter_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_policy_stmt(this);
		}
	}

	public final Alter_policy_stmtContext alter_policy_stmt() throws RecognitionException {
		Alter_policy_stmtContext _localctx = new Alter_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_policy_stmt);
		int _la;
		try {
			setState(1316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1289);
				match(ALTER);
				setState(1290);
				match(POLICY);
				setState(1291);
				((Alter_policy_stmtContext)_localctx).name = identifier(0);
				setState(1292);
				match(ON);
				setState(1293);
				((Alter_policy_stmtContext)_localctx).table_name = identifier(0);
				setState(1294);
				match(RENAME);
				setState(1295);
				match(TO);
				setState(1296);
				((Alter_policy_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1298);
				match(ALTER);
				setState(1299);
				match(POLICY);
				setState(1300);
				((Alter_policy_stmtContext)_localctx).name = identifier(0);
				setState(1301);
				match(ON);
				setState(1302);
				((Alter_policy_stmtContext)_localctx).table_name = identifier(0);
				setState(1305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(1303);
					match(TO);
					setState(1304);
					((Alter_policy_stmtContext)_localctx).roles = role_name_list();
					}
				}

				setState(1309);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1307);
					match(USING);
					setState(1308);
					predicate(0);
					}
				}

				setState(1314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1311);
					match(WITH);
					setState(1312);
					match(CHECK);
					setState(1313);
					predicate(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_publication_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Identifier_listContext table_names;
		public Role_nameContext new_owner;
		public Name_Context new_name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSqlParser.PUBLICATION, 0); }
		public TerminalNode ADD() { return getToken(PostgreSqlParser.ADD, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Alter_publication_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_publication_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_publication_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_publication_stmt(this);
		}
	}

	public final Alter_publication_stmtContext alter_publication_stmt() throws RecognitionException {
		Alter_publication_stmtContext _localctx = new Alter_publication_stmtContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_publication_stmt);
		int _la;
		try {
			setState(1370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1318);
				match(ALTER);
				setState(1319);
				match(PUBLICATION);
				setState(1320);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1321);
				match(ADD);
				setState(1322);
				match(TABLE);
				setState(1324);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1323);
					match(ONLY);
					}
				}

				setState(1326);
				((Alter_publication_stmtContext)_localctx).table_names = identifier_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1328);
				match(ALTER);
				setState(1329);
				match(PUBLICATION);
				setState(1330);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1331);
				match(SET);
				setState(1332);
				match(TABLE);
				setState(1334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1333);
					match(ONLY);
					}
				}

				setState(1336);
				((Alter_publication_stmtContext)_localctx).table_names = identifier_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1338);
				match(ALTER);
				setState(1339);
				match(PUBLICATION);
				setState(1340);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1341);
				match(DROP);
				setState(1342);
				match(TABLE);
				setState(1344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1343);
					match(ONLY);
					}
				}

				setState(1346);
				((Alter_publication_stmtContext)_localctx).table_names = identifier_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1348);
				match(ALTER);
				setState(1349);
				match(PUBLICATION);
				setState(1350);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1351);
				match(SET);
				setState(1352);
				match(OPEN_PAREN);
				setState(1353);
				option_list();
				setState(1354);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1356);
				match(ALTER);
				setState(1357);
				match(PUBLICATION);
				setState(1358);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1359);
				match(OWNER);
				setState(1360);
				match(TO);
				setState(1361);
				((Alter_publication_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1363);
				match(ALTER);
				setState(1364);
				match(PUBLICATION);
				setState(1365);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1366);
				match(RENAME);
				setState(1367);
				match(TO);
				setState(1368);
				((Alter_publication_stmtContext)_localctx).new_name = name_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_role_optionsContext extends ParserRuleContext {
		public Token connlimit;
		public TerminalNode SUPERUSER() { return getToken(PostgreSqlParser.SUPERUSER, 0); }
		public TerminalNode NOSUPERUSER() { return getToken(PostgreSqlParser.NOSUPERUSER, 0); }
		public TerminalNode CREATEDB() { return getToken(PostgreSqlParser.CREATEDB, 0); }
		public TerminalNode NOCREATEDB() { return getToken(PostgreSqlParser.NOCREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(PostgreSqlParser.CREATEROLE, 0); }
		public TerminalNode NOCREATEROLE() { return getToken(PostgreSqlParser.NOCREATEROLE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSqlParser.INHERIT, 0); }
		public TerminalNode NOINHERIT() { return getToken(PostgreSqlParser.NOINHERIT, 0); }
		public TerminalNode LOGIN() { return getToken(PostgreSqlParser.LOGIN, 0); }
		public TerminalNode NOLOGIN() { return getToken(PostgreSqlParser.NOLOGIN, 0); }
		public TerminalNode REPLICATION() { return getToken(PostgreSqlParser.REPLICATION, 0); }
		public TerminalNode NOREPLICATION() { return getToken(PostgreSqlParser.NOREPLICATION, 0); }
		public TerminalNode BYPASSRLS() { return getToken(PostgreSqlParser.BYPASSRLS, 0); }
		public TerminalNode NOBYPASSRLS() { return getToken(PostgreSqlParser.NOBYPASSRLS, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSqlParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSqlParser.LIMIT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSqlParser.INTEGER, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSqlParser.PASSWORD, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSqlParser.ENCRYPTED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSqlParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSqlParser.UNTIL, 0); }
		public Alter_role_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_role_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_role_options(this);
		}
	}

	public final Alter_role_optionsContext alter_role_options() throws RecognitionException {
		Alter_role_optionsContext _localctx = new Alter_role_optionsContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_role_options);
		int _la;
		try {
			setState(1397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1372);
				match(SUPERUSER);
				}
				break;
			case NOSUPERUSER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1373);
				match(NOSUPERUSER);
				}
				break;
			case CREATEDB:
				enterOuterAlt(_localctx, 3);
				{
				setState(1374);
				match(CREATEDB);
				}
				break;
			case NOCREATEDB:
				enterOuterAlt(_localctx, 4);
				{
				setState(1375);
				match(NOCREATEDB);
				}
				break;
			case CREATEROLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1376);
				match(CREATEROLE);
				}
				break;
			case NOCREATEROLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1377);
				match(NOCREATEROLE);
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1378);
				match(INHERIT);
				}
				break;
			case NOINHERIT:
				enterOuterAlt(_localctx, 8);
				{
				setState(1379);
				match(NOINHERIT);
				}
				break;
			case LOGIN:
				enterOuterAlt(_localctx, 9);
				{
				setState(1380);
				match(LOGIN);
				}
				break;
			case NOLOGIN:
				enterOuterAlt(_localctx, 10);
				{
				setState(1381);
				match(NOLOGIN);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 11);
				{
				setState(1382);
				match(REPLICATION);
				}
				break;
			case NOREPLICATION:
				enterOuterAlt(_localctx, 12);
				{
				setState(1383);
				match(NOREPLICATION);
				}
				break;
			case BYPASSRLS:
				enterOuterAlt(_localctx, 13);
				{
				setState(1384);
				match(BYPASSRLS);
				}
				break;
			case NOBYPASSRLS:
				enterOuterAlt(_localctx, 14);
				{
				setState(1385);
				match(NOBYPASSRLS);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 15);
				{
				setState(1386);
				match(CONNECTION);
				setState(1387);
				match(LIMIT);
				setState(1388);
				((Alter_role_optionsContext)_localctx).connlimit = match(INTEGER);
				}
				break;
			case ENCRYPTED:
			case PASSWORD:
				enterOuterAlt(_localctx, 16);
				{
				setState(1390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCRYPTED) {
					{
					setState(1389);
					match(ENCRYPTED);
					}
				}

				setState(1392);
				match(PASSWORD);
				setState(1393);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case VALID:
				enterOuterAlt(_localctx, 17);
				{
				setState(1394);
				match(VALID);
				setState(1395);
				match(UNTIL);
				setState(1396);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_role_stmtContext extends ParserRuleContext {
		public Role_nameContext role;
		public Alter_role_optionsContext options;
		public Name_Context name;
		public Name_Context new_name;
		public Name_Context database_name;
		public IdentifierContext configuration_parameter;
		public Param_valueContext value;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSqlParser.ROLE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public List<Alter_role_optionsContext> alter_role_options() {
			return getRuleContexts(Alter_role_optionsContext.class);
		}
		public Alter_role_optionsContext alter_role_options(int i) {
			return getRuleContext(Alter_role_optionsContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSqlParser.EQUAL, 0); }
		public List<TerminalNode> ALL() { return getTokens(PostgreSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(PostgreSqlParser.ALL, i);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSqlParser.DEFAULT, 0); }
		public TerminalNode IN() { return getToken(PostgreSqlParser.IN, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSqlParser.DATABASE, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSqlParser.CURRENT, 0); }
		public TerminalNode RESET() { return getToken(PostgreSqlParser.RESET, 0); }
		public Alter_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_role_stmt(this);
		}
	}

	public final Alter_role_stmtContext alter_role_stmt() throws RecognitionException {
		Alter_role_stmtContext _localctx = new Alter_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alter_role_stmt);
		int _la;
		try {
			setState(1477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1399);
				match(ALTER);
				setState(1400);
				match(ROLE);
				setState(1401);
				((Alter_role_stmtContext)_localctx).role = role_name();
				setState(1403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1402);
					match(WITH);
					}
				}

				setState(1406); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1405);
					((Alter_role_stmtContext)_localctx).options = alter_role_options();
					}
					}
					setState(1408); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CONNECTION || _la==CREATEDB || _la==ENCRYPTED || _la==NOCREATEDB || _la==PASSWORD || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & 1099243192321L) != 0) );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1410);
				match(ALTER);
				setState(1411);
				match(ROLE);
				setState(1412);
				((Alter_role_stmtContext)_localctx).name = name_();
				setState(1413);
				match(RENAME);
				setState(1414);
				match(TO);
				setState(1415);
				((Alter_role_stmtContext)_localctx).new_name = name_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1417);
				match(ALTER);
				setState(1418);
				match(ROLE);
				setState(1421);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURRENT_USER:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SESSION_USER:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1419);
					((Alter_role_stmtContext)_localctx).role = role_name();
					}
					break;
				case ALL:
					{
					setState(1420);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1423);
					match(IN);
					setState(1424);
					match(DATABASE);
					setState(1425);
					((Alter_role_stmtContext)_localctx).database_name = name_();
					}
				}

				setState(1428);
				match(SET);
				setState(1429);
				((Alter_role_stmtContext)_localctx).configuration_parameter = identifier(0);
				setState(1430);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1433);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FALSE:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case ON:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case YES:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case COLON:
				case NUMERIC_LITERAL:
				case INTEGER_LITERAL:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
				case QMARK:
					{
					setState(1431);
					((Alter_role_stmtContext)_localctx).value = param_value();
					}
					break;
				case DEFAULT:
					{
					setState(1432);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1435);
				match(ALTER);
				setState(1436);
				match(ROLE);
				setState(1439);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURRENT_USER:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SESSION_USER:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1437);
					((Alter_role_stmtContext)_localctx).role = role_name();
					}
					break;
				case ALL:
					{
					setState(1438);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1441);
					match(IN);
					setState(1442);
					match(DATABASE);
					setState(1443);
					((Alter_role_stmtContext)_localctx).database_name = name_();
					}
				}

				setState(1446);
				match(SET);
				setState(1447);
				((Alter_role_stmtContext)_localctx).configuration_parameter = identifier(0);
				setState(1448);
				match(FROM);
				setState(1449);
				match(CURRENT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1451);
				match(ALTER);
				setState(1452);
				match(ROLE);
				setState(1455);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURRENT_USER:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SESSION_USER:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1453);
					((Alter_role_stmtContext)_localctx).role = role_name();
					}
					break;
				case ALL:
					{
					setState(1454);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1457);
					match(IN);
					setState(1458);
					match(DATABASE);
					setState(1459);
					((Alter_role_stmtContext)_localctx).database_name = name_();
					}
				}

				setState(1462);
				match(RESET);
				setState(1463);
				((Alter_role_stmtContext)_localctx).configuration_parameter = identifier(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1464);
				match(ALTER);
				setState(1465);
				match(ROLE);
				setState(1468);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURRENT_USER:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SESSION_USER:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1466);
					((Alter_role_stmtContext)_localctx).role = role_name();
					}
					break;
				case ALL:
					{
					setState(1467);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1470);
					match(IN);
					setState(1471);
					match(DATABASE);
					setState(1472);
					((Alter_role_stmtContext)_localctx).database_name = name_();
					}
				}

				setState(1475);
				match(RESET);
				setState(1476);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_rule_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public IdentifierContext table_name;
		public Name_Context new_name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode RULE() { return getToken(PostgreSqlParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_rule_stmt(this);
		}
	}

	public final Alter_rule_stmtContext alter_rule_stmt() throws RecognitionException {
		Alter_rule_stmtContext _localctx = new Alter_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_rule_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1479);
			match(ALTER);
			setState(1480);
			match(RULE);
			setState(1481);
			((Alter_rule_stmtContext)_localctx).name = name_();
			setState(1482);
			match(ON);
			setState(1483);
			((Alter_rule_stmtContext)_localctx).table_name = identifier(0);
			setState(1484);
			match(RENAME);
			setState(1485);
			match(TO);
			setState(1486);
			((Alter_rule_stmtContext)_localctx).new_name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_schema_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public Alter_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_schema_stmt(this);
		}
	}

	public final Alter_schema_stmtContext alter_schema_stmt() throws RecognitionException {
		Alter_schema_stmtContext _localctx = new Alter_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_schema_stmt);
		try {
			setState(1505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1488);
				match(ALTER);
				setState(1489);
				match(SCHEMA);
				setState(1490);
				((Alter_schema_stmtContext)_localctx).name = identifier(0);
				setState(1491);
				match(RENAME);
				setState(1492);
				match(TO);
				setState(1493);
				((Alter_schema_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1495);
				match(ALTER);
				setState(1496);
				match(SCHEMA);
				setState(1497);
				((Alter_schema_stmtContext)_localctx).name = identifier(0);
				setState(1498);
				match(OWNER);
				setState(1499);
				match(TO);
				setState(1503);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1500);
					((Alter_schema_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1501);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1502);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_sequence_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSqlParser.SEQUENCE, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Alter_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_sequence_stmt(this);
		}
	}

	public final Alter_sequence_stmtContext alter_sequence_stmt() throws RecognitionException {
		Alter_sequence_stmtContext _localctx = new Alter_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1507);
			match(ALTER);
			setState(1508);
			match(SEQUENCE);
			setState(1511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1509);
				match(IF);
				setState(1510);
				match(EXISTS);
				}
			}

			setState(1513);
			((Alter_sequence_stmtContext)_localctx).name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_server_options_listContext extends ParserRuleContext {
		public IdentifierContext option;
		public Param_valueContext value;
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public List<TerminalNode> ADD() { return getTokens(PostgreSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(PostgreSqlParser.ADD, i);
		}
		public List<TerminalNode> SET() { return getTokens(PostgreSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PostgreSqlParser.SET, i);
		}
		public List<TerminalNode> DROP() { return getTokens(PostgreSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(PostgreSqlParser.DROP, i);
		}
		public List<Param_valueContext> param_value() {
			return getRuleContexts(Param_valueContext.class);
		}
		public Param_valueContext param_value(int i) {
			return getRuleContext(Param_valueContext.class,i);
		}
		public Alter_server_options_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_options_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_server_options_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_server_options_list(this);
		}
	}

	public final Alter_server_options_listContext alter_server_options_list() throws RecognitionException {
		Alter_server_options_listContext _localctx = new Alter_server_options_listContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_server_options_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1515);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1518);
			((Alter_server_options_listContext)_localctx).option = identifier(0);
			setState(1520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -2918355150198407171L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7662894626537209859L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 119L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3341677518431191039L) != 0) || _la==QMARK) {
				{
				setState(1519);
				((Alter_server_options_listContext)_localctx).value = param_value();
				}
			}

			}
			setState(1532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1522);
				match(COMMA);
				setState(1524);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(1523);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SET) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1526);
				((Alter_server_options_listContext)_localctx).option = identifier(0);
				setState(1528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -2918355150198407171L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7662894626537209859L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 119L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3341677518431191039L) != 0) || _la==QMARK) {
					{
					setState(1527);
					((Alter_server_options_listContext)_localctx).value = param_value();
					}
				}

				}
				}
				setState(1534);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_server_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Role_nameContext new_owner;
		public Name_Context new_name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSqlParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(PostgreSqlParser.VERSION, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSqlParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Alter_server_options_listContext alter_server_options_list() {
			return getRuleContext(Alter_server_options_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Alter_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_server_stmt(this);
		}
	}

	public final Alter_server_stmtContext alter_server_stmt() throws RecognitionException {
		Alter_server_stmtContext _localctx = new Alter_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alter_server_stmt);
		int _la;
		try {
			setState(1565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1535);
				match(ALTER);
				setState(1536);
				match(SERVER);
				setState(1537);
				((Alter_server_stmtContext)_localctx).name = identifier(0);
				setState(1549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					{
					setState(1538);
					match(VERSION);
					setState(1539);
					match(SINGLEQ_STRING_LITERAL);
					}
					}
					break;
				case 2:
					{
					{
					setState(1542);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VERSION) {
						{
						setState(1540);
						match(VERSION);
						setState(1541);
						match(SINGLEQ_STRING_LITERAL);
						}
					}

					{
					setState(1544);
					match(OPTIONS);
					setState(1545);
					match(OPEN_PAREN);
					setState(1546);
					alter_server_options_list();
					setState(1547);
					match(CLOSE_PAREN);
					}
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1551);
				match(ALTER);
				setState(1552);
				match(SERVER);
				setState(1553);
				((Alter_server_stmtContext)_localctx).name = identifier(0);
				setState(1554);
				match(OWNER);
				setState(1555);
				match(TO);
				setState(1556);
				((Alter_server_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1558);
				match(ALTER);
				setState(1559);
				match(SERVER);
				setState(1560);
				((Alter_server_stmtContext)_localctx).name = identifier(0);
				setState(1561);
				match(RENAME);
				setState(1562);
				match(TO);
				setState(1563);
				((Alter_server_stmtContext)_localctx).new_name = name_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_statistics_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_owner;
		public IdentifierContext new_name;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSqlParser.STATISTICS, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_statistics_stmt(this);
		}
	}

	public final Alter_statistics_stmtContext alter_statistics_stmt() throws RecognitionException {
		Alter_statistics_stmtContext _localctx = new Alter_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_statistics_stmt);
		try {
			setState(1591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1567);
				match(ALTER);
				setState(1568);
				match(STATISTICS);
				setState(1569);
				((Alter_statistics_stmtContext)_localctx).name = identifier(0);
				setState(1570);
				match(OWNER);
				setState(1571);
				match(TO);
				setState(1575);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1572);
					((Alter_statistics_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1573);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1574);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1577);
				match(ALTER);
				setState(1578);
				match(STATISTICS);
				setState(1579);
				((Alter_statistics_stmtContext)_localctx).name = identifier(0);
				setState(1580);
				match(RENAME);
				setState(1581);
				match(TO);
				setState(1582);
				((Alter_statistics_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1584);
				match(ALTER);
				setState(1585);
				match(STATISTICS);
				setState(1586);
				((Alter_statistics_stmtContext)_localctx).name = identifier(0);
				setState(1587);
				match(SET);
				setState(1588);
				match(SCHEMA);
				setState(1589);
				((Alter_statistics_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_subscription_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Param_valueContext conninfo;
		public Name_listContext publication_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSqlParser.SUBSCRIPTION, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSqlParser.CONNECTION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSqlParser.PUBLICATION, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSqlParser.REFRESH, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSqlParser.DISABLE, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public Alter_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_subscription_stmt(this);
		}
	}

	public final Alter_subscription_stmtContext alter_subscription_stmt() throws RecognitionException {
		Alter_subscription_stmtContext _localctx = new Alter_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_subscription_stmt);
		int _la;
		try {
			setState(1656);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1593);
				match(ALTER);
				setState(1594);
				match(SUBSCRIPTION);
				setState(1595);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1596);
				match(CONNECTION);
				setState(1597);
				((Alter_subscription_stmtContext)_localctx).conninfo = param_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1599);
				match(ALTER);
				setState(1600);
				match(SUBSCRIPTION);
				setState(1601);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1602);
				match(SET);
				setState(1603);
				match(PUBLICATION);
				setState(1604);
				((Alter_subscription_stmtContext)_localctx).publication_name = name_list();
				setState(1610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1605);
					match(WITH);
					setState(1606);
					match(OPEN_PAREN);
					setState(1607);
					option_list();
					setState(1608);
					match(CLOSE_PAREN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1612);
				match(ALTER);
				setState(1613);
				match(SUBSCRIPTION);
				setState(1614);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1615);
				match(REFRESH);
				setState(1616);
				match(PUBLICATION);
				setState(1622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1617);
					match(WITH);
					setState(1618);
					match(OPEN_PAREN);
					setState(1619);
					option_list();
					setState(1620);
					match(CLOSE_PAREN);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1624);
				match(ALTER);
				setState(1625);
				match(SUBSCRIPTION);
				setState(1626);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1627);
				match(ENABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1629);
				match(ALTER);
				setState(1630);
				match(SUBSCRIPTION);
				setState(1631);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1632);
				match(DISABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1634);
				match(ALTER);
				setState(1635);
				match(SUBSCRIPTION);
				setState(1636);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1637);
				match(SET);
				setState(1638);
				match(OPEN_PAREN);
				setState(1639);
				option_list();
				setState(1640);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1642);
				match(ALTER);
				setState(1643);
				match(SUBSCRIPTION);
				setState(1644);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1645);
				match(OWNER);
				setState(1646);
				match(TO);
				setState(1647);
				((Alter_subscription_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1649);
				match(ALTER);
				setState(1650);
				match(SUBSCRIPTION);
				setState(1651);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1652);
				match(RENAME);
				setState(1653);
				match(TO);
				setState(1654);
				((Alter_subscription_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_system_stmtContext extends ParserRuleContext {
		public Token param;
		public Param_valueContext value;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSqlParser.SYSTEM, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PostgreSqlParser.IDENTIFIER, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSqlParser.EQUAL, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSqlParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public Alter_system_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_system_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_system_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_system_stmt(this);
		}
	}

	public final Alter_system_stmtContext alter_system_stmt() throws RecognitionException {
		Alter_system_stmtContext _localctx = new Alter_system_stmtContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_system_stmt);
		int _la;
		try {
			setState(1672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1658);
				match(ALTER);
				setState(1659);
				match(SYSTEM);
				setState(1660);
				match(SET);
				setState(1661);
				((Alter_system_stmtContext)_localctx).param = match(IDENTIFIER);
				setState(1662);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1663);
				((Alter_system_stmtContext)_localctx).value = param_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1664);
				match(ALTER);
				setState(1665);
				match(SYSTEM);
				setState(1666);
				match(RESET);
				setState(1667);
				((Alter_system_stmtContext)_localctx).param = match(IDENTIFIER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1668);
				match(ALTER);
				setState(1669);
				match(SYSTEM);
				setState(1670);
				match(RESET);
				setState(1671);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_table_stmt(this);
		}
	}

	public final Alter_table_stmtContext alter_table_stmt() throws RecognitionException {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_table_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1674);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_tablespace_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSqlParser.TABLESPACE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode RESET() { return getToken(PostgreSqlParser.RESET, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public Alter_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_tablespace_stmt(this);
		}
	}

	public final Alter_tablespace_stmtContext alter_tablespace_stmt() throws RecognitionException {
		Alter_tablespace_stmtContext _localctx = new Alter_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_tablespace_stmt);
		try {
			setState(1709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1676);
				match(ALTER);
				setState(1677);
				match(TABLESPACE);
				setState(1678);
				((Alter_tablespace_stmtContext)_localctx).name = identifier(0);
				setState(1679);
				match(RENAME);
				setState(1680);
				match(TO);
				setState(1681);
				((Alter_tablespace_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1683);
				match(ALTER);
				setState(1684);
				match(TABLESPACE);
				setState(1685);
				((Alter_tablespace_stmtContext)_localctx).name = identifier(0);
				setState(1686);
				match(OWNER);
				setState(1687);
				match(TO);
				setState(1691);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1688);
					((Alter_tablespace_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1689);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1690);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1693);
				match(ALTER);
				setState(1694);
				match(TABLESPACE);
				setState(1695);
				((Alter_tablespace_stmtContext)_localctx).name = identifier(0);
				setState(1696);
				match(SET);
				setState(1697);
				match(OPEN_PAREN);
				setState(1698);
				option_list();
				setState(1699);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1701);
				match(ALTER);
				setState(1702);
				match(TABLESPACE);
				setState(1703);
				((Alter_tablespace_stmtContext)_localctx).name = identifier(0);
				setState(1704);
				match(RESET);
				setState(1705);
				match(OPEN_PAREN);
				setState(1706);
				identifier_list();
				setState(1707);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_text_search_config_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Identifier_listContext token_types;
		public Identifier_listContext dictionary_names;
		public IdentifierContext old_dictionary;
		public IdentifierContext new_dictionary;
		public IdentifierContext new_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_schema;
		public List<TerminalNode> ALTER() { return getTokens(PostgreSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(PostgreSqlParser.ALTER, i);
		}
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSqlParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSqlParser.CONFIGURATION, 0); }
		public TerminalNode ADD() { return getToken(PostgreSqlParser.ADD, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<Identifier_listContext> identifier_list() {
			return getRuleContexts(Identifier_listContext.class);
		}
		public Identifier_listContext identifier_list(int i) {
			return getRuleContext(Identifier_listContext.class,i);
		}
		public TerminalNode REPLACE() { return getToken(PostgreSqlParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_text_search_config_stmt(this);
		}
	}

	public final Alter_text_search_config_stmtContext alter_text_search_config_stmt() throws RecognitionException {
		Alter_text_search_config_stmtContext _localctx = new Alter_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_text_search_config_stmt);
		int _la;
		try {
			setState(1802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1711);
				match(ALTER);
				setState(1712);
				match(TEXT);
				setState(1713);
				match(SEARCH);
				setState(1714);
				match(CONFIGURATION);
				setState(1715);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1716);
				match(ADD);
				setState(1717);
				match(MAPPING);
				setState(1718);
				match(FOR);
				setState(1719);
				((Alter_text_search_config_stmtContext)_localctx).token_types = identifier_list();
				setState(1720);
				match(WITH);
				setState(1721);
				((Alter_text_search_config_stmtContext)_localctx).dictionary_names = identifier_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1723);
				match(ALTER);
				setState(1724);
				match(TEXT);
				setState(1725);
				match(SEARCH);
				setState(1726);
				match(CONFIGURATION);
				setState(1727);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1728);
				match(ALTER);
				setState(1729);
				match(MAPPING);
				setState(1730);
				match(FOR);
				setState(1731);
				((Alter_text_search_config_stmtContext)_localctx).token_types = identifier_list();
				setState(1732);
				match(WITH);
				setState(1733);
				((Alter_text_search_config_stmtContext)_localctx).dictionary_names = identifier_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1735);
				match(ALTER);
				setState(1736);
				match(TEXT);
				setState(1737);
				match(SEARCH);
				setState(1738);
				match(CONFIGURATION);
				setState(1739);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1740);
				match(ALTER);
				setState(1741);
				match(MAPPING);
				setState(1742);
				match(REPLACE);
				setState(1743);
				((Alter_text_search_config_stmtContext)_localctx).old_dictionary = identifier(0);
				setState(1744);
				match(WITH);
				setState(1745);
				((Alter_text_search_config_stmtContext)_localctx).new_dictionary = identifier(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1747);
				match(ALTER);
				setState(1748);
				match(TEXT);
				setState(1749);
				match(SEARCH);
				setState(1750);
				match(CONFIGURATION);
				setState(1751);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1752);
				match(ALTER);
				setState(1753);
				match(MAPPING);
				setState(1754);
				match(FOR);
				setState(1755);
				((Alter_text_search_config_stmtContext)_localctx).token_types = identifier_list();
				setState(1756);
				match(REPLACE);
				setState(1757);
				((Alter_text_search_config_stmtContext)_localctx).old_dictionary = identifier(0);
				setState(1758);
				match(WITH);
				setState(1759);
				((Alter_text_search_config_stmtContext)_localctx).new_dictionary = identifier(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1761);
				match(ALTER);
				setState(1762);
				match(TEXT);
				setState(1763);
				match(SEARCH);
				setState(1764);
				match(CONFIGURATION);
				setState(1765);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1766);
				match(DROP);
				setState(1767);
				match(MAPPING);
				setState(1770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1768);
					match(IF);
					setState(1769);
					match(EXISTS);
					}
				}

				setState(1772);
				match(FOR);
				setState(1773);
				((Alter_text_search_config_stmtContext)_localctx).token_types = identifier_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1775);
				match(ALTER);
				setState(1776);
				match(TEXT);
				setState(1777);
				match(SEARCH);
				setState(1778);
				match(CONFIGURATION);
				setState(1779);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1780);
				match(RENAME);
				setState(1781);
				match(TO);
				setState(1782);
				((Alter_text_search_config_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1784);
				match(ALTER);
				setState(1785);
				match(TEXT);
				setState(1786);
				match(SEARCH);
				setState(1787);
				match(CONFIGURATION);
				setState(1788);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1789);
				match(OWNER);
				setState(1790);
				match(TO);
				setState(1791);
				((Alter_text_search_config_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1793);
				match(ALTER);
				setState(1794);
				match(TEXT);
				setState(1795);
				match(SEARCH);
				setState(1796);
				match(CONFIGURATION);
				setState(1797);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1798);
				match(SET);
				setState(1799);
				match(SCHEMA);
				setState(1800);
				((Alter_text_search_config_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_text_search_dict_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_text_search_dict_stmt(this);
		}
	}

	public final Alter_text_search_dict_stmtContext alter_text_search_dict_stmt() throws RecognitionException {
		Alter_text_search_dict_stmtContext _localctx = new Alter_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_text_search_dict_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1804);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_text_search_parser_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_text_search_parser_stmt(this);
		}
	}

	public final Alter_text_search_parser_stmtContext alter_text_search_parser_stmt() throws RecognitionException {
		Alter_text_search_parser_stmtContext _localctx = new Alter_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_text_search_parser_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1806);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_text_search_template_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSqlParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSqlParser.TEMPLATE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Alter_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_text_search_template_stmt(this);
		}
	}

	public final Alter_text_search_template_stmtContext alter_text_search_template_stmt() throws RecognitionException {
		Alter_text_search_template_stmtContext _localctx = new Alter_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_alter_text_search_template_stmt);
		try {
			setState(1826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1808);
				match(ALTER);
				setState(1809);
				match(TEXT);
				setState(1810);
				match(SEARCH);
				setState(1811);
				match(TEMPLATE);
				setState(1812);
				((Alter_text_search_template_stmtContext)_localctx).name = identifier(0);
				setState(1813);
				match(RENAME);
				setState(1814);
				match(TO);
				setState(1815);
				((Alter_text_search_template_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1817);
				match(ALTER);
				setState(1818);
				match(TEXT);
				setState(1819);
				match(SEARCH);
				setState(1820);
				match(TEMPLATE);
				setState(1821);
				((Alter_text_search_template_stmtContext)_localctx).name = identifier(0);
				setState(1822);
				match(SET);
				setState(1823);
				match(SCHEMA);
				setState(1824);
				((Alter_text_search_template_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public IdentifierContext new_name;
		public IdentifierContext extension_name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSqlParser.TRIGGER, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSqlParser.ON, i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSqlParser.DEPENDS, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSqlParser.EXTENSION, 0); }
		public Alter_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_trigger_stmt(this);
		}
	}

	public final Alter_trigger_stmtContext alter_trigger_stmt() throws RecognitionException {
		Alter_trigger_stmtContext _localctx = new Alter_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_trigger_stmt);
		try {
			setState(1847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1828);
				match(ALTER);
				setState(1829);
				match(TRIGGER);
				setState(1830);
				((Alter_trigger_stmtContext)_localctx).name = identifier(0);
				setState(1831);
				match(ON);
				setState(1832);
				((Alter_trigger_stmtContext)_localctx).table_name = identifier(0);
				setState(1833);
				match(RENAME);
				setState(1834);
				match(TO);
				setState(1835);
				((Alter_trigger_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1837);
				match(ALTER);
				setState(1838);
				match(TRIGGER);
				setState(1839);
				((Alter_trigger_stmtContext)_localctx).name = identifier(0);
				setState(1840);
				match(ON);
				setState(1841);
				((Alter_trigger_stmtContext)_localctx).table_name = identifier(0);
				setState(1842);
				match(DEPENDS);
				setState(1843);
				match(ON);
				setState(1844);
				match(EXTENSION);
				setState(1845);
				((Alter_trigger_stmtContext)_localctx).extension_name = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_type_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_type_stmt(this);
		}
	}

	public final Alter_type_stmtContext alter_type_stmt() throws RecognitionException {
		Alter_type_stmtContext _localctx = new Alter_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_type_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1849);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_user_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_user_stmt(this);
		}
	}

	public final Alter_user_stmtContext alter_user_stmt() throws RecognitionException {
		Alter_user_stmtContext _localctx = new Alter_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_alter_user_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1851);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_user_mapping_stmtContext extends ParserRuleContext {
		public Role_nameContext user;
		public IdentifierContext server_name;
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSqlParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSqlParser.SERVER, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSqlParser.OPTIONS, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Alter_server_options_listContext alter_server_options_list() {
			return getRuleContext(Alter_server_options_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Alter_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_user_mapping_stmt(this);
		}
	}

	public final Alter_user_mapping_stmtContext alter_user_mapping_stmt() throws RecognitionException {
		Alter_user_mapping_stmtContext _localctx = new Alter_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_user_mapping_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1853);
			match(ALTER);
			setState(1854);
			match(USER);
			setState(1855);
			match(MAPPING);
			setState(1856);
			match(FOR);
			setState(1857);
			((Alter_user_mapping_stmtContext)_localctx).user = role_name();
			setState(1858);
			match(SERVER);
			setState(1859);
			((Alter_user_mapping_stmtContext)_localctx).server_name = identifier(0);
			setState(1860);
			match(OPTIONS);
			{
			setState(1861);
			match(OPEN_PAREN);
			setState(1862);
			alter_server_options_list();
			setState(1863);
			match(CLOSE_PAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlter_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlter_view_stmt(this);
		}
	}

	public final Alter_view_stmtContext alter_view_stmt() throws RecognitionException {
		Alter_view_stmtContext _localctx = new Alter_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1865);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Analyze_stmtContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSqlParser.ANALYZE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSqlParser.VERBOSE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAnalyze_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAnalyze_stmt(this);
		}
	}

	public final Analyze_stmtContext analyze_stmt() throws RecognitionException {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_analyze_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1867);
			match(ANALYZE);
			setState(1869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERBOSE) {
				{
				setState(1868);
				match(VERBOSE);
				}
			}

			setState(1871);
			table_name_();
			setState(1876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(1872);
				match(OPEN_PAREN);
				setState(1873);
				name_list();
				setState(1874);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Close_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Close_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterClose_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitClose_stmt(this);
		}
	}

	public final Close_stmtContext close_stmt() throws RecognitionException {
		Close_stmtContext _localctx = new Close_stmtContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_close_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1878);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cluster_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Cluster_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCluster_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCluster_stmt(this);
		}
	}

	public final Cluster_stmtContext cluster_stmt() throws RecognitionException {
		Cluster_stmtContext _localctx = new Cluster_stmtContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_cluster_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1880);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Comment_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterComment_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitComment_stmt(this);
		}
	}

	public final Comment_stmtContext comment_stmt() throws RecognitionException {
		Comment_stmtContext _localctx = new Comment_stmtContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_comment_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1882);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Commit_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Commit_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCommit_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCommit_stmt(this);
		}
	}

	public final Commit_stmtContext commit_stmt() throws RecognitionException {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_commit_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1884);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Commit_prepared_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Commit_prepared_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_prepared_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCommit_prepared_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCommit_prepared_stmt(this);
		}
	}

	public final Commit_prepared_stmtContext commit_prepared_stmt() throws RecognitionException {
		Commit_prepared_stmtContext _localctx = new Commit_prepared_stmtContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_commit_prepared_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1886);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Copy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCopy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCopy_stmt(this);
		}
	}

	public final Copy_stmtContext copy_stmt() throws RecognitionException {
		Copy_stmtContext _localctx = new Copy_stmtContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_copy_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1888);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_stmtContext extends ParserRuleContext {
		public Create_access_method_stmtContext create_access_method_stmt() {
			return getRuleContext(Create_access_method_stmtContext.class,0);
		}
		public Create_aggregate_stmtContext create_aggregate_stmt() {
			return getRuleContext(Create_aggregate_stmtContext.class,0);
		}
		public Create_cast_stmtContext create_cast_stmt() {
			return getRuleContext(Create_cast_stmtContext.class,0);
		}
		public Create_collation_stmtContext create_collation_stmt() {
			return getRuleContext(Create_collation_stmtContext.class,0);
		}
		public Create_conversion_stmtContext create_conversion_stmt() {
			return getRuleContext(Create_conversion_stmtContext.class,0);
		}
		public Create_database_stmtContext create_database_stmt() {
			return getRuleContext(Create_database_stmtContext.class,0);
		}
		public Create_domain_stmtContext create_domain_stmt() {
			return getRuleContext(Create_domain_stmtContext.class,0);
		}
		public Create_event_trigger_stmtContext create_event_trigger_stmt() {
			return getRuleContext(Create_event_trigger_stmtContext.class,0);
		}
		public Create_foreign_data_stmtContext create_foreign_data_stmt() {
			return getRuleContext(Create_foreign_data_stmtContext.class,0);
		}
		public Create_foreign_table_stmtContext create_foreign_table_stmt() {
			return getRuleContext(Create_foreign_table_stmtContext.class,0);
		}
		public Create_function_stmtContext create_function_stmt() {
			return getRuleContext(Create_function_stmtContext.class,0);
		}
		public Create_group_stmtContext create_group_stmt() {
			return getRuleContext(Create_group_stmtContext.class,0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return getRuleContext(Create_index_stmtContext.class,0);
		}
		public Create_language_stmtContext create_language_stmt() {
			return getRuleContext(Create_language_stmtContext.class,0);
		}
		public Create_materialized_view_stmtContext create_materialized_view_stmt() {
			return getRuleContext(Create_materialized_view_stmtContext.class,0);
		}
		public Create_operator_stmtContext create_operator_stmt() {
			return getRuleContext(Create_operator_stmtContext.class,0);
		}
		public Create_operator_class_stmtContext create_operator_class_stmt() {
			return getRuleContext(Create_operator_class_stmtContext.class,0);
		}
		public Create_operator_family_stmtContext create_operator_family_stmt() {
			return getRuleContext(Create_operator_family_stmtContext.class,0);
		}
		public Create_policy_stmtContext create_policy_stmt() {
			return getRuleContext(Create_policy_stmtContext.class,0);
		}
		public Create_role_stmtContext create_role_stmt() {
			return getRuleContext(Create_role_stmtContext.class,0);
		}
		public Create_rule_stmtContext create_rule_stmt() {
			return getRuleContext(Create_rule_stmtContext.class,0);
		}
		public Create_schema_stmtContext create_schema_stmt() {
			return getRuleContext(Create_schema_stmtContext.class,0);
		}
		public Create_sequence_stmtContext create_sequence_stmt() {
			return getRuleContext(Create_sequence_stmtContext.class,0);
		}
		public Create_server_stmtContext create_server_stmt() {
			return getRuleContext(Create_server_stmtContext.class,0);
		}
		public Create_statistics_stmtContext create_statistics_stmt() {
			return getRuleContext(Create_statistics_stmtContext.class,0);
		}
		public Create_subscription_stmtContext create_subscription_stmt() {
			return getRuleContext(Create_subscription_stmtContext.class,0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return getRuleContext(Create_table_stmtContext.class,0);
		}
		public Create_table_as_stmtContext create_table_as_stmt() {
			return getRuleContext(Create_table_as_stmtContext.class,0);
		}
		public Create_tablespace_stmtContext create_tablespace_stmt() {
			return getRuleContext(Create_tablespace_stmtContext.class,0);
		}
		public Create_text_search_config_stmtContext create_text_search_config_stmt() {
			return getRuleContext(Create_text_search_config_stmtContext.class,0);
		}
		public Create_text_search_dict_stmtContext create_text_search_dict_stmt() {
			return getRuleContext(Create_text_search_dict_stmtContext.class,0);
		}
		public Create_text_search_parser_stmtContext create_text_search_parser_stmt() {
			return getRuleContext(Create_text_search_parser_stmtContext.class,0);
		}
		public Create_text_search_template_stmtContext create_text_search_template_stmt() {
			return getRuleContext(Create_text_search_template_stmtContext.class,0);
		}
		public Create_transform_stmtContext create_transform_stmt() {
			return getRuleContext(Create_transform_stmtContext.class,0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return getRuleContext(Create_trigger_stmtContext.class,0);
		}
		public Create_type_stmtContext create_type_stmt() {
			return getRuleContext(Create_type_stmtContext.class,0);
		}
		public Create_user_stmtContext create_user_stmt() {
			return getRuleContext(Create_user_stmtContext.class,0);
		}
		public Create_user_mapping_stmtContext create_user_mapping_stmt() {
			return getRuleContext(Create_user_mapping_stmtContext.class,0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return getRuleContext(Create_view_stmtContext.class,0);
		}
		public Create_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_stmt(this);
		}
	}

	public final Create_stmtContext create_stmt() throws RecognitionException {
		Create_stmtContext _localctx = new Create_stmtContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_create_stmt);
		try {
			setState(1929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1890);
				create_access_method_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1891);
				create_aggregate_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1892);
				create_cast_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1893);
				create_collation_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1894);
				create_conversion_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1895);
				create_database_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1896);
				create_domain_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1897);
				create_event_trigger_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1898);
				create_foreign_data_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1899);
				create_foreign_table_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1900);
				create_function_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1901);
				create_group_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1902);
				create_index_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1903);
				create_language_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1904);
				create_materialized_view_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1905);
				create_operator_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1906);
				create_operator_class_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1907);
				create_operator_family_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1908);
				create_policy_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1909);
				create_role_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1910);
				create_rule_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1911);
				create_schema_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1912);
				create_sequence_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1913);
				create_server_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1914);
				create_statistics_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1915);
				create_subscription_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1916);
				create_table_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1917);
				create_table_as_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1918);
				create_tablespace_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1919);
				create_text_search_config_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1920);
				create_text_search_dict_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1921);
				create_text_search_parser_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1922);
				create_text_search_template_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1923);
				create_transform_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1924);
				create_trigger_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1925);
				create_type_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1926);
				create_user_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1927);
				create_user_mapping_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1928);
				create_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_access_method_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSqlParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSqlParser.METHOD, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode TYPE() { return getToken(PostgreSqlParser.TYPE, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSqlParser.INDEX, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSqlParser.HANDLER, 0); }
		public Create_access_method_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_access_method_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_access_method_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_access_method_stmt(this);
		}
	}

	public final Create_access_method_stmtContext create_access_method_stmt() throws RecognitionException {
		Create_access_method_stmtContext _localctx = new Create_access_method_stmtContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_access_method_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1931);
			match(CREATE);
			setState(1932);
			match(ACCESS);
			setState(1933);
			match(METHOD);
			setState(1934);
			name_();
			setState(1935);
			match(TYPE);
			setState(1936);
			match(INDEX);
			setState(1937);
			match(HANDLER);
			setState(1938);
			name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_aggregate_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSqlParser.AGGREGATE, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<Data_type_listContext> data_type_list() {
			return getRuleContexts(Data_type_listContext.class);
		}
		public Data_type_listContext data_type_list(int i) {
			return getRuleContext(Data_type_listContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode SFUNC() { return getToken(PostgreSqlParser.SFUNC, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSqlParser.EQUAL, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public TerminalNode STYPE() { return getToken(PostgreSqlParser.STYPE, 0); }
		public TerminalNode SSPACE() { return getToken(PostgreSqlParser.SSPACE, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSqlParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSqlParser.INTEGER_LITERAL, i);
		}
		public TerminalNode FINALFUNC() { return getToken(PostgreSqlParser.FINALFUNC, 0); }
		public TerminalNode FINALFUNC_EXTRA() { return getToken(PostgreSqlParser.FINALFUNC_EXTRA, 0); }
		public TerminalNode COMBINEFUNC() { return getToken(PostgreSqlParser.COMBINEFUNC, 0); }
		public TerminalNode SERIALFUNC() { return getToken(PostgreSqlParser.SERIALFUNC, 0); }
		public TerminalNode DESERIALFUNC() { return getToken(PostgreSqlParser.DESERIALFUNC, 0); }
		public TerminalNode INITCOND() { return getToken(PostgreSqlParser.INITCOND, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode MSFUNC() { return getToken(PostgreSqlParser.MSFUNC, 0); }
		public TerminalNode MINVFUNC() { return getToken(PostgreSqlParser.MINVFUNC, 0); }
		public TerminalNode MSTYPE() { return getToken(PostgreSqlParser.MSTYPE, 0); }
		public TerminalNode MSSPACE() { return getToken(PostgreSqlParser.MSSPACE, 0); }
		public TerminalNode MFINALFUNC() { return getToken(PostgreSqlParser.MFINALFUNC, 0); }
		public TerminalNode MFINALFUNC_EXTRA() { return getToken(PostgreSqlParser.MFINALFUNC_EXTRA, 0); }
		public TerminalNode MINITCOND() { return getToken(PostgreSqlParser.MINITCOND, 0); }
		public TerminalNode SORTOP() { return getToken(PostgreSqlParser.SORTOP, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSqlParser.PARALLEL, 0); }
		public List<TerminalNode> IN() { return getTokens(PostgreSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSqlParser.IN, i);
		}
		public List<TerminalNode> VARIADIC() { return getTokens(PostgreSqlParser.VARIADIC); }
		public TerminalNode VARIADIC(int i) {
			return getToken(PostgreSqlParser.VARIADIC, i);
		}
		public TerminalNode SAFE() { return getToken(PostgreSqlParser.SAFE, 0); }
		public TerminalNode RESTRICTED() { return getToken(PostgreSqlParser.RESTRICTED, 0); }
		public TerminalNode UNSAFE() { return getToken(PostgreSqlParser.UNSAFE, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public TerminalNode HYPOTHETICAL() { return getToken(PostgreSqlParser.HYPOTHETICAL, 0); }
		public TerminalNode BASETYPE() { return getToken(PostgreSqlParser.BASETYPE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Create_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_aggregate_stmt(this);
		}
	}

	public final Create_aggregate_stmtContext create_aggregate_stmt() throws RecognitionException {
		Create_aggregate_stmtContext _localctx = new Create_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_create_aggregate_stmt);
		int _la;
		try {
			setState(2222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1940);
				match(CREATE);
				setState(1941);
				match(AGGREGATE);
				setState(1942);
				name_();
				setState(1943);
				match(OPEN_PAREN);
				setState(1945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(1944);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1948);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(1947);
					name_();
					}
					break;
				}
				setState(1950);
				data_type_list();
				setState(1951);
				match(CLOSE_PAREN);
				setState(1952);
				match(OPEN_PAREN);
				setState(1953);
				match(SFUNC);
				setState(1954);
				match(EQUAL);
				setState(1955);
				identifier(0);
				setState(1956);
				match(COMMA);
				setState(1957);
				match(STYPE);
				setState(1958);
				match(EQUAL);
				setState(1959);
				identifier(0);
				setState(1964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					setState(1960);
					match(COMMA);
					setState(1961);
					match(SSPACE);
					setState(1962);
					match(EQUAL);
					setState(1963);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(1970);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(1966);
					match(COMMA);
					setState(1967);
					match(FINALFUNC);
					setState(1968);
					match(EQUAL);
					setState(1969);
					identifier(0);
					}
					break;
				}
				setState(1974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1972);
					match(COMMA);
					setState(1973);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(1980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					setState(1976);
					match(COMMA);
					setState(1977);
					match(COMBINEFUNC);
					setState(1978);
					match(EQUAL);
					setState(1979);
					identifier(0);
					}
					break;
				}
				setState(1986);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					setState(1982);
					match(COMMA);
					setState(1983);
					match(SERIALFUNC);
					setState(1984);
					match(EQUAL);
					setState(1985);
					identifier(0);
					}
					break;
				}
				setState(1992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
				case 1:
					{
					setState(1988);
					match(COMMA);
					setState(1989);
					match(DESERIALFUNC);
					setState(1990);
					match(EQUAL);
					setState(1991);
					identifier(0);
					}
					break;
				}
				setState(1998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					setState(1994);
					match(COMMA);
					setState(1995);
					match(INITCOND);
					setState(1996);
					match(EQUAL);
					setState(1997);
					expr(0);
					}
					break;
				}
				setState(2004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(2000);
					match(COMMA);
					setState(2001);
					match(MSFUNC);
					setState(2002);
					match(EQUAL);
					setState(2003);
					identifier(0);
					}
					break;
				}
				setState(2010);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					setState(2006);
					match(COMMA);
					setState(2007);
					match(MINVFUNC);
					setState(2008);
					match(EQUAL);
					setState(2009);
					identifier(0);
					}
					break;
				}
				setState(2016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(2012);
					match(COMMA);
					setState(2013);
					match(MSTYPE);
					setState(2014);
					match(EQUAL);
					setState(2015);
					identifier(0);
					}
					break;
				}
				setState(2022);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(2018);
					match(COMMA);
					setState(2019);
					match(MSSPACE);
					setState(2020);
					match(EQUAL);
					setState(2021);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(2028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(2024);
					match(COMMA);
					setState(2025);
					match(MFINALFUNC);
					setState(2026);
					match(EQUAL);
					setState(2027);
					identifier(0);
					}
					break;
				}
				setState(2032);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					setState(2030);
					match(COMMA);
					setState(2031);
					match(MFINALFUNC_EXTRA);
					}
					break;
				}
				setState(2038);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(2034);
					match(COMMA);
					setState(2035);
					match(MINITCOND);
					setState(2036);
					match(EQUAL);
					setState(2037);
					identifier(0);
					}
					break;
				}
				setState(2044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					setState(2040);
					match(COMMA);
					setState(2041);
					match(SORTOP);
					setState(2042);
					match(EQUAL);
					setState(2043);
					identifier(0);
					}
					break;
				}
				setState(2050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2046);
					match(COMMA);
					setState(2047);
					match(PARALLEL);
					setState(2048);
					match(EQUAL);
					setState(2049);
					_la = _input.LA(1);
					if ( !(((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & 7L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2052);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2054);
				match(CREATE);
				setState(2055);
				match(AGGREGATE);
				setState(2056);
				name_();
				setState(2057);
				match(OPEN_PAREN);
				setState(2065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513601L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7658391026909839363L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3314651522620456959L) != 0)) {
					{
					setState(2059);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IN || _la==VARIADIC) {
						{
						setState(2058);
						_la = _input.LA(1);
						if ( !(_la==IN || _la==VARIADIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2062);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
					case 1:
						{
						setState(2061);
						name_();
						}
						break;
					}
					setState(2064);
					data_type_list();
					}
				}

				setState(2067);
				match(ORDER);
				setState(2068);
				match(BY);
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(2069);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2073);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(2072);
					name_();
					}
					break;
				}
				setState(2075);
				data_type_list();
				setState(2076);
				match(CLOSE_PAREN);
				setState(2077);
				match(OPEN_PAREN);
				setState(2078);
				match(SFUNC);
				setState(2079);
				match(EQUAL);
				setState(2080);
				identifier(0);
				setState(2081);
				match(COMMA);
				setState(2082);
				match(STYPE);
				setState(2083);
				match(EQUAL);
				setState(2084);
				identifier(0);
				setState(2089);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					setState(2085);
					match(COMMA);
					setState(2086);
					match(SSPACE);
					setState(2087);
					match(EQUAL);
					setState(2088);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(2095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(2091);
					match(COMMA);
					setState(2092);
					match(FINALFUNC);
					setState(2093);
					match(EQUAL);
					setState(2094);
					identifier(0);
					}
					break;
				}
				setState(2099);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(2097);
					match(COMMA);
					setState(2098);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(2105);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(2101);
					match(COMMA);
					setState(2102);
					match(INITCOND);
					setState(2103);
					match(EQUAL);
					setState(2104);
					expr(0);
					}
					break;
				}
				setState(2111);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					setState(2107);
					match(COMMA);
					setState(2108);
					match(PARALLEL);
					setState(2109);
					match(EQUAL);
					setState(2110);
					_la = _input.LA(1);
					if ( !(((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & 7L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2113);
					match(COMMA);
					setState(2114);
					match(HYPOTHETICAL);
					}
				}

				setState(2117);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(2119);
				match(CREATE);
				setState(2120);
				match(AGGREGATE);
				setState(2121);
				name_();
				setState(2122);
				match(OPEN_PAREN);
				setState(2123);
				match(BASETYPE);
				setState(2124);
				match(EQUAL);
				setState(2125);
				data_type();
				setState(2126);
				match(COMMA);
				setState(2127);
				match(SFUNC);
				setState(2128);
				match(EQUAL);
				setState(2129);
				identifier(0);
				setState(2130);
				match(COMMA);
				setState(2131);
				match(STYPE);
				setState(2132);
				match(EQUAL);
				setState(2133);
				identifier(0);
				setState(2138);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(2134);
					match(COMMA);
					setState(2135);
					match(SSPACE);
					setState(2136);
					match(EQUAL);
					setState(2137);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(2144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(2140);
					match(COMMA);
					setState(2141);
					match(FINALFUNC);
					setState(2142);
					match(EQUAL);
					setState(2143);
					identifier(0);
					}
					break;
				}
				setState(2148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					setState(2146);
					match(COMMA);
					setState(2147);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(2154);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(2150);
					match(COMMA);
					setState(2151);
					match(COMBINEFUNC);
					setState(2152);
					match(EQUAL);
					setState(2153);
					identifier(0);
					}
					break;
				}
				setState(2160);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(2156);
					match(COMMA);
					setState(2157);
					match(SERIALFUNC);
					setState(2158);
					match(EQUAL);
					setState(2159);
					identifier(0);
					}
					break;
				}
				setState(2166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(2162);
					match(COMMA);
					setState(2163);
					match(DESERIALFUNC);
					setState(2164);
					match(EQUAL);
					setState(2165);
					identifier(0);
					}
					break;
				}
				setState(2172);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					setState(2168);
					match(COMMA);
					setState(2169);
					match(INITCOND);
					setState(2170);
					match(EQUAL);
					setState(2171);
					expr(0);
					}
					break;
				}
				setState(2178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(2174);
					match(COMMA);
					setState(2175);
					match(MSFUNC);
					setState(2176);
					match(EQUAL);
					setState(2177);
					identifier(0);
					}
					break;
				}
				setState(2184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					setState(2180);
					match(COMMA);
					setState(2181);
					match(MINVFUNC);
					setState(2182);
					match(EQUAL);
					setState(2183);
					identifier(0);
					}
					break;
				}
				setState(2190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(2186);
					match(COMMA);
					setState(2187);
					match(MSTYPE);
					setState(2188);
					match(EQUAL);
					setState(2189);
					identifier(0);
					}
					break;
				}
				setState(2196);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					setState(2192);
					match(COMMA);
					setState(2193);
					match(MSSPACE);
					setState(2194);
					match(EQUAL);
					setState(2195);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(2202);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(2198);
					match(COMMA);
					setState(2199);
					match(MFINALFUNC);
					setState(2200);
					match(EQUAL);
					setState(2201);
					identifier(0);
					}
					break;
				}
				setState(2206);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(2204);
					match(COMMA);
					setState(2205);
					match(MFINALFUNC_EXTRA);
					}
					break;
				}
				setState(2212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(2208);
					match(COMMA);
					setState(2209);
					match(MINITCOND);
					setState(2210);
					match(EQUAL);
					setState(2211);
					identifier(0);
					}
					break;
				}
				setState(2218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2214);
					match(COMMA);
					setState(2215);
					match(SORTOP);
					setState(2216);
					match(EQUAL);
					setState(2217);
					identifier(0);
					}
				}

				setState(2220);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_cast_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSqlParser.CAST, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PostgreSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PostgreSqlParser.AS, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSqlParser.ASSIGNMENT, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSqlParser.IMPLICIT, 0); }
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSqlParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSqlParser.INOUT, 0); }
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public Create_cast_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cast_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_cast_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_cast_stmt(this);
		}
	}

	public final Create_cast_stmtContext create_cast_stmt() throws RecognitionException {
		Create_cast_stmtContext _localctx = new Create_cast_stmtContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_create_cast_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			match(CREATE);
			setState(2225);
			match(CAST);
			setState(2226);
			match(OPEN_PAREN);
			setState(2227);
			data_type();
			setState(2228);
			match(AS);
			setState(2229);
			data_type();
			setState(2230);
			match(CLOSE_PAREN);
			setState(2244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				{
				setState(2231);
				match(WITH);
				setState(2232);
				match(FUNCTION);
				setState(2233);
				identifier(0);
				setState(2238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2234);
					match(OPEN_PAREN);
					setState(2235);
					data_type_list();
					setState(2236);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(2240);
				match(WITHOUT);
				setState(2241);
				match(FUNCTION);
				}
				}
				break;
			case 3:
				{
				{
				setState(2242);
				match(WITH);
				setState(2243);
				match(INOUT);
				}
				}
				break;
			}
			setState(2250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2246);
				match(AS);
				setState(2247);
				match(ASSIGNMENT);
				}
				break;
			case 2:
				{
				setState(2248);
				match(AS);
				setState(2249);
				match(IMPLICIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_collation_optContext extends ParserRuleContext {
		public TerminalNode LOCALE() { return getToken(PostgreSqlParser.LOCALE, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSqlParser.EQUAL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LC_COLLATE() { return getToken(PostgreSqlParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(PostgreSqlParser.LC_CTYPE, 0); }
		public TerminalNode PROVIDER() { return getToken(PostgreSqlParser.PROVIDER, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSqlParser.VERSION, 0); }
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.DOUBLEQ_STRING_LITERAL, 0); }
		public Create_collation_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_collation_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_collation_opt(this);
		}
	}

	public final Create_collation_optContext create_collation_opt() throws RecognitionException {
		Create_collation_optContext _localctx = new Create_collation_optContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_create_collation_opt);
		try {
			setState(2270);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCALE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2252);
				match(LOCALE);
				setState(2253);
				match(EQUAL);
				setState(2254);
				expr(0);
				}
				break;
			case LC_COLLATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2255);
				match(LC_COLLATE);
				setState(2256);
				match(EQUAL);
				setState(2257);
				expr(0);
				}
				break;
			case LC_CTYPE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2258);
				match(LC_CTYPE);
				setState(2259);
				match(EQUAL);
				setState(2260);
				expr(0);
				}
				break;
			case PROVIDER:
				enterOuterAlt(_localctx, 4);
				{
				setState(2261);
				match(PROVIDER);
				setState(2262);
				match(EQUAL);
				setState(2263);
				expr(0);
				}
				break;
			case VERSION:
				enterOuterAlt(_localctx, 5);
				{
				setState(2264);
				match(VERSION);
				setState(2265);
				match(EQUAL);
				setState(2266);
				expr(0);
				}
				break;
			case DOUBLEQ_STRING_LITERAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2267);
				match(DOUBLEQ_STRING_LITERAL);
				setState(2268);
				match(EQUAL);
				setState(2269);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_collation_opt_listContext extends ParserRuleContext {
		public List<Create_collation_optContext> create_collation_opt() {
			return getRuleContexts(Create_collation_optContext.class);
		}
		public Create_collation_optContext create_collation_opt(int i) {
			return getRuleContext(Create_collation_optContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Create_collation_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_collation_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_collation_opt_list(this);
		}
	}

	public final Create_collation_opt_listContext create_collation_opt_list() throws RecognitionException {
		Create_collation_opt_listContext _localctx = new Create_collation_opt_listContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_create_collation_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2272);
			create_collation_opt();
			setState(2277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2273);
				match(COMMA);
				setState(2274);
				create_collation_opt();
				}
				}
				setState(2279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_collation_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSqlParser.COLLATION, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Create_collation_opt_listContext create_collation_opt_list() {
			return getRuleContext(Create_collation_opt_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public Create_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_collation_stmt(this);
		}
	}

	public final Create_collation_stmtContext create_collation_stmt() throws RecognitionException {
		Create_collation_stmtContext _localctx = new Create_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_create_collation_stmt);
		int _la;
		try {
			setState(2303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2280);
				match(CREATE);
				setState(2281);
				match(COLLATION);
				setState(2285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2282);
					match(IF);
					setState(2283);
					match(NOT);
					setState(2284);
					match(EXISTS);
					}
				}

				setState(2287);
				name_();
				setState(2288);
				match(OPEN_PAREN);
				setState(2289);
				create_collation_opt_list();
				setState(2290);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2292);
				match(CREATE);
				setState(2293);
				match(COLLATION);
				setState(2297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2294);
					match(IF);
					setState(2295);
					match(NOT);
					setState(2296);
					match(EXISTS);
					}
				}

				setState(2299);
				name_();
				setState(2300);
				match(FROM);
				setState(2301);
				name_();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_conversion_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSqlParser.CONVERSION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSqlParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, i);
		}
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSqlParser.DEFAULT, 0); }
		public Create_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_conversion_stmt(this);
		}
	}

	public final Create_conversion_stmtContext create_conversion_stmt() throws RecognitionException {
		Create_conversion_stmtContext _localctx = new Create_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_create_conversion_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2305);
			match(CREATE);
			setState(2307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2306);
				match(DEFAULT);
				}
			}

			setState(2309);
			match(CONVERSION);
			setState(2310);
			identifier(0);
			setState(2311);
			match(FOR);
			setState(2312);
			match(SINGLEQ_STRING_LITERAL);
			setState(2313);
			match(TO);
			setState(2314);
			match(SINGLEQ_STRING_LITERAL);
			setState(2315);
			match(FROM);
			setState(2316);
			name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_database_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSqlParser.DATABASE, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSqlParser.EQUAL, i);
		}
		public TerminalNode TEMPLATE() { return getToken(PostgreSqlParser.TEMPLATE, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSqlParser.ENCODING, 0); }
		public TerminalNode LC_COLLATE() { return getToken(PostgreSqlParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(PostgreSqlParser.LC_CTYPE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSqlParser.TABLESPACE, 0); }
		public TerminalNode ALLOW_CONNECTIONS() { return getToken(PostgreSqlParser.ALLOW_CONNECTIONS, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSqlParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSqlParser.LIMIT, 0); }
		public List<ParameterOrIntegerLiteralContext> parameterOrIntegerLiteral() {
			return getRuleContexts(ParameterOrIntegerLiteralContext.class);
		}
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral(int i) {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,i);
		}
		public TerminalNode IS_TEMPLATE() { return getToken(PostgreSqlParser.IS_TEMPLATE, 0); }
		public Create_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_database_stmt(this);
		}
	}

	public final Create_database_stmtContext create_database_stmt() throws RecognitionException {
		Create_database_stmtContext _localctx = new Create_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2318);
			match(CREATE);
			setState(2319);
			match(DATABASE);
			setState(2320);
			name_();
			{
			setState(2322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2321);
				match(WITH);
				}
			}

			setState(2327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(2324);
				match(OWNER);
				setState(2325);
				match(EQUAL);
				setState(2326);
				name_();
				}
			}

			setState(2332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPLATE) {
				{
				setState(2329);
				match(TEMPLATE);
				setState(2330);
				match(EQUAL);
				setState(2331);
				name_();
				}
			}

			setState(2337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCODING) {
				{
				setState(2334);
				match(ENCODING);
				setState(2335);
				match(EQUAL);
				setState(2336);
				name_();
				}
			}

			setState(2342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LC_COLLATE) {
				{
				setState(2339);
				match(LC_COLLATE);
				setState(2340);
				match(EQUAL);
				setState(2341);
				name_();
				}
			}

			setState(2347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LC_CTYPE) {
				{
				setState(2344);
				match(LC_CTYPE);
				setState(2345);
				match(EQUAL);
				setState(2346);
				name_();
				}
			}

			setState(2352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2349);
				match(TABLESPACE);
				setState(2350);
				match(EQUAL);
				setState(2351);
				name_();
				}
			}

			setState(2357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOW_CONNECTIONS) {
				{
				setState(2354);
				match(ALLOW_CONNECTIONS);
				setState(2355);
				match(EQUAL);
				setState(2356);
				name_();
				}
			}

			setState(2363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION) {
				{
				setState(2359);
				match(CONNECTION);
				setState(2360);
				match(LIMIT);
				setState(2361);
				match(EQUAL);
				setState(2362);
				parameterOrIntegerLiteral();
				}
			}

			setState(2368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS_TEMPLATE) {
				{
				setState(2365);
				match(IS_TEMPLATE);
				setState(2366);
				match(EQUAL);
				setState(2367);
				parameterOrIntegerLiteral();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Domain_constraintContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSqlParser.NULL, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSqlParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSqlParser.CONSTRAINT, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Domain_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDomain_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDomain_constraint(this);
		}
	}

	public final Domain_constraintContext domain_constraint() throws RecognitionException {
		Domain_constraintContext _localctx = new Domain_constraintContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_domain_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2370);
				match(CONSTRAINT);
				setState(2371);
				name_();
				}
			}

			setState(2382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				{
				setState(2374);
				match(NOT);
				setState(2375);
				match(NULL);
				}
				break;
			case NULL:
				{
				setState(2376);
				match(NULL);
				}
				break;
			case CHECK:
				{
				setState(2377);
				match(CHECK);
				setState(2378);
				match(OPEN_PAREN);
				setState(2379);
				expr(0);
				setState(2380);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_domain_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSqlParser.DOMAIN, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public List<Domain_constraintContext> domain_constraint() {
			return getRuleContexts(Domain_constraintContext.class);
		}
		public Domain_constraintContext domain_constraint(int i) {
			return getRuleContext(Domain_constraintContext.class,i);
		}
		public List<TerminalNode> COLLATE() { return getTokens(PostgreSqlParser.COLLATE); }
		public TerminalNode COLLATE(int i) {
			return getToken(PostgreSqlParser.COLLATE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PostgreSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PostgreSqlParser.DEFAULT, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public Create_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_domain_stmt(this);
		}
	}

	public final Create_domain_stmtContext create_domain_stmt() throws RecognitionException {
		Create_domain_stmtContext _localctx = new Create_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_create_domain_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			match(CREATE);
			setState(2385);
			match(DOMAIN);
			setState(2386);
			name_();
			setState(2388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2387);
				match(AS);
				}
			}

			setState(2390);
			data_type();
			setState(2398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 2147484673L) != 0) || _la==DEFAULT || _la==NOT || _la==NULL) {
				{
				setState(2396);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLLATE:
					{
					{
					setState(2391);
					match(COLLATE);
					setState(2392);
					name_();
					}
					}
					break;
				case DEFAULT:
					{
					{
					setState(2393);
					match(DEFAULT);
					setState(2394);
					expr(0);
					}
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case NOT:
				case NULL:
					{
					setState(2395);
					domain_constraint();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2400);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_event_trigger_condContext extends ParserRuleContext {
		public IdentifierContext filter_stmt;
		public TerminalNode IN() { return getToken(PostgreSqlParser.IN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSqlParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSqlParser.AND, i);
		}
		public List<Create_event_trigger_condContext> create_event_trigger_cond() {
			return getRuleContexts(Create_event_trigger_condContext.class);
		}
		public Create_event_trigger_condContext create_event_trigger_cond(int i) {
			return getRuleContext(Create_event_trigger_condContext.class,i);
		}
		public Create_event_trigger_condContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger_cond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_event_trigger_cond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_event_trigger_cond(this);
		}
	}

	public final Create_event_trigger_condContext create_event_trigger_cond() throws RecognitionException {
		Create_event_trigger_condContext _localctx = new Create_event_trigger_condContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_create_event_trigger_cond);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2401);
			((Create_event_trigger_condContext)_localctx).filter_stmt = identifier(0);
			setState(2402);
			match(IN);
			setState(2403);
			match(OPEN_PAREN);
			setState(2404);
			match(SINGLEQ_STRING_LITERAL);
			setState(2409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2405);
				match(COMMA);
				setState(2406);
				match(SINGLEQ_STRING_LITERAL);
				}
				}
				setState(2411);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2412);
			match(CLOSE_PAREN);
			setState(2417);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2413);
					match(AND);
					setState(2414);
					create_event_trigger_cond();
					}
					} 
				}
				setState(2419);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_event_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext trigger;
		public IdentifierContext event;
		public IdentifierContext fn_name;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSqlParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSqlParser.EXECUTE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSqlParser.PROCEDURE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(PostgreSqlParser.WHEN, 0); }
		public Create_event_trigger_condContext create_event_trigger_cond() {
			return getRuleContext(Create_event_trigger_condContext.class,0);
		}
		public Create_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_event_trigger_stmt(this);
		}
	}

	public final Create_event_trigger_stmtContext create_event_trigger_stmt() throws RecognitionException {
		Create_event_trigger_stmtContext _localctx = new Create_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_create_event_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			match(CREATE);
			setState(2421);
			match(EVENT);
			setState(2422);
			match(TRIGGER);
			setState(2423);
			((Create_event_trigger_stmtContext)_localctx).trigger = identifier(0);
			setState(2424);
			match(ON);
			setState(2425);
			((Create_event_trigger_stmtContext)_localctx).event = identifier(0);
			setState(2428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2426);
				match(WHEN);
				setState(2427);
				create_event_trigger_cond();
				}
			}

			setState(2430);
			match(EXECUTE);
			setState(2431);
			match(PROCEDURE);
			setState(2432);
			((Create_event_trigger_stmtContext)_localctx).fn_name = identifier(0);
			setState(2433);
			match(OPEN_PAREN);
			setState(2434);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_foreign_data_optionsContext extends ParserRuleContext {
		public Name_Context opt;
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public List<Create_foreign_data_optionsContext> create_foreign_data_options() {
			return getRuleContexts(Create_foreign_data_optionsContext.class);
		}
		public Create_foreign_data_optionsContext create_foreign_data_options(int i) {
			return getRuleContext(Create_foreign_data_optionsContext.class,i);
		}
		public Create_foreign_data_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_data_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_foreign_data_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_foreign_data_options(this);
		}
	}

	public final Create_foreign_data_optionsContext create_foreign_data_options() throws RecognitionException {
		Create_foreign_data_optionsContext _localctx = new Create_foreign_data_optionsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_create_foreign_data_options);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2436);
			((Create_foreign_data_optionsContext)_localctx).opt = name_();
			setState(2437);
			match(SINGLEQ_STRING_LITERAL);
			setState(2442);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2438);
					match(COMMA);
					setState(2439);
					create_foreign_data_options();
					}
					} 
				}
				setState(2444);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_foreign_data_stmtContext extends ParserRuleContext {
		public IdentifierContext wrapper;
		public IdentifierContext handler;
		public IdentifierContext validator;
		public Create_foreign_data_optionsContext opts;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSqlParser.WRAPPER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> HANDLER() { return getTokens(PostgreSqlParser.HANDLER); }
		public TerminalNode HANDLER(int i) {
			return getToken(PostgreSqlParser.HANDLER, i);
		}
		public List<TerminalNode> NO() { return getTokens(PostgreSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSqlParser.NO, i);
		}
		public TerminalNode VALIDATOR() { return getToken(PostgreSqlParser.VALIDATOR, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSqlParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Create_foreign_data_optionsContext create_foreign_data_options() {
			return getRuleContext(Create_foreign_data_optionsContext.class,0);
		}
		public Create_foreign_data_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_data_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_foreign_data_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_foreign_data_stmt(this);
		}
	}

	public final Create_foreign_data_stmtContext create_foreign_data_stmt() throws RecognitionException {
		Create_foreign_data_stmtContext _localctx = new Create_foreign_data_stmtContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_create_foreign_data_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2445);
			match(CREATE);
			setState(2446);
			match(FOREIGN);
			setState(2447);
			match(DATA);
			setState(2448);
			match(WRAPPER);
			setState(2449);
			((Create_foreign_data_stmtContext)_localctx).wrapper = identifier(0);
			setState(2456);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2454);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case HANDLER:
						{
						setState(2450);
						match(HANDLER);
						setState(2451);
						((Create_foreign_data_stmtContext)_localctx).handler = identifier(0);
						}
						break;
					case NO:
						{
						setState(2452);
						match(NO);
						setState(2453);
						match(HANDLER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2458);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			}
			setState(2463);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				{
				setState(2459);
				match(VALIDATOR);
				setState(2460);
				((Create_foreign_data_stmtContext)_localctx).validator = identifier(0);
				}
				break;
			case NO:
				{
				setState(2461);
				match(NO);
				setState(2462);
				match(VALIDATOR);
				}
				break;
			case EOF:
			case OPTIONS:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2465);
				match(OPTIONS);
				setState(2466);
				match(OPEN_PAREN);
				setState(2467);
				((Create_foreign_data_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(2468);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_foreign_table_stmtContext extends ParserRuleContext {
		public IdentifierContext table_name_TODO;
		public IdentifierContext column_name_TODO;
		public IdentifierContext column_type;
		public Create_foreign_data_optionsContext opts;
		public Name_Context server_name;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode SERVER() { return getToken(PostgreSqlParser.SERVER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public List<TerminalNode> OPTIONS() { return getTokens(PostgreSqlParser.OPTIONS); }
		public TerminalNode OPTIONS(int i) {
			return getToken(PostgreSqlParser.OPTIONS, i);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSqlParser.COLLATE, 0); }
		public Create_collation_optContext create_collation_opt() {
			return getRuleContext(Create_collation_optContext.class,0);
		}
		public TerminalNode INHERITS() { return getToken(PostgreSqlParser.INHERITS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public List<Create_foreign_data_optionsContext> create_foreign_data_options() {
			return getRuleContexts(Create_foreign_data_optionsContext.class);
		}
		public Create_foreign_data_optionsContext create_foreign_data_options(int i) {
			return getRuleContext(Create_foreign_data_optionsContext.class,i);
		}
		public Create_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_foreign_table_stmt(this);
		}
	}

	public final Create_foreign_table_stmtContext create_foreign_table_stmt() throws RecognitionException {
		Create_foreign_table_stmtContext _localctx = new Create_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_create_foreign_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2472);
			match(CREATE);
			setState(2473);
			match(FOREIGN);
			setState(2474);
			match(TABLE);
			setState(2478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2475);
				match(IF);
				setState(2476);
				match(NOT);
				setState(2477);
				match(EXISTS);
				}
			}

			setState(2480);
			((Create_foreign_table_stmtContext)_localctx).table_name_TODO = identifier(0);
			setState(2481);
			match(OPEN_PAREN);
			setState(2482);
			((Create_foreign_table_stmtContext)_localctx).column_name_TODO = identifier(0);
			setState(2483);
			((Create_foreign_table_stmtContext)_localctx).column_type = identifier(0);
			setState(2489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2484);
				match(OPTIONS);
				setState(2485);
				match(OPEN_PAREN);
				setState(2486);
				((Create_foreign_table_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(2487);
				match(CLOSE_PAREN);
				}
			}

			setState(2493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(2491);
				match(COLLATE);
				setState(2492);
				create_collation_opt();
				}
			}

			setState(2495);
			match(CLOSE_PAREN);
			setState(2498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(2496);
				match(INHERITS);
				setState(2497);
				name_list();
				}
			}

			setState(2500);
			match(SERVER);
			setState(2501);
			((Create_foreign_table_stmtContext)_localctx).server_name = name_();
			setState(2507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2502);
				match(OPTIONS);
				setState(2503);
				match(OPEN_PAREN);
				setState(2504);
				((Create_foreign_table_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(2505);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_function_stmtContext extends ParserRuleContext {
		public Name_Context fn_name;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSqlParser.FUNCTION, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSqlParser.REPLACE, 0); }
		public Create_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_function_stmt(this);
		}
	}

	public final Create_function_stmtContext create_function_stmt() throws RecognitionException {
		Create_function_stmtContext _localctx = new Create_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_create_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2509);
			match(CREATE);
			setState(2512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2510);
				match(OR);
				setState(2511);
				match(REPLACE);
				}
			}

			setState(2514);
			match(FUNCTION);
			setState(2515);
			((Create_function_stmtContext)_localctx).fn_name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_group_stmtContext extends ParserRuleContext {
		public IdentifierContext group;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public List<TerminalNode> GROUP() { return getTokens(PostgreSqlParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(PostgreSqlParser.GROUP, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public List<TerminalNode> SUPERUSER() { return getTokens(PostgreSqlParser.SUPERUSER); }
		public TerminalNode SUPERUSER(int i) {
			return getToken(PostgreSqlParser.SUPERUSER, i);
		}
		public List<TerminalNode> NOSUPERUSER() { return getTokens(PostgreSqlParser.NOSUPERUSER); }
		public TerminalNode NOSUPERUSER(int i) {
			return getToken(PostgreSqlParser.NOSUPERUSER, i);
		}
		public List<TerminalNode> CREATEDB() { return getTokens(PostgreSqlParser.CREATEDB); }
		public TerminalNode CREATEDB(int i) {
			return getToken(PostgreSqlParser.CREATEDB, i);
		}
		public List<TerminalNode> NOCREATEDB() { return getTokens(PostgreSqlParser.NOCREATEDB); }
		public TerminalNode NOCREATEDB(int i) {
			return getToken(PostgreSqlParser.NOCREATEDB, i);
		}
		public List<TerminalNode> CREATEROLE() { return getTokens(PostgreSqlParser.CREATEROLE); }
		public TerminalNode CREATEROLE(int i) {
			return getToken(PostgreSqlParser.CREATEROLE, i);
		}
		public List<TerminalNode> NOCREATEROLE() { return getTokens(PostgreSqlParser.NOCREATEROLE); }
		public TerminalNode NOCREATEROLE(int i) {
			return getToken(PostgreSqlParser.NOCREATEROLE, i);
		}
		public List<TerminalNode> CREATEUSER() { return getTokens(PostgreSqlParser.CREATEUSER); }
		public TerminalNode CREATEUSER(int i) {
			return getToken(PostgreSqlParser.CREATEUSER, i);
		}
		public List<TerminalNode> NOCREATEUSER() { return getTokens(PostgreSqlParser.NOCREATEUSER); }
		public TerminalNode NOCREATEUSER(int i) {
			return getToken(PostgreSqlParser.NOCREATEUSER, i);
		}
		public List<TerminalNode> INHERIT() { return getTokens(PostgreSqlParser.INHERIT); }
		public TerminalNode INHERIT(int i) {
			return getToken(PostgreSqlParser.INHERIT, i);
		}
		public List<TerminalNode> NOINHERIT() { return getTokens(PostgreSqlParser.NOINHERIT); }
		public TerminalNode NOINHERIT(int i) {
			return getToken(PostgreSqlParser.NOINHERIT, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(PostgreSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(PostgreSqlParser.LOGIN, i);
		}
		public List<TerminalNode> NOLOGIN() { return getTokens(PostgreSqlParser.NOLOGIN); }
		public TerminalNode NOLOGIN(int i) {
			return getToken(PostgreSqlParser.NOLOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(PostgreSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(PostgreSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> VALID() { return getTokens(PostgreSqlParser.VALID); }
		public TerminalNode VALID(int i) {
			return getToken(PostgreSqlParser.VALID, i);
		}
		public List<TerminalNode> UNTIL() { return getTokens(PostgreSqlParser.UNTIL); }
		public TerminalNode UNTIL(int i) {
			return getToken(PostgreSqlParser.UNTIL, i);
		}
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSqlParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSqlParser.IN, i);
		}
		public List<TerminalNode> ROLE() { return getTokens(PostgreSqlParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(PostgreSqlParser.ROLE, i);
		}
		public List<Name_listContext> name_list() {
			return getRuleContexts(Name_listContext.class);
		}
		public Name_listContext name_list(int i) {
			return getRuleContext(Name_listContext.class,i);
		}
		public List<TerminalNode> ADMIN() { return getTokens(PostgreSqlParser.ADMIN); }
		public TerminalNode ADMIN(int i) {
			return getToken(PostgreSqlParser.ADMIN, i);
		}
		public List<TerminalNode> USER() { return getTokens(PostgreSqlParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSqlParser.USER, i);
		}
		public List<TerminalNode> SYSID() { return getTokens(PostgreSqlParser.SYSID); }
		public TerminalNode SYSID(int i) {
			return getToken(PostgreSqlParser.SYSID, i);
		}
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSqlParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSqlParser.INTEGER_LITERAL, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PostgreSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSqlParser.NULL, i);
		}
		public List<TerminalNode> ENCRYPTED() { return getTokens(PostgreSqlParser.ENCRYPTED); }
		public TerminalNode ENCRYPTED(int i) {
			return getToken(PostgreSqlParser.ENCRYPTED, i);
		}
		public List<TerminalNode> UNENCRYPTED() { return getTokens(PostgreSqlParser.UNENCRYPTED); }
		public TerminalNode UNENCRYPTED(int i) {
			return getToken(PostgreSqlParser.UNENCRYPTED, i);
		}
		public Create_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_group_stmt(this);
		}
	}

	public final Create_group_stmtContext create_group_stmt() throws RecognitionException {
		Create_group_stmtContext _localctx = new Create_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_create_group_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			match(CREATE);
			setState(2518);
			match(GROUP);
			setState(2519);
			((Create_group_stmtContext)_localctx).group = identifier(0);
			setState(2561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADMIN || _la==CREATEDB || _la==CREATEUSER || _la==ENCRYPTED || _la==IN || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & 144115188075855875L) != 0) || _la==ROLE || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & 144150372447944705L) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & 68451565569L) != 0)) {
				{
				setState(2521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2520);
					match(WITH);
					}
				}

				setState(2557); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2557);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
					case 1:
						{
						setState(2523);
						match(SUPERUSER);
						}
						break;
					case 2:
						{
						setState(2524);
						match(NOSUPERUSER);
						}
						break;
					case 3:
						{
						setState(2525);
						match(CREATEDB);
						}
						break;
					case 4:
						{
						setState(2526);
						match(NOCREATEDB);
						}
						break;
					case 5:
						{
						setState(2527);
						match(CREATEROLE);
						}
						break;
					case 6:
						{
						setState(2528);
						match(NOCREATEROLE);
						}
						break;
					case 7:
						{
						setState(2529);
						match(CREATEUSER);
						}
						break;
					case 8:
						{
						setState(2530);
						match(NOCREATEUSER);
						}
						break;
					case 9:
						{
						setState(2531);
						match(INHERIT);
						}
						break;
					case 10:
						{
						setState(2532);
						match(NOINHERIT);
						}
						break;
					case 11:
						{
						setState(2533);
						match(LOGIN);
						}
						break;
					case 12:
						{
						setState(2534);
						match(NOLOGIN);
						}
						break;
					case 13:
						{
						setState(2536);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ENCRYPTED || _la==UNENCRYPTED) {
							{
							setState(2535);
							_la = _input.LA(1);
							if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(2538);
						match(PASSWORD);
						setState(2539);
						_la = _input.LA(1);
						if ( !(_la==NULL || _la==SINGLEQ_STRING_LITERAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 14:
						{
						setState(2540);
						match(VALID);
						setState(2541);
						match(UNTIL);
						setState(2542);
						match(SINGLEQ_STRING_LITERAL);
						}
						break;
					case 15:
						{
						setState(2543);
						match(IN);
						setState(2544);
						match(ROLE);
						setState(2545);
						name_list();
						}
						break;
					case 16:
						{
						setState(2546);
						match(IN);
						setState(2547);
						match(GROUP);
						setState(2548);
						name_list();
						}
						break;
					case 17:
						{
						setState(2549);
						match(ROLE);
						setState(2550);
						name_list();
						}
						break;
					case 18:
						{
						setState(2551);
						match(ADMIN);
						setState(2552);
						name_list();
						}
						break;
					case 19:
						{
						setState(2553);
						match(USER);
						setState(2554);
						name_list();
						}
						break;
					case 20:
						{
						setState(2555);
						match(SYSID);
						setState(2556);
						match(INTEGER_LITERAL);
						}
						break;
					}
					}
					setState(2559); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ADMIN || _la==CREATEDB || _la==CREATEUSER || _la==ENCRYPTED || _la==IN || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & 144115188075855875L) != 0) || _la==ROLE || ((((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & 144150372447944705L) != 0) || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & 68451041281L) != 0) );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_index_stmtContext extends ParserRuleContext {
		public IdentifierContext index_name;
		public IdentifierContext tableName;
		public IdentifierContext tablespace_name;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSqlParser.UNIQUE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSqlParser.CONCURRENTLY, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSqlParser.TABLESPACE, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSqlParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_index_stmt(this);
		}
	}

	public final Create_index_stmtContext create_index_stmt() throws RecognitionException {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_create_index_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2563);
			match(CREATE);
			setState(2565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2564);
				match(UNIQUE);
				}
			}

			setState(2567);
			match(INDEX);
			setState(2569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(2568);
				match(CONCURRENTLY);
				}
			}

			setState(2577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7662894626537209859L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 4398046511191L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3170536334544601087L) != 0)) {
				{
				setState(2574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2571);
					match(IF);
					setState(2572);
					match(NOT);
					setState(2573);
					match(EXISTS);
					}
				}

				setState(2576);
				((Create_index_stmtContext)_localctx).index_name = identifier(0);
				}
			}

			setState(2579);
			match(ON);
			setState(2580);
			((Create_index_stmtContext)_localctx).tableName = identifier(0);
			setState(2583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2581);
				match(USING);
				setState(2582);
				index_method();
				}
			}

			setState(2587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2585);
				match(TABLESPACE);
				setState(2586);
				((Create_index_stmtContext)_localctx).tablespace_name = identifier(0);
				}
			}

			setState(2591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2589);
				match(WHERE);
				setState(2590);
				predicate(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_language_stmtContext extends ParserRuleContext {
		public IdentifierContext language_name;
		public IdentifierContext call_handler;
		public IdentifierContext inline_handler;
		public IdentifierContext valfunction;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSqlParser.LANGUAGE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OR() { return getToken(PostgreSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSqlParser.REPLACE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSqlParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSqlParser.HANDLER, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSqlParser.TRUSTED, 0); }
		public TerminalNode INLINE() { return getToken(PostgreSqlParser.INLINE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSqlParser.VALIDATOR, 0); }
		public Create_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_language_stmt(this);
		}
	}

	public final Create_language_stmtContext create_language_stmt() throws RecognitionException {
		Create_language_stmtContext _localctx = new Create_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_create_language_stmt);
		int _la;
		try {
			setState(2626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2593);
				match(CREATE);
				setState(2596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2594);
					match(OR);
					setState(2595);
					match(REPLACE);
					}
				}

				setState(2599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(2598);
					match(PROCEDURAL);
					}
				}

				setState(2601);
				match(LANGUAGE);
				setState(2602);
				((Create_language_stmtContext)_localctx).language_name = identifier(0);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2603);
				match(CREATE);
				setState(2606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2604);
					match(OR);
					setState(2605);
					match(REPLACE);
					}
				}

				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRUSTED) {
					{
					setState(2608);
					match(TRUSTED);
					}
				}

				setState(2612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(2611);
					match(PROCEDURAL);
					}
				}

				setState(2614);
				match(LANGUAGE);
				setState(2615);
				((Create_language_stmtContext)_localctx).language_name = identifier(0);
				setState(2616);
				match(HANDLER);
				setState(2617);
				((Create_language_stmtContext)_localctx).call_handler = identifier(0);
				setState(2620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(2618);
					match(INLINE);
					setState(2619);
					((Create_language_stmtContext)_localctx).inline_handler = identifier(0);
					}
				}

				setState(2624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALIDATOR) {
					{
					setState(2622);
					match(VALIDATOR);
					setState(2623);
					((Create_language_stmtContext)_localctx).valfunction = identifier(0);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_materialized_view_stmtContext extends ParserRuleContext {
		public IdentifierContext tableName;
		public Identifier_listContext columns;
		public IdentifierContext tablespace_name;
		public Select_stmtContext query;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSqlParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> WITH() { return getTokens(PostgreSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSqlParser.WITH, i);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSqlParser.TABLESPACE, 0); }
		public TerminalNode DATA() { return getToken(PostgreSqlParser.DATA, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSqlParser.NO, 0); }
		public Create_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_materialized_view_stmt(this);
		}
	}

	public final Create_materialized_view_stmtContext create_materialized_view_stmt() throws RecognitionException {
		Create_materialized_view_stmtContext _localctx = new Create_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_create_materialized_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2628);
			match(CREATE);
			setState(2629);
			match(MATERIALIZED);
			setState(2630);
			match(VIEW);
			setState(2634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2631);
				match(IF);
				setState(2632);
				match(NOT);
				setState(2633);
				match(EXISTS);
				}
			}

			setState(2636);
			((Create_materialized_view_stmtContext)_localctx).tableName = identifier(0);
			setState(2641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2637);
				match(OPEN_PAREN);
				setState(2638);
				((Create_materialized_view_stmtContext)_localctx).columns = identifier_list();
				setState(2639);
				match(CLOSE_PAREN);
				}
			}

			setState(2644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2643);
				match(WITH);
				}
			}

			setState(2648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2646);
				match(TABLESPACE);
				setState(2647);
				((Create_materialized_view_stmtContext)_localctx).tablespace_name = identifier(0);
				}
			}

			setState(2650);
			match(AS);
			setState(2651);
			((Create_materialized_view_stmtContext)_localctx).query = select_stmt();
			setState(2657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2652);
				match(WITH);
				setState(2654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2653);
					match(NO);
					}
				}

				setState(2656);
				match(DATA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_operator_stmtContext extends ParserRuleContext {
		public IdentifierContext opName;
		public IdentifierContext function_name;
		public Name_Context left_type;
		public Name_Context right_type;
		public Name_Context com_op;
		public Name_Context neg_op;
		public Name_Context res_proc;
		public Name_Context join_proc;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSqlParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSqlParser.PROCEDURE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSqlParser.EQUAL, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public TerminalNode LEFTARG() { return getToken(PostgreSqlParser.LEFTARG, 0); }
		public TerminalNode RIGHTARG() { return getToken(PostgreSqlParser.RIGHTARG, 0); }
		public TerminalNode COMMUTATOR() { return getToken(PostgreSqlParser.COMMUTATOR, 0); }
		public TerminalNode NEGATOR() { return getToken(PostgreSqlParser.NEGATOR, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSqlParser.JOIN, 0); }
		public TerminalNode HASHES() { return getToken(PostgreSqlParser.HASHES, 0); }
		public TerminalNode MERGES() { return getToken(PostgreSqlParser.MERGES, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public Create_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_operator_stmt(this);
		}
	}

	public final Create_operator_stmtContext create_operator_stmt() throws RecognitionException {
		Create_operator_stmtContext _localctx = new Create_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_create_operator_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2659);
			match(CREATE);
			setState(2660);
			match(OPERATOR);
			setState(2661);
			((Create_operator_stmtContext)_localctx).opName = identifier(0);
			setState(2662);
			match(OPEN_PAREN);
			setState(2663);
			match(PROCEDURE);
			setState(2664);
			match(EQUAL);
			setState(2665);
			((Create_operator_stmtContext)_localctx).function_name = identifier(0);
			setState(2670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2666);
				match(COMMA);
				setState(2667);
				match(LEFTARG);
				setState(2668);
				match(EQUAL);
				setState(2669);
				((Create_operator_stmtContext)_localctx).left_type = name_();
				}
				break;
			}
			setState(2676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2672);
				match(COMMA);
				setState(2673);
				match(RIGHTARG);
				setState(2674);
				match(EQUAL);
				setState(2675);
				((Create_operator_stmtContext)_localctx).right_type = name_();
				}
				break;
			}
			setState(2682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				setState(2678);
				match(COMMA);
				setState(2679);
				match(COMMUTATOR);
				setState(2680);
				match(EQUAL);
				setState(2681);
				((Create_operator_stmtContext)_localctx).com_op = name_();
				}
				break;
			}
			setState(2688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2684);
				match(COMMA);
				setState(2685);
				match(NEGATOR);
				setState(2686);
				match(EQUAL);
				setState(2687);
				((Create_operator_stmtContext)_localctx).neg_op = name_();
				}
				break;
			}
			setState(2694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				setState(2690);
				match(COMMA);
				setState(2691);
				match(RESTRICT);
				setState(2692);
				match(EQUAL);
				setState(2693);
				((Create_operator_stmtContext)_localctx).res_proc = name_();
				}
				break;
			}
			setState(2700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2696);
				match(COMMA);
				setState(2697);
				match(JOIN);
				setState(2698);
				match(EQUAL);
				setState(2699);
				((Create_operator_stmtContext)_localctx).join_proc = name_();
				}
				break;
			}
			setState(2704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2702);
				match(COMMA);
				setState(2703);
				match(HASHES);
				}
				break;
			}
			setState(2708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2706);
				match(COMMA);
				setState(2707);
				match(MERGES);
				}
			}

			setState(2710);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_operator_class_optContext extends ParserRuleContext {
		public Token strategy_number;
		public IdentifierContext opName;
		public Token support_number;
		public IdentifierContext func_name_;
		public IdentifierContext storage_type;
		public TerminalNode OPERATOR() { return getToken(PostgreSqlParser.OPERATOR, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSqlParser.INTEGER_LITERAL, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSqlParser.COMMA, 0); }
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSqlParser.FUNCTION, 0); }
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PostgreSqlParser.STORAGE, 0); }
		public Create_operator_class_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_class_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_operator_class_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_operator_class_opt(this);
		}
	}

	public final Create_operator_class_optContext create_operator_class_opt() throws RecognitionException {
		Create_operator_class_optContext _localctx = new Create_operator_class_optContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_create_operator_class_opt);
		int _la;
		try {
			setState(2742);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2712);
				match(OPERATOR);
				setState(2713);
				((Create_operator_class_optContext)_localctx).strategy_number = match(INTEGER_LITERAL);
				setState(2714);
				((Create_operator_class_optContext)_localctx).opName = identifier(0);
				setState(2721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2715);
					match(OPEN_PAREN);
					setState(2716);
					identifier(0);
					setState(2717);
					match(COMMA);
					setState(2718);
					identifier(0);
					setState(2719);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2723);
				match(FUNCTION);
				setState(2724);
				((Create_operator_class_optContext)_localctx).support_number = match(INTEGER_LITERAL);
				setState(2733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2725);
					match(OPEN_PAREN);
					setState(2726);
					identifier(0);
					setState(2729);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2727);
						match(COMMA);
						setState(2728);
						identifier(0);
						}
					}

					setState(2731);
					match(CLOSE_PAREN);
					}
				}

				setState(2735);
				((Create_operator_class_optContext)_localctx).func_name_ = identifier(0);
				setState(2736);
				match(OPEN_PAREN);
				setState(2737);
				data_type_list();
				setState(2738);
				match(CLOSE_PAREN);
				}
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(2740);
				match(STORAGE);
				setState(2741);
				((Create_operator_class_optContext)_localctx).storage_type = identifier(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_operator_class_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext op_type;
		public IdentifierContext family_name;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSqlParser.CLASS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSqlParser.TYPE, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public List<Create_operator_class_optContext> create_operator_class_opt() {
			return getRuleContexts(Create_operator_class_optContext.class);
		}
		public Create_operator_class_optContext create_operator_class_opt(int i) {
			return getRuleContext(Create_operator_class_optContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSqlParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSqlParser.FAMILY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Create_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_operator_class_stmt(this);
		}
	}

	public final Create_operator_class_stmtContext create_operator_class_stmt() throws RecognitionException {
		Create_operator_class_stmtContext _localctx = new Create_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_create_operator_class_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2744);
			match(CREATE);
			setState(2745);
			match(OPERATOR);
			setState(2746);
			match(CLASS);
			setState(2747);
			((Create_operator_class_stmtContext)_localctx).name = identifier(0);
			setState(2749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2748);
				match(DEFAULT);
				}
			}

			setState(2751);
			match(FOR);
			setState(2752);
			match(TYPE);
			setState(2753);
			((Create_operator_class_stmtContext)_localctx).op_type = identifier(0);
			setState(2754);
			match(USING);
			setState(2755);
			index_method();
			setState(2758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(2756);
				match(FAMILY);
				setState(2757);
				((Create_operator_class_stmtContext)_localctx).family_name = identifier(0);
				}
			}

			setState(2760);
			match(AS);
			setState(2761);
			create_operator_class_opt();
			setState(2766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2762);
				match(COMMA);
				setState(2763);
				create_operator_class_opt();
				}
				}
				setState(2768);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_operator_family_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSqlParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSqlParser.FAMILY, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Create_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_operator_family_stmt(this);
		}
	}

	public final Create_operator_family_stmtContext create_operator_family_stmt() throws RecognitionException {
		Create_operator_family_stmtContext _localctx = new Create_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_create_operator_family_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2769);
			match(CREATE);
			setState(2770);
			match(OPERATOR);
			setState(2771);
			match(FAMILY);
			setState(2772);
			((Create_operator_family_stmtContext)_localctx).name = identifier(0);
			setState(2773);
			match(USING);
			setState(2774);
			index_method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_policy_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext tableName;
		public Role_nameContext role;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSqlParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSqlParser.CHECK, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSqlParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSqlParser.DELETE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Create_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_policy_stmt(this);
		}
	}

	public final Create_policy_stmtContext create_policy_stmt() throws RecognitionException {
		Create_policy_stmtContext _localctx = new Create_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_create_policy_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2776);
			match(CREATE);
			setState(2777);
			match(POLICY);
			setState(2778);
			((Create_policy_stmtContext)_localctx).name = identifier(0);
			setState(2779);
			match(ON);
			setState(2780);
			((Create_policy_stmtContext)_localctx).tableName = identifier(0);
			setState(2783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2781);
				match(FOR);
				setState(2782);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(2785);
				match(TO);
				setState(2786);
				((Create_policy_stmtContext)_localctx).role = role_name();
				}
			}

			setState(2794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2789);
				match(USING);
				setState(2790);
				match(OPEN_PAREN);
				setState(2791);
				predicate(0);
				setState(2792);
				match(CLOSE_PAREN);
				}
			}

			setState(2802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2796);
				match(WITH);
				setState(2797);
				match(CHECK);
				setState(2798);
				match(OPEN_PAREN);
				setState(2799);
				predicate(0);
				setState(2800);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_role_stmtContext extends ParserRuleContext {
		public Role_nameContext role;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public List<TerminalNode> ROLE() { return getTokens(PostgreSqlParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(PostgreSqlParser.ROLE, i);
		}
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public List<TerminalNode> SUPERUSER() { return getTokens(PostgreSqlParser.SUPERUSER); }
		public TerminalNode SUPERUSER(int i) {
			return getToken(PostgreSqlParser.SUPERUSER, i);
		}
		public List<TerminalNode> NOSUPERUSER() { return getTokens(PostgreSqlParser.NOSUPERUSER); }
		public TerminalNode NOSUPERUSER(int i) {
			return getToken(PostgreSqlParser.NOSUPERUSER, i);
		}
		public List<TerminalNode> CREATEDB() { return getTokens(PostgreSqlParser.CREATEDB); }
		public TerminalNode CREATEDB(int i) {
			return getToken(PostgreSqlParser.CREATEDB, i);
		}
		public List<TerminalNode> NOCREATEDB() { return getTokens(PostgreSqlParser.NOCREATEDB); }
		public TerminalNode NOCREATEDB(int i) {
			return getToken(PostgreSqlParser.NOCREATEDB, i);
		}
		public List<TerminalNode> CREATEROLE() { return getTokens(PostgreSqlParser.CREATEROLE); }
		public TerminalNode CREATEROLE(int i) {
			return getToken(PostgreSqlParser.CREATEROLE, i);
		}
		public List<TerminalNode> NOCREATEROLE() { return getTokens(PostgreSqlParser.NOCREATEROLE); }
		public TerminalNode NOCREATEROLE(int i) {
			return getToken(PostgreSqlParser.NOCREATEROLE, i);
		}
		public List<TerminalNode> INHERIT() { return getTokens(PostgreSqlParser.INHERIT); }
		public TerminalNode INHERIT(int i) {
			return getToken(PostgreSqlParser.INHERIT, i);
		}
		public List<TerminalNode> NOINHERIT() { return getTokens(PostgreSqlParser.NOINHERIT); }
		public TerminalNode NOINHERIT(int i) {
			return getToken(PostgreSqlParser.NOINHERIT, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(PostgreSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(PostgreSqlParser.LOGIN, i);
		}
		public List<TerminalNode> NOLOGIN() { return getTokens(PostgreSqlParser.NOLOGIN); }
		public TerminalNode NOLOGIN(int i) {
			return getToken(PostgreSqlParser.NOLOGIN, i);
		}
		public List<TerminalNode> REPLICATION() { return getTokens(PostgreSqlParser.REPLICATION); }
		public TerminalNode REPLICATION(int i) {
			return getToken(PostgreSqlParser.REPLICATION, i);
		}
		public List<TerminalNode> NOREPLICATION() { return getTokens(PostgreSqlParser.NOREPLICATION); }
		public TerminalNode NOREPLICATION(int i) {
			return getToken(PostgreSqlParser.NOREPLICATION, i);
		}
		public List<TerminalNode> BYPASSRLS() { return getTokens(PostgreSqlParser.BYPASSRLS); }
		public TerminalNode BYPASSRLS(int i) {
			return getToken(PostgreSqlParser.BYPASSRLS, i);
		}
		public List<TerminalNode> NOBYPASSRLS() { return getTokens(PostgreSqlParser.NOBYPASSRLS); }
		public TerminalNode NOBYPASSRLS(int i) {
			return getToken(PostgreSqlParser.NOBYPASSRLS, i);
		}
		public List<TerminalNode> CONNECTION() { return getTokens(PostgreSqlParser.CONNECTION); }
		public TerminalNode CONNECTION(int i) {
			return getToken(PostgreSqlParser.CONNECTION, i);
		}
		public List<TerminalNode> LIMIT() { return getTokens(PostgreSqlParser.LIMIT); }
		public TerminalNode LIMIT(int i) {
			return getToken(PostgreSqlParser.LIMIT, i);
		}
		public List<ParameterOrIntegerLiteralContext> parameterOrIntegerLiteral() {
			return getRuleContexts(ParameterOrIntegerLiteralContext.class);
		}
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral(int i) {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(PostgreSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(PostgreSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> VALID() { return getTokens(PostgreSqlParser.VALID); }
		public TerminalNode VALID(int i) {
			return getToken(PostgreSqlParser.VALID, i);
		}
		public List<TerminalNode> UNTIL() { return getTokens(PostgreSqlParser.UNTIL); }
		public TerminalNode UNTIL(int i) {
			return getToken(PostgreSqlParser.UNTIL, i);
		}
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSqlParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSqlParser.IN, i);
		}
		public List<Name_listContext> name_list() {
			return getRuleContexts(Name_listContext.class);
		}
		public Name_listContext name_list(int i) {
			return getRuleContext(Name_listContext.class,i);
		}
		public List<TerminalNode> GROUP() { return getTokens(PostgreSqlParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(PostgreSqlParser.GROUP, i);
		}
		public List<TerminalNode> ADMIN() { return getTokens(PostgreSqlParser.ADMIN); }
		public TerminalNode ADMIN(int i) {
			return getToken(PostgreSqlParser.ADMIN, i);
		}
		public List<TerminalNode> USER() { return getTokens(PostgreSqlParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSqlParser.USER, i);
		}
		public List<TerminalNode> SYSID() { return getTokens(PostgreSqlParser.SYSID); }
		public TerminalNode SYSID(int i) {
			return getToken(PostgreSqlParser.SYSID, i);
		}
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSqlParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSqlParser.INTEGER_LITERAL, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PostgreSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSqlParser.NULL, i);
		}
		public List<TerminalNode> ENCRYPTED() { return getTokens(PostgreSqlParser.ENCRYPTED); }
		public TerminalNode ENCRYPTED(int i) {
			return getToken(PostgreSqlParser.ENCRYPTED, i);
		}
		public Create_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_role_stmt(this);
		}
	}

	public final Create_role_stmtContext create_role_stmt() throws RecognitionException {
		Create_role_stmtContext _localctx = new Create_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_role_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			match(CREATE);
			setState(2805);
			match(ROLE);
			setState(2806);
			((Create_role_stmtContext)_localctx).role = role_name();
			setState(2853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADMIN || _la==CONNECTION || _la==CREATEDB || _la==ENCRYPTED || _la==IN || _la==NOCREATEDB || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==USER || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & 1099243716609L) != 0)) {
				{
				setState(2808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2807);
					match(WITH);
					}
				}

				setState(2849); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2849);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
					case 1:
						{
						setState(2810);
						match(SUPERUSER);
						}
						break;
					case 2:
						{
						setState(2811);
						match(NOSUPERUSER);
						}
						break;
					case 3:
						{
						setState(2812);
						match(CREATEDB);
						}
						break;
					case 4:
						{
						setState(2813);
						match(NOCREATEDB);
						}
						break;
					case 5:
						{
						setState(2814);
						match(CREATEROLE);
						}
						break;
					case 6:
						{
						setState(2815);
						match(NOCREATEROLE);
						}
						break;
					case 7:
						{
						setState(2816);
						match(INHERIT);
						}
						break;
					case 8:
						{
						setState(2817);
						match(NOINHERIT);
						}
						break;
					case 9:
						{
						setState(2818);
						match(LOGIN);
						}
						break;
					case 10:
						{
						setState(2819);
						match(NOLOGIN);
						}
						break;
					case 11:
						{
						setState(2820);
						match(REPLICATION);
						}
						break;
					case 12:
						{
						setState(2821);
						match(NOREPLICATION);
						}
						break;
					case 13:
						{
						setState(2822);
						match(BYPASSRLS);
						}
						break;
					case 14:
						{
						setState(2823);
						match(NOBYPASSRLS);
						}
						break;
					case 15:
						{
						setState(2824);
						match(CONNECTION);
						setState(2825);
						match(LIMIT);
						setState(2826);
						parameterOrIntegerLiteral();
						}
						break;
					case 16:
						{
						setState(2828);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ENCRYPTED) {
							{
							setState(2827);
							match(ENCRYPTED);
							}
						}

						setState(2830);
						match(PASSWORD);
						setState(2831);
						_la = _input.LA(1);
						if ( !(_la==NULL || _la==SINGLEQ_STRING_LITERAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 17:
						{
						setState(2832);
						match(VALID);
						setState(2833);
						match(UNTIL);
						setState(2834);
						match(SINGLEQ_STRING_LITERAL);
						}
						break;
					case 18:
						{
						setState(2835);
						match(IN);
						setState(2836);
						match(ROLE);
						setState(2837);
						name_list();
						}
						break;
					case 19:
						{
						setState(2838);
						match(IN);
						setState(2839);
						match(GROUP);
						setState(2840);
						name_list();
						}
						break;
					case 20:
						{
						setState(2841);
						match(ROLE);
						setState(2842);
						name_list();
						}
						break;
					case 21:
						{
						setState(2843);
						match(ADMIN);
						setState(2844);
						name_list();
						}
						break;
					case 22:
						{
						setState(2845);
						match(USER);
						setState(2846);
						name_list();
						}
						break;
					case 23:
						{
						setState(2847);
						match(SYSID);
						setState(2848);
						match(INTEGER_LITERAL);
						}
						break;
					}
					}
					setState(2851); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ADMIN || _la==CONNECTION || _la==CREATEDB || _la==ENCRYPTED || _la==IN || _la==NOCREATEDB || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==USER || ((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & 1099243192321L) != 0) );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_rule_eventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSqlParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSqlParser.DELETE, 0); }
		public Create_rule_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_rule_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_rule_event(this);
		}
	}

	public final Create_rule_eventContext create_rule_event() throws RecognitionException {
		Create_rule_eventContext _localctx = new Create_rule_eventContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_rule_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2855);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_rule_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public Create_rule_eventContext event;
		public IdentifierContext tableName;
		public IdentifierContext command;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(PostgreSqlParser.RULE, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode DO() { return getToken(PostgreSqlParser.DO, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Create_rule_eventContext create_rule_event() {
			return getRuleContext(Create_rule_eventContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSqlParser.NOTHING, 0); }
		public TerminalNode OR() { return getToken(PostgreSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSqlParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSqlParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode ALSO() { return getToken(PostgreSqlParser.ALSO, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSqlParser.INSTEAD, 0); }
		public Create_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_rule_stmt(this);
		}
	}

	public final Create_rule_stmtContext create_rule_stmt() throws RecognitionException {
		Create_rule_stmtContext _localctx = new Create_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_rule_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2857);
			match(CREATE);
			setState(2860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2858);
				match(OR);
				setState(2859);
				match(REPLACE);
				}
			}

			setState(2862);
			match(RULE);
			setState(2863);
			((Create_rule_stmtContext)_localctx).name = name_();
			setState(2864);
			match(AS);
			setState(2865);
			match(ON);
			setState(2866);
			((Create_rule_stmtContext)_localctx).event = create_rule_event();
			setState(2867);
			match(TO);
			setState(2868);
			((Create_rule_stmtContext)_localctx).tableName = identifier(0);
			setState(2871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2869);
				match(WHERE);
				setState(2870);
				predicate(0);
				}
			}

			setState(2873);
			match(DO);
			setState(2875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				setState(2874);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2877);
				match(NOTHING);
				}
				break;
			case 2:
				{
				setState(2878);
				((Create_rule_stmtContext)_localctx).command = identifier(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_schema_stmtContext extends ParserRuleContext {
		public IdentifierContext schema_name;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSqlParser.AUTHORIZATION, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Todo_fill_inContext todo_fill_in() {
			return getRuleContext(Todo_fill_inContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Create_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_schema_stmt(this);
		}
	}

	public final Create_schema_stmtContext create_schema_stmt() throws RecognitionException {
		Create_schema_stmtContext _localctx = new Create_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_schema_stmt);
		int _la;
		try {
			setState(2915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2881);
				match(CREATE);
				setState(2882);
				match(SCHEMA);
				setState(2883);
				((Create_schema_stmtContext)_localctx).schema_name = identifier(0);
				setState(2886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(2884);
					match(AUTHORIZATION);
					setState(2885);
					role_name();
					}
					break;
				}
				setState(2889);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(2888);
					todo_fill_in();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2891);
				match(CREATE);
				setState(2892);
				match(SCHEMA);
				setState(2893);
				match(AUTHORIZATION);
				setState(2894);
				role_name();
				setState(2896);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(2895);
					todo_fill_in();
					}
					break;
				}
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(2898);
				match(CREATE);
				setState(2899);
				match(SCHEMA);
				setState(2900);
				match(IF);
				setState(2901);
				match(NOT);
				setState(2902);
				match(EXISTS);
				setState(2903);
				((Create_schema_stmtContext)_localctx).schema_name = identifier(0);
				setState(2906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(2904);
					match(AUTHORIZATION);
					setState(2905);
					role_name();
					}
				}

				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(2908);
				match(CREATE);
				setState(2909);
				match(SCHEMA);
				setState(2910);
				match(IF);
				setState(2911);
				match(NOT);
				setState(2912);
				match(EXISTS);
				setState(2913);
				match(AUTHORIZATION);
				setState(2914);
				role_name();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_sequence_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public ParameterOrIntegerLiteralContext increment;
		public ParameterOrIntegerLiteralContext minvalue;
		public ParameterOrIntegerLiteralContext maxvalue;
		public ParameterOrIntegerLiteralContext start;
		public ParameterOrIntegerLiteralContext cache;
		public IdentifierContext table_name;
		public IdentifierContext column_name_;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSqlParser.SEQUENCE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSqlParser.INCREMENT, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSqlParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(PostgreSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(PostgreSqlParser.MAXVALUE, 0); }
		public TerminalNode START() { return getToken(PostgreSqlParser.START, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSqlParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSqlParser.CYCLE, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSqlParser.OWNED, 0); }
		public List<TerminalNode> BY() { return getTokens(PostgreSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PostgreSqlParser.BY, i);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSqlParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSqlParser.TEMP, 0); }
		public List<ParameterOrIntegerLiteralContext> parameterOrIntegerLiteral() {
			return getRuleContexts(ParameterOrIntegerLiteralContext.class);
		}
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral(int i) {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,i);
		}
		public TerminalNode NONE() { return getToken(PostgreSqlParser.NONE, 0); }
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode DOT() { return getToken(PostgreSqlParser.DOT, 0); }
		public Create_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_sequence_stmt(this);
		}
	}

	public final Create_sequence_stmtContext create_sequence_stmt() throws RecognitionException {
		Create_sequence_stmtContext _localctx = new Create_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2917);
			match(CREATE);
			setState(2919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(2918);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2921);
			match(SEQUENCE);
			setState(2925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2922);
				match(IF);
				setState(2923);
				match(NOT);
				setState(2924);
				match(EXISTS);
				}
			}

			setState(2927);
			((Create_sequence_stmtContext)_localctx).name = identifier(0);
			setState(2933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(2928);
				match(INCREMENT);
				setState(2930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2929);
					match(BY);
					}
				}

				setState(2932);
				((Create_sequence_stmtContext)_localctx).increment = parameterOrIntegerLiteral();
				}
			}

			setState(2939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				setState(2935);
				match(MINVALUE);
				setState(2936);
				((Create_sequence_stmtContext)_localctx).minvalue = parameterOrIntegerLiteral();
				}
				break;
			case 2:
				{
				setState(2937);
				match(NO);
				setState(2938);
				match(MINVALUE);
				}
				break;
			}
			setState(2945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(2941);
				match(MAXVALUE);
				setState(2942);
				((Create_sequence_stmtContext)_localctx).maxvalue = parameterOrIntegerLiteral();
				}
				break;
			case 2:
				{
				setState(2943);
				match(NO);
				setState(2944);
				match(MAXVALUE);
				}
				break;
			}
			setState(2952);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==START) {
				{
				setState(2947);
				match(START);
				setState(2949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2948);
					match(WITH);
					}
				}

				setState(2951);
				((Create_sequence_stmtContext)_localctx).start = parameterOrIntegerLiteral();
				}
			}

			setState(2956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE) {
				{
				setState(2954);
				match(CACHE);
				setState(2955);
				((Create_sequence_stmtContext)_localctx).cache = parameterOrIntegerLiteral();
				}
			}

			setState(2962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE || _la==NO) {
				{
				setState(2959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2958);
					match(NO);
					}
				}

				setState(2961);
				match(CYCLE);
				}
			}

			setState(2973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNED) {
				{
				setState(2964);
				match(OWNED);
				setState(2965);
				match(BY);
				setState(2971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					{
					setState(2966);
					((Create_sequence_stmtContext)_localctx).table_name = identifier(0);
					setState(2967);
					match(DOT);
					setState(2968);
					((Create_sequence_stmtContext)_localctx).column_name_ = identifier(0);
					}
					}
					break;
				case 2:
					{
					setState(2970);
					match(NONE);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_server_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_server_stmt(this);
		}
	}

	public final Create_server_stmtContext create_server_stmt() throws RecognitionException {
		Create_server_stmtContext _localctx = new Create_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_server_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2975);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_statistics_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_statistics_stmt(this);
		}
	}

	public final Create_statistics_stmtContext create_statistics_stmt() throws RecognitionException {
		Create_statistics_stmtContext _localctx = new Create_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_statistics_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2977);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_subscription_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_subscription_stmt(this);
		}
	}

	public final Create_subscription_stmtContext create_subscription_stmt() throws RecognitionException {
		Create_subscription_stmtContext _localctx = new Create_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_create_subscription_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2979);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_table_stmt(this);
		}
	}

	public final Create_table_stmtContext create_table_stmt() throws RecognitionException {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_create_table_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2981);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_as_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_table_as_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_table_as_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_table_as_stmt(this);
		}
	}

	public final Create_table_as_stmtContext create_table_as_stmt() throws RecognitionException {
		Create_table_as_stmtContext _localctx = new Create_table_as_stmtContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_table_as_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2983);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_tablespace_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_tablespace_stmt(this);
		}
	}

	public final Create_tablespace_stmtContext create_tablespace_stmt() throws RecognitionException {
		Create_tablespace_stmtContext _localctx = new Create_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_create_tablespace_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2985);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_search_config_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_text_search_config_stmt(this);
		}
	}

	public final Create_text_search_config_stmtContext create_text_search_config_stmt() throws RecognitionException {
		Create_text_search_config_stmtContext _localctx = new Create_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_create_text_search_config_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2987);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_search_dict_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_text_search_dict_stmt(this);
		}
	}

	public final Create_text_search_dict_stmtContext create_text_search_dict_stmt() throws RecognitionException {
		Create_text_search_dict_stmtContext _localctx = new Create_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_create_text_search_dict_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2989);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_search_parser_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_text_search_parser_stmt(this);
		}
	}

	public final Create_text_search_parser_stmtContext create_text_search_parser_stmt() throws RecognitionException {
		Create_text_search_parser_stmtContext _localctx = new Create_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_create_text_search_parser_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2991);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_search_template_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_text_search_template_stmt(this);
		}
	}

	public final Create_text_search_template_stmtContext create_text_search_template_stmt() throws RecognitionException {
		Create_text_search_template_stmtContext _localctx = new Create_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_create_text_search_template_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2993);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_transform_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_transform_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_transform_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_transform_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_transform_stmt(this);
		}
	}

	public final Create_transform_stmtContext create_transform_stmt() throws RecognitionException {
		Create_transform_stmtContext _localctx = new Create_transform_stmtContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_create_transform_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2995);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_trigger_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_trigger_stmt(this);
		}
	}

	public final Create_trigger_stmtContext create_trigger_stmt() throws RecognitionException {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_create_trigger_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_type_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_type_stmt(this);
		}
	}

	public final Create_type_stmtContext create_type_stmt() throws RecognitionException {
		Create_type_stmtContext _localctx = new Create_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_create_type_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2999);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_user_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_user_stmt(this);
		}
	}

	public final Create_user_stmtContext create_user_stmt() throws RecognitionException {
		Create_user_stmtContext _localctx = new Create_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_create_user_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3001);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_user_mapping_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_user_mapping_stmt(this);
		}
	}

	public final Create_user_mapping_stmtContext create_user_mapping_stmt() throws RecognitionException {
		Create_user_mapping_stmtContext _localctx = new Create_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_create_user_mapping_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3003);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_view_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSqlParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSqlParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSqlParser.RECURSIVE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSqlParser.WITH, i);
		}
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSqlParser.OPTION, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSqlParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSqlParser.TEMPORARY, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSqlParser.LOCAL, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCreate_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCreate_view_stmt(this);
		}
	}

	public final Create_view_stmtContext create_view_stmt() throws RecognitionException {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_create_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3005);
			match(CREATE);
			setState(3008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3006);
				match(OR);
				setState(3007);
				match(REPLACE);
				}
			}

			setState(3011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(3010);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(3013);
				match(RECURSIVE);
				}
			}

			setState(3016);
			match(VIEW);
			setState(3017);
			((Create_view_stmtContext)_localctx).name = name_();
			setState(3022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3018);
				match(OPEN_PAREN);
				setState(3019);
				name_list();
				setState(3020);
				match(CLOSE_PAREN);
				}
			}

			setState(3029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3024);
				match(WITH);
				setState(3025);
				match(OPEN_PAREN);
				setState(3026);
				option_list();
				setState(3027);
				match(CLOSE_PAREN);
				}
			}

			setState(3031);
			match(AS);
			setState(3034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(3032);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(3033);
				values_stmt();
				}
				break;
			}
			setState(3042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3036);
				match(WITH);
				setState(3038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(3037);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3040);
				match(CHECK);
				setState(3041);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Deallocate_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Deallocate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDeallocate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDeallocate_stmt(this);
		}
	}

	public final Deallocate_stmtContext deallocate_stmt() throws RecognitionException {
		Deallocate_stmtContext _localctx = new Deallocate_stmtContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_deallocate_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Declare_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Declare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDeclare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDeclare_stmt(this);
		}
	}

	public final Declare_stmtContext declare_stmt() throws RecognitionException {
		Declare_stmtContext _localctx = new Declare_stmtContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_declare_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3046);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_stmtContext extends ParserRuleContext {
		public IdentifierContext cursor_name_;
		public TerminalNode DELETE() { return getToken(PostgreSqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(PostgreSqlParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PostgreSqlParser.OF, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDelete_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDelete_stmt(this);
		}
	}

	public final Delete_stmtContext delete_stmt() throws RecognitionException {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_delete_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3048);
				with_clause();
				}
			}

			setState(3051);
			match(DELETE);
			setState(3052);
			match(FROM);
			setState(3054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(3053);
				match(ONLY);
				}
			}

			setState(3056);
			table_name_();
			setState(3058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAR) {
				{
				setState(3057);
				match(STAR);
				}
			}

			setState(3064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217925918706L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7662894626537209859L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3170536334544601087L) != 0)) {
				{
				setState(3061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3060);
					match(AS);
					}
				}

				setState(3063);
				alias();
				}
			}

			setState(3068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3066);
				match(USING);
				setState(3067);
				identifier_list();
				}
			}

			setState(3075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(3070);
				where_clause();
				}
				break;
			case 2:
				{
				{
				setState(3071);
				match(WHERE);
				setState(3072);
				match(CURRENT);
				setState(3073);
				match(OF);
				setState(3074);
				((Delete_stmtContext)_localctx).cursor_name_ = identifier(0);
				}
				}
				break;
			}
			setState(3078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(3077);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Discard_stmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSqlParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSqlParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSqlParser.SEQUENCES, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSqlParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSqlParser.TEMP, 0); }
		public Discard_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discard_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDiscard_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDiscard_stmt(this);
		}
	}

	public final Discard_stmtContext discard_stmt() throws RecognitionException {
		Discard_stmtContext _localctx = new Discard_stmtContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_discard_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3080);
			match(DISCARD);
			setState(3081);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==PLANS || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & 720575940379279361L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_stmtContext extends ParserRuleContext {
		public Drop_access_method_stmtContext drop_access_method_stmt() {
			return getRuleContext(Drop_access_method_stmtContext.class,0);
		}
		public Drop_aggregate_stmtContext drop_aggregate_stmt() {
			return getRuleContext(Drop_aggregate_stmtContext.class,0);
		}
		public Drop_cast_stmtContext drop_cast_stmt() {
			return getRuleContext(Drop_cast_stmtContext.class,0);
		}
		public Drop_collation_stmtContext drop_collation_stmt() {
			return getRuleContext(Drop_collation_stmtContext.class,0);
		}
		public Drop_conversion_stmtContext drop_conversion_stmt() {
			return getRuleContext(Drop_conversion_stmtContext.class,0);
		}
		public Drop_database_stmtContext drop_database_stmt() {
			return getRuleContext(Drop_database_stmtContext.class,0);
		}
		public Drop_domain_stmtContext drop_domain_stmt() {
			return getRuleContext(Drop_domain_stmtContext.class,0);
		}
		public Drop_event_trigger_stmtContext drop_event_trigger_stmt() {
			return getRuleContext(Drop_event_trigger_stmtContext.class,0);
		}
		public Drop_extension_stmtContext drop_extension_stmt() {
			return getRuleContext(Drop_extension_stmtContext.class,0);
		}
		public Drop_foreign_data_wrapper_stmtContext drop_foreign_data_wrapper_stmt() {
			return getRuleContext(Drop_foreign_data_wrapper_stmtContext.class,0);
		}
		public Drop_foreign_table_stmtContext drop_foreign_table_stmt() {
			return getRuleContext(Drop_foreign_table_stmtContext.class,0);
		}
		public Drop_function_stmtContext drop_function_stmt() {
			return getRuleContext(Drop_function_stmtContext.class,0);
		}
		public Drop_group_stmtContext drop_group_stmt() {
			return getRuleContext(Drop_group_stmtContext.class,0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return getRuleContext(Drop_index_stmtContext.class,0);
		}
		public Drop_language_stmtContext drop_language_stmt() {
			return getRuleContext(Drop_language_stmtContext.class,0);
		}
		public Drop_materialized_view_stmtContext drop_materialized_view_stmt() {
			return getRuleContext(Drop_materialized_view_stmtContext.class,0);
		}
		public Drop_operator_stmtContext drop_operator_stmt() {
			return getRuleContext(Drop_operator_stmtContext.class,0);
		}
		public Drop_operator_class_stmtContext drop_operator_class_stmt() {
			return getRuleContext(Drop_operator_class_stmtContext.class,0);
		}
		public Drop_operator_family_stmtContext drop_operator_family_stmt() {
			return getRuleContext(Drop_operator_family_stmtContext.class,0);
		}
		public Drop_owned_stmtContext drop_owned_stmt() {
			return getRuleContext(Drop_owned_stmtContext.class,0);
		}
		public Drop_policy_stmtContext drop_policy_stmt() {
			return getRuleContext(Drop_policy_stmtContext.class,0);
		}
		public Drop_publication_stmtContext drop_publication_stmt() {
			return getRuleContext(Drop_publication_stmtContext.class,0);
		}
		public Drop_role_stmtContext drop_role_stmt() {
			return getRuleContext(Drop_role_stmtContext.class,0);
		}
		public Drop_rule_stmtContext drop_rule_stmt() {
			return getRuleContext(Drop_rule_stmtContext.class,0);
		}
		public Drop_schema_stmtContext drop_schema_stmt() {
			return getRuleContext(Drop_schema_stmtContext.class,0);
		}
		public Drop_sequence_stmtContext drop_sequence_stmt() {
			return getRuleContext(Drop_sequence_stmtContext.class,0);
		}
		public Drop_server_stmtContext drop_server_stmt() {
			return getRuleContext(Drop_server_stmtContext.class,0);
		}
		public Drop_statistics_stmtContext drop_statistics_stmt() {
			return getRuleContext(Drop_statistics_stmtContext.class,0);
		}
		public Drop_subscription_stmtContext drop_subscription_stmt() {
			return getRuleContext(Drop_subscription_stmtContext.class,0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return getRuleContext(Drop_table_stmtContext.class,0);
		}
		public Drop_tablespace_stmtContext drop_tablespace_stmt() {
			return getRuleContext(Drop_tablespace_stmtContext.class,0);
		}
		public Drop_text_search_config_stmtContext drop_text_search_config_stmt() {
			return getRuleContext(Drop_text_search_config_stmtContext.class,0);
		}
		public Drop_text_search_dict_stmtContext drop_text_search_dict_stmt() {
			return getRuleContext(Drop_text_search_dict_stmtContext.class,0);
		}
		public Drop_text_search_parser_stmtContext drop_text_search_parser_stmt() {
			return getRuleContext(Drop_text_search_parser_stmtContext.class,0);
		}
		public Drop_text_search_template_stmtContext drop_text_search_template_stmt() {
			return getRuleContext(Drop_text_search_template_stmtContext.class,0);
		}
		public Drop_transform_stmtContext drop_transform_stmt() {
			return getRuleContext(Drop_transform_stmtContext.class,0);
		}
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return getRuleContext(Drop_trigger_stmtContext.class,0);
		}
		public Drop_type_stmtContext drop_type_stmt() {
			return getRuleContext(Drop_type_stmtContext.class,0);
		}
		public Drop_user_stmtContext drop_user_stmt() {
			return getRuleContext(Drop_user_stmtContext.class,0);
		}
		public Drop_user_mapping_stmtContext drop_user_mapping_stmt() {
			return getRuleContext(Drop_user_mapping_stmtContext.class,0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return getRuleContext(Drop_view_stmtContext.class,0);
		}
		public Drop_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_stmt(this);
		}
	}

	public final Drop_stmtContext drop_stmt() throws RecognitionException {
		Drop_stmtContext _localctx = new Drop_stmtContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_stmt);
		try {
			setState(3124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3083);
				drop_access_method_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3084);
				drop_aggregate_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3085);
				drop_cast_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3086);
				drop_collation_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3087);
				drop_conversion_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3088);
				drop_database_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3089);
				drop_domain_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3090);
				drop_event_trigger_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3091);
				drop_extension_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3092);
				drop_foreign_data_wrapper_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3093);
				drop_foreign_table_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3094);
				drop_function_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3095);
				drop_group_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3096);
				drop_index_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3097);
				drop_language_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3098);
				drop_materialized_view_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3099);
				drop_operator_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3100);
				drop_operator_class_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3101);
				drop_operator_family_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3102);
				drop_owned_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3103);
				drop_policy_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3104);
				drop_publication_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3105);
				drop_role_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3106);
				drop_rule_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3107);
				drop_schema_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3108);
				drop_sequence_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3109);
				drop_server_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3110);
				drop_statistics_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3111);
				drop_subscription_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3112);
				drop_table_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3113);
				drop_tablespace_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3114);
				drop_text_search_config_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3115);
				drop_text_search_dict_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3116);
				drop_text_search_parser_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3117);
				drop_text_search_template_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3118);
				drop_transform_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(3119);
				drop_trigger_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(3120);
				drop_type_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(3121);
				drop_user_stmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(3122);
				drop_user_mapping_stmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(3123);
				drop_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_access_method_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSqlParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSqlParser.METHOD, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_access_method_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_access_method_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_access_method_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_access_method_stmt(this);
		}
	}

	public final Drop_access_method_stmtContext drop_access_method_stmt() throws RecognitionException {
		Drop_access_method_stmtContext _localctx = new Drop_access_method_stmtContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_access_method_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3126);
			match(DROP);
			setState(3127);
			match(ACCESS);
			setState(3128);
			match(METHOD);
			setState(3131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3129);
				match(IF);
				setState(3130);
				match(EXISTS);
				}
			}

			setState(3133);
			((Drop_access_method_stmtContext)_localctx).name = identifier(0);
			setState(3135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3134);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_aggregate_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSqlParser.AGGREGATE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Aggregate_signatureContext aggregate_signature() {
			return getRuleContext(Aggregate_signatureContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Drop_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_aggregate_stmt(this);
		}
	}

	public final Drop_aggregate_stmtContext drop_aggregate_stmt() throws RecognitionException {
		Drop_aggregate_stmtContext _localctx = new Drop_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_aggregate_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3137);
			match(DROP);
			setState(3138);
			match(AGGREGATE);
			setState(3141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3139);
				match(IF);
				setState(3140);
				match(EXISTS);
				}
			}

			setState(3143);
			((Drop_aggregate_stmtContext)_localctx).name = identifier(0);
			setState(3144);
			match(OPEN_PAREN);
			setState(3145);
			aggregate_signature();
			setState(3146);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_cast_stmtContext extends ParserRuleContext {
		public Data_typeContext source_type;
		public IdentifierContext target_type;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSqlParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_cast_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cast_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_cast_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_cast_stmt(this);
		}
	}

	public final Drop_cast_stmtContext drop_cast_stmt() throws RecognitionException {
		Drop_cast_stmtContext _localctx = new Drop_cast_stmtContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_cast_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3148);
			match(DROP);
			setState(3149);
			match(CAST);
			setState(3152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3150);
				match(IF);
				setState(3151);
				match(EXISTS);
				}
			}

			setState(3154);
			match(OPEN_PAREN);
			setState(3155);
			((Drop_cast_stmtContext)_localctx).source_type = data_type();
			setState(3156);
			match(AS);
			setState(3157);
			((Drop_cast_stmtContext)_localctx).target_type = identifier(0);
			setState(3158);
			match(CLOSE_PAREN);
			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3159);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_collation_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSqlParser.COLLATION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_collation_stmt(this);
		}
	}

	public final Drop_collation_stmtContext drop_collation_stmt() throws RecognitionException {
		Drop_collation_stmtContext _localctx = new Drop_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_drop_collation_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3162);
			match(DROP);
			setState(3163);
			match(COLLATION);
			setState(3166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3164);
				match(IF);
				setState(3165);
				match(EXISTS);
				}
			}

			setState(3168);
			((Drop_collation_stmtContext)_localctx).names = identifier_list();
			setState(3170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3169);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_conversion_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSqlParser.CONVERSION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_conversion_stmt(this);
		}
	}

	public final Drop_conversion_stmtContext drop_conversion_stmt() throws RecognitionException {
		Drop_conversion_stmtContext _localctx = new Drop_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_conversion_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3172);
			match(DROP);
			setState(3173);
			match(CONVERSION);
			setState(3176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3174);
				match(IF);
				setState(3175);
				match(EXISTS);
				}
			}

			setState(3178);
			((Drop_conversion_stmtContext)_localctx).name = identifier(0);
			setState(3180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3179);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_database_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSqlParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Drop_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_database_stmt(this);
		}
	}

	public final Drop_database_stmtContext drop_database_stmt() throws RecognitionException {
		Drop_database_stmtContext _localctx = new Drop_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_drop_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3182);
			match(DROP);
			setState(3183);
			match(DATABASE);
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3184);
				match(IF);
				setState(3185);
				match(EXISTS);
				}
			}

			setState(3188);
			((Drop_database_stmtContext)_localctx).name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_domain_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSqlParser.DOMAIN, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_domain_stmt(this);
		}
	}

	public final Drop_domain_stmtContext drop_domain_stmt() throws RecognitionException {
		Drop_domain_stmtContext _localctx = new Drop_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_domain_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3190);
			match(DROP);
			setState(3191);
			match(DOMAIN);
			setState(3194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3192);
				match(IF);
				setState(3193);
				match(EXISTS);
				}
			}

			setState(3196);
			((Drop_domain_stmtContext)_localctx).names = identifier_list();
			setState(3198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3197);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_event_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSqlParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSqlParser.TRIGGER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_event_trigger_stmt(this);
		}
	}

	public final Drop_event_trigger_stmtContext drop_event_trigger_stmt() throws RecognitionException {
		Drop_event_trigger_stmtContext _localctx = new Drop_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_event_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3200);
			match(DROP);
			setState(3201);
			match(EVENT);
			setState(3202);
			match(TRIGGER);
			setState(3205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3203);
				match(IF);
				setState(3204);
				match(EXISTS);
				}
			}

			setState(3207);
			((Drop_event_trigger_stmtContext)_localctx).name = identifier(0);
			setState(3209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3208);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_extension_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSqlParser.EXTENSION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_extension_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_extension_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_extension_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_extension_stmt(this);
		}
	}

	public final Drop_extension_stmtContext drop_extension_stmt() throws RecognitionException {
		Drop_extension_stmtContext _localctx = new Drop_extension_stmtContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_drop_extension_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3211);
			match(DROP);
			setState(3212);
			match(EXTENSION);
			setState(3215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3213);
				match(IF);
				setState(3214);
				match(EXISTS);
				}
			}

			setState(3217);
			((Drop_extension_stmtContext)_localctx).names = identifier_list();
			setState(3219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3218);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_foreign_data_wrapper_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSqlParser.WRAPPER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_foreign_data_wrapper_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_foreign_data_wrapper_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_foreign_data_wrapper_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_foreign_data_wrapper_stmt(this);
		}
	}

	public final Drop_foreign_data_wrapper_stmtContext drop_foreign_data_wrapper_stmt() throws RecognitionException {
		Drop_foreign_data_wrapper_stmtContext _localctx = new Drop_foreign_data_wrapper_stmtContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_drop_foreign_data_wrapper_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3221);
			match(DROP);
			setState(3222);
			match(FOREIGN);
			setState(3223);
			match(DATA);
			setState(3224);
			match(WRAPPER);
			setState(3227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3225);
				match(IF);
				setState(3226);
				match(EXISTS);
				}
			}

			setState(3229);
			((Drop_foreign_data_wrapper_stmtContext)_localctx).names = identifier_list();
			setState(3231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3230);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_foreign_table_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSqlParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_foreign_table_stmt(this);
		}
	}

	public final Drop_foreign_table_stmtContext drop_foreign_table_stmt() throws RecognitionException {
		Drop_foreign_table_stmtContext _localctx = new Drop_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_foreign_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3233);
			match(DROP);
			setState(3234);
			match(FOREIGN);
			setState(3235);
			match(TABLE);
			setState(3238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3236);
				match(IF);
				setState(3237);
				match(EXISTS);
				}
			}

			setState(3240);
			((Drop_foreign_table_stmtContext)_localctx).names = identifier_list();
			setState(3242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3241);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_function_stmtContext extends ParserRuleContext {
		public Func_sig_listContext functions;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSqlParser.FUNCTION, 0); }
		public Func_sig_listContext func_sig_list() {
			return getRuleContext(Func_sig_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_function_stmt(this);
		}
	}

	public final Drop_function_stmtContext drop_function_stmt() throws RecognitionException {
		Drop_function_stmtContext _localctx = new Drop_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_drop_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3244);
			match(DROP);
			setState(3245);
			match(FUNCTION);
			setState(3248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3246);
				match(IF);
				setState(3247);
				match(EXISTS);
				}
			}

			setState(3250);
			((Drop_function_stmtContext)_localctx).functions = func_sig_list();
			setState(3252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3251);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_group_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSqlParser.GROUP, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Drop_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_group_stmt(this);
		}
	}

	public final Drop_group_stmtContext drop_group_stmt() throws RecognitionException {
		Drop_group_stmtContext _localctx = new Drop_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_drop_group_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			match(DROP);
			setState(3255);
			match(GROUP);
			setState(3258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3256);
				match(IF);
				setState(3257);
				match(EXISTS);
				}
			}

			setState(3260);
			((Drop_group_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_index_stmtContext extends ParserRuleContext {
		public Name_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSqlParser.INDEX, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSqlParser.CONCURRENTLY, 0); }
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_index_stmt(this);
		}
	}

	public final Drop_index_stmtContext drop_index_stmt() throws RecognitionException {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_drop_index_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3262);
			match(DROP);
			setState(3263);
			match(INDEX);
			setState(3265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(3264);
				match(CONCURRENTLY);
				}
			}

			setState(3269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3267);
				match(IF);
				setState(3268);
				match(EXISTS);
				}
			}

			setState(3271);
			((Drop_index_stmtContext)_localctx).names = name_list();
			setState(3273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3272);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_language_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSqlParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSqlParser.PROCEDURAL, 0); }
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_language_stmt(this);
		}
	}

	public final Drop_language_stmtContext drop_language_stmt() throws RecognitionException {
		Drop_language_stmtContext _localctx = new Drop_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_drop_language_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3275);
			match(DROP);
			setState(3277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(3276);
				match(PROCEDURAL);
				}
			}

			setState(3279);
			match(LANGUAGE);
			setState(3282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3280);
				match(IF);
				setState(3281);
				match(EXISTS);
				}
			}

			setState(3284);
			((Drop_language_stmtContext)_localctx).name = identifier(0);
			setState(3286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3285);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_materialized_view_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSqlParser.VIEW, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_materialized_view_stmt(this);
		}
	}

	public final Drop_materialized_view_stmtContext drop_materialized_view_stmt() throws RecognitionException {
		Drop_materialized_view_stmtContext _localctx = new Drop_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_materialized_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3288);
			match(DROP);
			setState(3289);
			match(MATERIALIZED);
			setState(3290);
			match(VIEW);
			setState(3293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3291);
				match(IF);
				setState(3292);
				match(EXISTS);
				}
			}

			setState(3295);
			((Drop_materialized_view_stmtContext)_localctx).names = identifier_list();
			setState(3297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3296);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_operator_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Drop_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_operator_stmt(this);
		}
	}

	public final Drop_operator_stmtContext drop_operator_stmt() throws RecognitionException {
		Drop_operator_stmtContext _localctx = new Drop_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_drop_operator_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3299);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_operator_class_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSqlParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSqlParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_operator_class_stmt(this);
		}
	}

	public final Drop_operator_class_stmtContext drop_operator_class_stmt() throws RecognitionException {
		Drop_operator_class_stmtContext _localctx = new Drop_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_drop_operator_class_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3301);
			match(DROP);
			setState(3302);
			match(OPERATOR);
			setState(3303);
			match(CLASS);
			setState(3306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3304);
				match(IF);
				setState(3305);
				match(EXISTS);
				}
			}

			setState(3308);
			((Drop_operator_class_stmtContext)_localctx).name = identifier(0);
			setState(3309);
			match(USING);
			setState(3310);
			index_method();
			setState(3312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3311);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_operator_family_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSqlParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSqlParser.FAMILY, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_operator_family_stmt(this);
		}
	}

	public final Drop_operator_family_stmtContext drop_operator_family_stmt() throws RecognitionException {
		Drop_operator_family_stmtContext _localctx = new Drop_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_drop_operator_family_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3314);
			match(DROP);
			setState(3315);
			match(OPERATOR);
			setState(3316);
			match(FAMILY);
			setState(3319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3317);
				match(IF);
				setState(3318);
				match(EXISTS);
				}
			}

			setState(3321);
			((Drop_operator_family_stmtContext)_localctx).name = identifier(0);
			setState(3322);
			match(USING);
			setState(3323);
			index_method();
			setState(3325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3324);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_owned_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public Role_name_listContext role_name_list() {
			return getRuleContext(Role_name_listContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_owned_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_owned_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_owned_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_owned_stmt(this);
		}
	}

	public final Drop_owned_stmtContext drop_owned_stmt() throws RecognitionException {
		Drop_owned_stmtContext _localctx = new Drop_owned_stmtContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_drop_owned_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3327);
			match(DROP);
			setState(3328);
			match(OWNED);
			setState(3329);
			match(BY);
			setState(3330);
			role_name_list();
			setState(3332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3331);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_policy_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSqlParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_policy_stmt(this);
		}
	}

	public final Drop_policy_stmtContext drop_policy_stmt() throws RecognitionException {
		Drop_policy_stmtContext _localctx = new Drop_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_drop_policy_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334);
			match(DROP);
			setState(3335);
			match(POLICY);
			setState(3338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3336);
				match(IF);
				setState(3337);
				match(EXISTS);
				}
			}

			setState(3340);
			((Drop_policy_stmtContext)_localctx).name = identifier(0);
			setState(3341);
			match(ON);
			setState(3342);
			((Drop_policy_stmtContext)_localctx).table_name = identifier(0);
			setState(3344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3343);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_publication_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSqlParser.PUBLICATION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_publication_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_publication_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_publication_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_publication_stmt(this);
		}
	}

	public final Drop_publication_stmtContext drop_publication_stmt() throws RecognitionException {
		Drop_publication_stmtContext _localctx = new Drop_publication_stmtContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_drop_publication_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3346);
			match(DROP);
			setState(3347);
			match(PUBLICATION);
			setState(3350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3348);
				match(IF);
				setState(3349);
				match(EXISTS);
				}
			}

			setState(3352);
			((Drop_publication_stmtContext)_localctx).names = identifier_list();
			setState(3354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3353);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_role_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSqlParser.ROLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Drop_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_role_stmt(this);
		}
	}

	public final Drop_role_stmtContext drop_role_stmt() throws RecognitionException {
		Drop_role_stmtContext _localctx = new Drop_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_drop_role_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3356);
			match(DROP);
			setState(3357);
			match(ROLE);
			setState(3360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3358);
				match(IF);
				setState(3359);
				match(EXISTS);
				}
			}

			setState(3362);
			((Drop_role_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_rule_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(PostgreSqlParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_rule_stmt(this);
		}
	}

	public final Drop_rule_stmtContext drop_rule_stmt() throws RecognitionException {
		Drop_rule_stmtContext _localctx = new Drop_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_drop_rule_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3364);
			match(DROP);
			setState(3365);
			match(RULE);
			setState(3368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3366);
				match(IF);
				setState(3367);
				match(EXISTS);
				}
			}

			setState(3370);
			((Drop_rule_stmtContext)_localctx).name = name_();
			setState(3371);
			match(ON);
			setState(3372);
			((Drop_rule_stmtContext)_localctx).table_name = identifier(0);
			setState(3374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3373);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_schema_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_schema_stmt(this);
		}
	}

	public final Drop_schema_stmtContext drop_schema_stmt() throws RecognitionException {
		Drop_schema_stmtContext _localctx = new Drop_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_drop_schema_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3376);
			match(DROP);
			setState(3377);
			match(SCHEMA);
			setState(3380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3378);
				match(IF);
				setState(3379);
				match(EXISTS);
				}
			}

			setState(3382);
			((Drop_schema_stmtContext)_localctx).names = identifier_list();
			setState(3384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3383);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_sequence_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSqlParser.SEQUENCE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_sequence_stmt(this);
		}
	}

	public final Drop_sequence_stmtContext drop_sequence_stmt() throws RecognitionException {
		Drop_sequence_stmtContext _localctx = new Drop_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_drop_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3386);
			match(DROP);
			setState(3387);
			match(SEQUENCE);
			setState(3390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3388);
				match(IF);
				setState(3389);
				match(EXISTS);
				}
			}

			setState(3392);
			((Drop_sequence_stmtContext)_localctx).names = identifier_list();
			setState(3394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3393);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_server_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSqlParser.SERVER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_server_stmt(this);
		}
	}

	public final Drop_server_stmtContext drop_server_stmt() throws RecognitionException {
		Drop_server_stmtContext _localctx = new Drop_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_drop_server_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			match(DROP);
			setState(3397);
			match(SERVER);
			setState(3400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3398);
				match(IF);
				setState(3399);
				match(EXISTS);
				}
			}

			setState(3402);
			((Drop_server_stmtContext)_localctx).names = identifier_list();
			setState(3404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3403);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_statistics_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSqlParser.STATISTICS, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Drop_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_statistics_stmt(this);
		}
	}

	public final Drop_statistics_stmtContext drop_statistics_stmt() throws RecognitionException {
		Drop_statistics_stmtContext _localctx = new Drop_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_drop_statistics_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3406);
			match(DROP);
			setState(3407);
			match(STATISTICS);
			setState(3410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3408);
				match(IF);
				setState(3409);
				match(EXISTS);
				}
			}

			setState(3412);
			((Drop_statistics_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_subscription_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSqlParser.SUBSCRIPTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_subscription_stmt(this);
		}
	}

	public final Drop_subscription_stmtContext drop_subscription_stmt() throws RecognitionException {
		Drop_subscription_stmtContext _localctx = new Drop_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_drop_subscription_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3414);
			match(DROP);
			setState(3415);
			match(SUBSCRIPTION);
			setState(3418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3416);
				match(IF);
				setState(3417);
				match(EXISTS);
				}
			}

			setState(3420);
			((Drop_subscription_stmtContext)_localctx).name = identifier(0);
			setState(3422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3421);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_table_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_table_stmt(this);
		}
	}

	public final Drop_table_stmtContext drop_table_stmt() throws RecognitionException {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_drop_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3424);
			match(DROP);
			setState(3425);
			match(TABLE);
			setState(3428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3426);
				match(IF);
				setState(3427);
				match(EXISTS);
				}
			}

			setState(3430);
			((Drop_table_stmtContext)_localctx).names = identifier_list();
			setState(3432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3431);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_tablespace_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSqlParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Drop_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_tablespace_stmt(this);
		}
	}

	public final Drop_tablespace_stmtContext drop_tablespace_stmt() throws RecognitionException {
		Drop_tablespace_stmtContext _localctx = new Drop_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_drop_tablespace_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3434);
			match(DROP);
			setState(3435);
			match(TABLESPACE);
			setState(3438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3436);
				match(IF);
				setState(3437);
				match(EXISTS);
				}
			}

			setState(3440);
			((Drop_tablespace_stmtContext)_localctx).name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_search_config_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSqlParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSqlParser.CONFIGURATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_text_search_config_stmt(this);
		}
	}

	public final Drop_text_search_config_stmtContext drop_text_search_config_stmt() throws RecognitionException {
		Drop_text_search_config_stmtContext _localctx = new Drop_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_drop_text_search_config_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3442);
			match(DROP);
			setState(3443);
			match(TEXT);
			setState(3444);
			match(SEARCH);
			setState(3445);
			match(CONFIGURATION);
			setState(3448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3446);
				match(IF);
				setState(3447);
				match(EXISTS);
				}
			}

			setState(3450);
			((Drop_text_search_config_stmtContext)_localctx).name = identifier(0);
			setState(3452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3451);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_search_dict_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSqlParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSqlParser.DICTIONARY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_text_search_dict_stmt(this);
		}
	}

	public final Drop_text_search_dict_stmtContext drop_text_search_dict_stmt() throws RecognitionException {
		Drop_text_search_dict_stmtContext _localctx = new Drop_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_drop_text_search_dict_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3454);
			match(DROP);
			setState(3455);
			match(TEXT);
			setState(3456);
			match(SEARCH);
			setState(3457);
			match(DICTIONARY);
			setState(3460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3458);
				match(IF);
				setState(3459);
				match(EXISTS);
				}
			}

			setState(3462);
			((Drop_text_search_dict_stmtContext)_localctx).name = identifier(0);
			setState(3464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3463);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_search_parser_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSqlParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSqlParser.PARSER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_text_search_parser_stmt(this);
		}
	}

	public final Drop_text_search_parser_stmtContext drop_text_search_parser_stmt() throws RecognitionException {
		Drop_text_search_parser_stmtContext _localctx = new Drop_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_drop_text_search_parser_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3466);
			match(DROP);
			setState(3467);
			match(TEXT);
			setState(3468);
			match(SEARCH);
			setState(3469);
			match(PARSER);
			setState(3472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3470);
				match(IF);
				setState(3471);
				match(EXISTS);
				}
			}

			setState(3474);
			((Drop_text_search_parser_stmtContext)_localctx).name = identifier(0);
			setState(3476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3475);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_search_template_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSqlParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSqlParser.TEMPLATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_text_search_template_stmt(this);
		}
	}

	public final Drop_text_search_template_stmtContext drop_text_search_template_stmt() throws RecognitionException {
		Drop_text_search_template_stmtContext _localctx = new Drop_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_drop_text_search_template_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3478);
			match(DROP);
			setState(3479);
			match(TEXT);
			setState(3480);
			match(SEARCH);
			setState(3481);
			match(TEMPLATE);
			setState(3484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3482);
				match(IF);
				setState(3483);
				match(EXISTS);
				}
			}

			setState(3486);
			((Drop_text_search_template_stmtContext)_localctx).name = identifier(0);
			setState(3488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3487);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_transform_stmtContext extends ParserRuleContext {
		public IdentifierContext type_name_;
		public IdentifierContext lang_name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSqlParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSqlParser.LANGUAGE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Drop_transform_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_transform_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_transform_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_transform_stmt(this);
		}
	}

	public final Drop_transform_stmtContext drop_transform_stmt() throws RecognitionException {
		Drop_transform_stmtContext _localctx = new Drop_transform_stmtContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_drop_transform_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3490);
			match(DROP);
			setState(3491);
			match(TRANSFORM);
			setState(3494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3492);
				match(IF);
				setState(3493);
				match(EXISTS);
				}
			}

			setState(3496);
			match(FOR);
			setState(3497);
			((Drop_transform_stmtContext)_localctx).type_name_ = identifier(0);
			setState(3498);
			match(LANGUAGE);
			setState(3499);
			((Drop_transform_stmtContext)_localctx).lang_name = identifier(0);
			setState(3500);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_trigger_stmt(this);
		}
	}

	public final Drop_trigger_stmtContext drop_trigger_stmt() throws RecognitionException {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_drop_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3502);
			match(DROP);
			setState(3503);
			match(TRIGGER);
			setState(3506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3504);
				match(IF);
				setState(3505);
				match(EXISTS);
				}
			}

			setState(3508);
			((Drop_trigger_stmtContext)_localctx).name = identifier(0);
			setState(3509);
			match(ON);
			setState(3510);
			((Drop_trigger_stmtContext)_localctx).table_name = identifier(0);
			setState(3512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3511);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_type_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSqlParser.TYPE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_type_stmt(this);
		}
	}

	public final Drop_type_stmtContext drop_type_stmt() throws RecognitionException {
		Drop_type_stmtContext _localctx = new Drop_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_drop_type_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3514);
			match(DROP);
			setState(3515);
			match(TYPE);
			setState(3518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3516);
				match(IF);
				setState(3517);
				match(EXISTS);
				}
			}

			setState(3520);
			((Drop_type_stmtContext)_localctx).names = identifier_list();
			setState(3522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3521);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_user_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSqlParser.USER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Drop_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_user_stmt(this);
		}
	}

	public final Drop_user_stmtContext drop_user_stmt() throws RecognitionException {
		Drop_user_stmtContext _localctx = new Drop_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_drop_user_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3524);
			match(DROP);
			setState(3525);
			match(USER);
			setState(3528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3526);
				match(IF);
				setState(3527);
				match(EXISTS);
				}
			}

			setState(3530);
			((Drop_user_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_user_mapping_stmtContext extends ParserRuleContext {
		public Name_Context user_name;
		public IdentifierContext server_name;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public List<TerminalNode> USER() { return getTokens(PostgreSqlParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSqlParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(PostgreSqlParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSqlParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSqlParser.PUBLIC, 0); }
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Drop_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_user_mapping_stmt(this);
		}
	}

	public final Drop_user_mapping_stmtContext drop_user_mapping_stmt() throws RecognitionException {
		Drop_user_mapping_stmtContext _localctx = new Drop_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_drop_user_mapping_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			match(DROP);
			setState(3533);
			match(USER);
			setState(3534);
			match(MAPPING);
			setState(3537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3535);
				match(IF);
				setState(3536);
				match(EXISTS);
				}
			}

			setState(3539);
			match(FOR);
			setState(3545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(3540);
				((Drop_user_mapping_stmtContext)_localctx).user_name = name_();
				}
				break;
			case 2:
				{
				setState(3541);
				match(USER);
				}
				break;
			case 3:
				{
				setState(3542);
				match(CURRENT_USER);
				}
				break;
			case 4:
				{
				setState(3543);
				match(SESSION_USER);
				}
				break;
			case 5:
				{
				setState(3544);
				match(PUBLIC);
				}
				break;
			}
			setState(3547);
			match(SERVER);
			setState(3548);
			((Drop_user_mapping_stmtContext)_localctx).server_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_view_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSqlParser.VIEW, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterDrop_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitDrop_view_stmt(this);
		}
	}

	public final Drop_view_stmtContext drop_view_stmt() throws RecognitionException {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_drop_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3550);
			match(DROP);
			setState(3551);
			match(VIEW);
			setState(3554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3552);
				match(IF);
				setState(3553);
				match(EXISTS);
				}
			}

			setState(3556);
			((Drop_view_stmtContext)_localctx).names = identifier_list();
			setState(3558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3557);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode EXECUTE() { return getToken(PostgreSqlParser.EXECUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Execute_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterExecute_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitExecute_stmt(this);
		}
	}

	public final Execute_stmtContext execute_stmt() throws RecognitionException {
		Execute_stmtContext _localctx = new Execute_stmtContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_execute_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3560);
			match(EXECUTE);
			setState(3561);
			((Execute_stmtContext)_localctx).name = identifier(0);
			setState(3563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3562);
				expr_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_stmtContext extends ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public Execute_stmtContext execute_stmt() {
			return getRuleContext(Execute_stmtContext.class,0);
		}
		public Declare_stmtContext declare_stmt() {
			return getRuleContext(Declare_stmtContext.class,0);
		}
		public Create_table_as_stmtContext create_table_as_stmt() {
			return getRuleContext(Create_table_as_stmtContext.class,0);
		}
		public Create_materialized_view_stmtContext create_materialized_view_stmt() {
			return getRuleContext(Create_materialized_view_stmtContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(PostgreSqlParser.EXPLAIN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<Explain_parameterContext> explain_parameter() {
			return getRuleContexts(Explain_parameterContext.class);
		}
		public Explain_parameterContext explain_parameter(int i) {
			return getRuleContext(Explain_parameterContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSqlParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSqlParser.VERBOSE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Explain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterExplain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitExplain_stmt(this);
		}
	}

	public final Explain_stmtContext explain_stmt() throws RecognitionException {
		Explain_stmtContext _localctx = new Explain_stmtContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_explain_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				{
				setState(3565);
				match(EXPLAIN);
				setState(3567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYZE) {
					{
					setState(3566);
					match(ANALYZE);
					}
				}

				setState(3570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(3569);
					match(VERBOSE);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(3572);
				match(EXPLAIN);
				setState(3573);
				match(OPEN_PAREN);
				setState(3574);
				explain_parameter();
				setState(3579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3575);
					match(COMMA);
					setState(3576);
					explain_parameter();
					}
					}
					setState(3581);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3582);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
			setState(3595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				setState(3586);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(3587);
				insert_stmt();
				}
				break;
			case 3:
				{
				setState(3588);
				update_stmt();
				}
				break;
			case 4:
				{
				setState(3589);
				delete_stmt();
				}
				break;
			case 5:
				{
				setState(3590);
				values_stmt();
				}
				break;
			case 6:
				{
				setState(3591);
				execute_stmt();
				}
				break;
			case 7:
				{
				setState(3592);
				declare_stmt();
				}
				break;
			case 8:
				{
				setState(3593);
				create_table_as_stmt();
				}
				break;
			case 9:
				{
				setState(3594);
				create_materialized_view_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fetch_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Fetch_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFetch_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFetch_stmt(this);
		}
	}

	public final Fetch_stmtContext fetch_stmt() throws RecognitionException {
		Fetch_stmtContext _localctx = new Fetch_stmtContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_fetch_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3597);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Grant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterGrant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitGrant_stmt(this);
		}
	}

	public final Grant_stmtContext grant_stmt() throws RecognitionException {
		Grant_stmtContext _localctx = new Grant_stmtContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_grant_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3599);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Import_foreign_schema_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Import_foreign_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_foreign_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterImport_foreign_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitImport_foreign_schema_stmt(this);
		}
	}

	public final Import_foreign_schema_stmtContext import_foreign_schema_stmt() throws RecognitionException {
		Import_foreign_schema_stmtContext _localctx = new Import_foreign_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_import_foreign_schema_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3601);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_stmtContext extends ParserRuleContext {
		public IdentifierContext alias_;
		public TerminalNode INSERT() { return getToken(PostgreSqlParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSqlParser.INTO, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSqlParser.VALUES, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSqlParser.OVERRIDING, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSqlParser.VALUE, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSqlParser.ON, i);
		}
		public TerminalNode CONFLICT() { return getToken(PostgreSqlParser.CONFLICT, 0); }
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSqlParser.CONSTRAINT, 0); }
		public List<Where_clauseContext> where_clause() {
			return getRuleContexts(Where_clauseContext.class);
		}
		public Where_clauseContext where_clause(int i) {
			return getRuleContext(Where_clauseContext.class,i);
		}
		public TerminalNode SYSTEM() { return getToken(PostgreSqlParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(PostgreSqlParser.USER, 0); }
		public TerminalNode DO() { return getToken(PostgreSqlParser.DO, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSqlParser.NOTHING, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public Updater_clauseContext updater_clause() {
			return getRuleContext(Updater_clauseContext.class,0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterInsert_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitInsert_stmt(this);
		}
	}

	public final Insert_stmtContext insert_stmt() throws RecognitionException {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_insert_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3603);
				with_clause();
				}
			}

			setState(3606);
			match(INSERT);
			setState(3607);
			match(INTO);
			setState(3608);
			table_name_();
			setState(3611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3609);
				match(AS);
				setState(3610);
				((Insert_stmtContext)_localctx).alias_ = identifier(0);
				}
			}

			setState(3617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(3613);
				match(OPEN_PAREN);
				setState(3614);
				name_list();
				setState(3615);
				match(CLOSE_PAREN);
				}
				break;
			}
			setState(3624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERRIDING) {
				{
				setState(3619);
				match(OVERRIDING);
				setState(3621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM || _la==USER) {
					{
					setState(3620);
					_la = _input.LA(1);
					if ( !(_la==SYSTEM || _la==USER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3623);
				match(VALUE);
				}
			}

			setState(3630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				setState(3626);
				match(DEFAULT);
				setState(3627);
				match(VALUES);
				}
				break;
			case 2:
				{
				setState(3628);
				select_stmt();
				}
				break;
			case 3:
				{
				setState(3629);
				values_stmt();
				}
				break;
			}
			setState(3659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3632);
				match(ON);
				setState(3633);
				match(CONFLICT);
				setState(3638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(3634);
					match(OPEN_PAREN);
					setState(3635);
					column_name();
					setState(3636);
					match(CLOSE_PAREN);
					}
				}

				setState(3643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3640);
					match(ON);
					setState(3641);
					match(CONSTRAINT);
					setState(3642);
					column_name();
					}
				}

				setState(3646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(3645);
					where_clause();
					}
				}

				setState(3657);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					{
					setState(3648);
					match(DO);
					setState(3649);
					match(NOTHING);
					}
					}
					break;
				case 2:
					{
					{
					setState(3650);
					match(DO);
					setState(3651);
					match(UPDATE);
					setState(3652);
					match(SET);
					setState(3653);
					updater_clause();
					setState(3655);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE) {
						{
						setState(3654);
						where_clause();
						}
					}

					}
					}
					break;
				}
				}
			}

			setState(3662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(3661);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Listen_stmtContext extends ParserRuleContext {
		public IdentifierContext channel;
		public TerminalNode LISTEN() { return getToken(PostgreSqlParser.LISTEN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Listen_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listen_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterListen_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitListen_stmt(this);
		}
	}

	public final Listen_stmtContext listen_stmt() throws RecognitionException {
		Listen_stmtContext _localctx = new Listen_stmtContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_listen_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3664);
			match(LISTEN);
			setState(3665);
			((Listen_stmtContext)_localctx).channel = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Load_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Load_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterLoad_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitLoad_stmt(this);
		}
	}

	public final Load_stmtContext load_stmt() throws RecognitionException {
		Load_stmtContext _localctx = new Load_stmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_load_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public TerminalNode LOCK() { return getToken(PostgreSqlParser.LOCK, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public TerminalNode IN() { return getToken(PostgreSqlParser.IN, 0); }
		public TerminalNode MODE() { return getToken(PostgreSqlParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSqlParser.NOWAIT, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSqlParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSqlParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSqlParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public Lock_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterLock_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitLock_stmt(this);
		}
	}

	public final Lock_stmtContext lock_stmt() throws RecognitionException {
		Lock_stmtContext _localctx = new Lock_stmtContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_lock_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3669);
			match(LOCK);
			setState(3671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(3670);
				match(TABLE);
				}
			}

			setState(3674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(3673);
				match(ONLY);
				}
			}

			setState(3676);
			((Lock_stmtContext)_localctx).name = name_();
			setState(3678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAR) {
				{
				setState(3677);
				match(STAR);
				}
			}

			setState(3700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3680);
				match(IN);
				setState(3697);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(3681);
					match(ACCESS);
					setState(3682);
					match(SHARE);
					}
					break;
				case 2:
					{
					setState(3683);
					match(ROW);
					setState(3684);
					match(SHARE);
					}
					break;
				case 3:
					{
					setState(3685);
					match(ROW);
					setState(3686);
					match(EXCLUSIVE);
					}
					break;
				case 4:
					{
					setState(3687);
					match(SHARE);
					setState(3688);
					match(UPDATE);
					setState(3689);
					match(EXCLUSIVE);
					}
					break;
				case 5:
					{
					setState(3690);
					match(SHARE);
					}
					break;
				case 6:
					{
					setState(3691);
					match(SHARE);
					setState(3692);
					match(ROW);
					setState(3693);
					match(EXCLUSIVE);
					}
					break;
				case 7:
					{
					setState(3694);
					match(EXCLUSIVE);
					}
					break;
				case 8:
					{
					setState(3695);
					match(ACCESS);
					setState(3696);
					match(EXCLUSIVE);
					}
					break;
				}
				setState(3699);
				match(MODE);
				}
			}

			setState(3703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(3702);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Move_stmtContext extends ParserRuleContext {
		public Name_Context cursor_name;
		public TerminalNode MOVE() { return getToken(PostgreSqlParser.MOVE, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode NEXT() { return getToken(PostgreSqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSqlParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PostgreSqlParser.LAST, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSqlParser.ABSOLUTE, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSqlParser.INTEGER, 0); }
		public TerminalNode RELATIVE() { return getToken(PostgreSqlParser.RELATIVE, 0); }
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral() {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSqlParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSqlParser.BACKWARD, 0); }
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(PostgreSqlParser.IN, 0); }
		public Move_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterMove_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitMove_stmt(this);
		}
	}

	public final Move_stmtContext move_stmt() throws RecognitionException {
		Move_stmtContext _localctx = new Move_stmtContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_move_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3705);
			match(MOVE);
			setState(3731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3726);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(3706);
					match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(3707);
					match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(3708);
					match(FIRST);
					}
					break;
				case LAST:
					{
					setState(3709);
					match(LAST);
					}
					break;
				case ABSOLUTE:
					{
					setState(3710);
					match(ABSOLUTE);
					setState(3711);
					match(INTEGER);
					}
					break;
				case RELATIVE:
					{
					setState(3712);
					match(RELATIVE);
					setState(3713);
					parameterOrIntegerLiteral();
					}
					break;
				case COLON:
				case INTEGER_LITERAL:
				case QMARK:
					{
					setState(3714);
					parameterOrIntegerLiteral();
					}
					break;
				case ALL:
					{
					setState(3715);
					match(ALL);
					}
					break;
				case FORWARD:
					{
					setState(3716);
					match(FORWARD);
					setState(3719);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COLON:
					case INTEGER_LITERAL:
					case QMARK:
						{
						setState(3717);
						parameterOrIntegerLiteral();
						}
						break;
					case ALL:
						{
						setState(3718);
						match(ALL);
						}
						break;
					case WHITESPACE:
					case A_:
					case ABORT:
					case ABS:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADA:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALLOCATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ANY:
					case ARE:
					case ASENSITIVE:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATOMIC:
					case ATTRIBUTE:
					case ATTRIBUTES:
					case AVG:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BIT_LENGTH:
					case BLOB:
					case BOOLEAN:
					case BREADTH:
					case BY:
					case C_:
					case CACHE:
					case CALL:
					case CALLED:
					case CARDINALITY:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CATALOG_NAME:
					case CEIL:
					case CEILING:
					case CHAIN:
					case CHAR:
					case CHAR_LENGTH:
					case CHARACTER:
					case CHARACTER_LENGTH:
					case CHARACTER_SET_CATALOG:
					case CHARACTER_SET_NAME:
					case CHARACTER_SET_SCHEMA:
					case CHARACTERISTICS:
					case CHARACTERS:
					case CHECKPOINT:
					case CLASS:
					case CLASS_ORIGIN:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COALESCE:
					case COBOL:
					case COLLATION_CATALOG:
					case COLLATION_NAME:
					case COLLATION_SCHEMA:
					case COLLECT:
					case COLUMN_NAME:
					case COMMAND_FUNCTION:
					case COMMAND_FUNCTION_CODE:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONDITION:
					case CONDITION_NUMBER:
					case CONNECT:
					case CONNECTION:
					case CONNECTION_NAME:
					case CONSTRAINT_CATALOG:
					case CONSTRAINT_NAME:
					case CONSTRAINT_SCHEMA:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTAINS:
					case CONTINUE:
					case CONVERSION:
					case CONVERT:
					case COPY:
					case CORR:
					case CORRESPONDING:
					case COUNT:
					case COVAR_POP:
					case COVAR_SAMP:
					case CSV:
					case CUBE:
					case CUME_DIST:
					case CURRENT:
					case CURRENT_DEFAULT_TRANSFORM_GROUP:
					case CURRENT_PATH:
					case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
					case CURSOR:
					case CURSOR_NAME:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DATETIME_INTERVAL_CODE:
					case DATETIME_INTERVAL_PRECISION:
					case DAY:
					case DEALLOCATE:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINED:
					case DEFINER:
					case DEGREE:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DENSE_RANK:
					case DEPTH:
					case DEREF:
					case DERIVED:
					case DESCRIBE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DIAGNOSTICS:
					case DICTIONARY:
					case DISCONNECT:
					case DISPATCH:
					case DOMAIN:
					case DOUBLE:
					case DYNAMIC:
					case DYNAMIC_FUNCTION:
					case DYNAMIC_FUNCTION_CODE:
					case EACH:
					case ELEMENT:
					case ENCODING:
					case ENCRYPTED:
					case END:
					case EQUALS:
					case ESCAPE:
					case EVERY:
					case EXCEPTION:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXEC:
					case EXECUTE:
					case EXISTS:
					case EXP:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case EXTRACT:
					case FILTER:
					case FINAL:
					case FIRST:
					case FLOAT:
					case FLOOR:
					case FOLLOWING:
					case FORCE:
					case FORMAT:
					case FORTRAN:
					case FORWARD:
					case FOUND:
					case FREE:
					case FROM:
					case FUNCTION:
					case FUSION:
					case G_:
					case GENERAL:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANTED:
					case GREATEST:
					case GROUPING:
					case HANDLER:
					case HIERARCHY:
					case HOLD:
					case HOST:
					case HOUR:
					case IDENTITY:
					case IGNORE:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLEMENTATION:
					case IMPLICIT:
					case IN:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDICATOR:
					case INHERITS:
					case INOUT:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTANCE:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERSECTION:
					case INTERVAL:
					case INVOKER:
					case ISOLATION:
					case K_:
					case KEY:
					case KEY_MEMBER:
					case KEY_TYPE:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAST:
					case LEFT:
					case LENGTH:
					case LEVEL:
					case LISTEN:
					case LN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCATOR:
					case LOCK:
					case LOCKED:
					case LOWER:
					case M_:
					case MAP:
					case MATCH:
					case MATCHED:
					case MAX:
					case MAXVALUE:
					case MEMBER:
					case MERGE:
					case MESSAGE_LENGTH:
					case MESSAGE_OCTET_LENGTH:
					case MESSAGE_TEXT:
					case METHOD:
					case MIN:
					case MINUTE:
					case MINVALUE:
					case MOD:
					case MODE:
					case MODIFIES:
					case MODULE:
					case MONTH:
					case MORE_:
					case MOVE:
					case MULTISET:
					case MUMPS:
					case NAME:
					case NAMES:
					case NATIONAL:
					case NCHAR:
					case NCLOB:
					case NESTING:
					case NEW:
					case NEXT:
					case NO:
					case NONE:
					case NORMALIZE:
					case NORMALIZED:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLABLE:
					case NULLIF:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case OBJECT:
					case OCTET_LENGTH:
					case OCTETS:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPEN:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDERING:
					case ORDINALITY:
					case OTHERS:
					case OUT:
					case OUTPUT:
					case OVER:
					case OVERLAY:
					case OVERRIDING:
					case OWNER:
					case PAD:
					case PARAMETER:
					case PARAMETER_MODE:
					case PARAMETER_NAME:
					case PARAMETER_ORDINAL_POSITION:
					case PARAMETER_SPECIFIC_CATALOG:
					case PARAMETER_SPECIFIC_NAME:
					case PARAMETER_SPECIFIC_SCHEMA:
					case PARTIAL:
					case PARTITION:
					case PASCAL:
					case PASSWORD:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PLAIN:
					case PLI:
					case POSITION:
					case POWER:
					case PRECEDING:
					case PRECISION:
					case PREPARE:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PUBLIC:
					case QUOTE:
					case RANGE:
					case RANK:
					case READ:
					case READS:
					case REAL:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_INTERCEPT:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNED_CARDINALITY:
					case RETURNED_LENGTH:
					case RETURNED_OCTET_LENGTH:
					case RETURNED_SQLSTATE:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINE_CATALOG:
					case ROUTINE_NAME:
					case ROUTINE_SCHEMA:
					case ROW:
					case ROW_COUNT:
					case ROW_NUMBER:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCALE:
					case SCHEMA:
					case SCHEMA_NAME:
					case SCOPE:
					case SCOPE_CATALOG:
					case SCOPE_NAME:
					case SCOPE_SCHEMA:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECTION:
					case SECURITY:
					case SELF:
					case SENSITIVE:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER_NAME:
					case SESSION:
					case SET:
					case SETOF:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SIZE:
					case SMALLINT:
					case SOME:
					case SOURCE:
					case SPACE:
					case SPECIFIC:
					case SPECIFIC_NAME:
					case SPECIFICTYPE:
					case SQL:
					case SQLCODE:
					case SQLERROR:
					case SQLEXCEPTION:
					case SQLSTATE:
					case SQLWARNING:
					case SQRT:
					case STABLE:
					case START:
					case STATE:
					case STATEMENT:
					case STATIC:
					case STATISTICS:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STRICT:
					case STRUCTURE:
					case STYLE:
					case SUBCLASS_ORIGIN:
					case SUBMULTISET:
					case SUBSTRING:
					case SUM:
					case SYSID:
					case SYSTEM:
					case SYSTEM_USER:
					case TABLE_NAME:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TIES:
					case TIME:
					case TIMESTAMP:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TOP_LEVEL_COUNT:
					case TRANSACTION:
					case TRANSACTION_ACTIVE:
					case TRANSACTIONS_COMMITTED:
					case TRANSACTIONS_ROLLED_BACK:
					case TRANSFORM:
					case TRANSFORMS:
					case TRANSLATE:
					case TRANSLATION:
					case TREAT:
					case TRIGGER:
					case TRIGGER_CATALOG:
					case TRIGGER_NAME:
					case TRIGGER_SCHEMA:
					case TRIM:
					case TRUE:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNDER:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNNAMED:
					case UNNEST:
					case UNTIL:
					case UPDATE:
					case UPPER:
					case USAGE:
					case USER_DEFINED_TYPE_CATALOG:
					case USER_DEFINED_TYPE_CODE:
					case USER_DEFINED_TYPE_NAME:
					case USER_DEFINED_TYPE_SCHEMA:
					case VACUUM:
					case VALID:
					case VALIDATOR:
					case VALUE:
					case VALUES:
					case VAR_POP:
					case VAR_SAMP:
					case VARCHAR:
					case VARYING:
					case VIEW:
					case VOLATILE:
					case WHENEVER:
					case WIDTH_BUCKET:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case ABSTIME:
					case BIGSERIAL:
					case BIT_VARYING:
					case BOOL:
					case BOX:
					case BYTEA:
					case CHARACTER_VARYING:
					case CIDR:
					case CIRCLE:
					case FLOAT4:
					case FLOAT8:
					case INET:
					case INT2:
					case INT4:
					case INT8:
					case JSON:
					case JSONB:
					case LINE:
					case LSEG:
					case MACADDR:
					case MACADDR8:
					case MONEY:
					case PG_LSN:
					case POINT:
					case POLYGON:
					case RELTIME:
					case SERIAL:
					case SERIAL2:
					case SERIAL4:
					case SERIAL8:
					case SMALLSERIAL:
					case TEXT:
					case TIMESTAMPTZ:
					case TIMETZ:
					case TSQUERY:
					case TSVECTOR:
					case TXID_SNAPSHOT:
					case UUID:
					case VARBIT:
					case XML:
					case SINGLEQ_STRING_LITERAL:
					case DOUBLEQ_STRING_LITERAL:
					case IDENTIFIER:
					case IDENTIFIER_UNICODE:
						break;
					default:
						break;
					}
					}
					break;
				case BACKWARD:
					{
					setState(3721);
					match(BACKWARD);
					setState(3724);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COLON:
					case INTEGER_LITERAL:
					case QMARK:
						{
						setState(3722);
						parameterOrIntegerLiteral();
						}
						break;
					case ALL:
						{
						setState(3723);
						match(ALL);
						}
						break;
					case WHITESPACE:
					case A_:
					case ABORT:
					case ABS:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADA:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALLOCATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ANY:
					case ARE:
					case ASENSITIVE:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATOMIC:
					case ATTRIBUTE:
					case ATTRIBUTES:
					case AVG:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BIT_LENGTH:
					case BLOB:
					case BOOLEAN:
					case BREADTH:
					case BY:
					case C_:
					case CACHE:
					case CALL:
					case CALLED:
					case CARDINALITY:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CATALOG_NAME:
					case CEIL:
					case CEILING:
					case CHAIN:
					case CHAR:
					case CHAR_LENGTH:
					case CHARACTER:
					case CHARACTER_LENGTH:
					case CHARACTER_SET_CATALOG:
					case CHARACTER_SET_NAME:
					case CHARACTER_SET_SCHEMA:
					case CHARACTERISTICS:
					case CHARACTERS:
					case CHECKPOINT:
					case CLASS:
					case CLASS_ORIGIN:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COALESCE:
					case COBOL:
					case COLLATION_CATALOG:
					case COLLATION_NAME:
					case COLLATION_SCHEMA:
					case COLLECT:
					case COLUMN_NAME:
					case COMMAND_FUNCTION:
					case COMMAND_FUNCTION_CODE:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONDITION:
					case CONDITION_NUMBER:
					case CONNECT:
					case CONNECTION:
					case CONNECTION_NAME:
					case CONSTRAINT_CATALOG:
					case CONSTRAINT_NAME:
					case CONSTRAINT_SCHEMA:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTAINS:
					case CONTINUE:
					case CONVERSION:
					case CONVERT:
					case COPY:
					case CORR:
					case CORRESPONDING:
					case COUNT:
					case COVAR_POP:
					case COVAR_SAMP:
					case CSV:
					case CUBE:
					case CUME_DIST:
					case CURRENT:
					case CURRENT_DEFAULT_TRANSFORM_GROUP:
					case CURRENT_PATH:
					case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
					case CURSOR:
					case CURSOR_NAME:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DATETIME_INTERVAL_CODE:
					case DATETIME_INTERVAL_PRECISION:
					case DAY:
					case DEALLOCATE:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINED:
					case DEFINER:
					case DEGREE:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DENSE_RANK:
					case DEPTH:
					case DEREF:
					case DERIVED:
					case DESCRIBE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DIAGNOSTICS:
					case DICTIONARY:
					case DISCONNECT:
					case DISPATCH:
					case DOMAIN:
					case DOUBLE:
					case DYNAMIC:
					case DYNAMIC_FUNCTION:
					case DYNAMIC_FUNCTION_CODE:
					case EACH:
					case ELEMENT:
					case ENCODING:
					case ENCRYPTED:
					case END:
					case EQUALS:
					case ESCAPE:
					case EVERY:
					case EXCEPTION:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXEC:
					case EXECUTE:
					case EXISTS:
					case EXP:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case EXTRACT:
					case FILTER:
					case FINAL:
					case FIRST:
					case FLOAT:
					case FLOOR:
					case FOLLOWING:
					case FORCE:
					case FORMAT:
					case FORTRAN:
					case FORWARD:
					case FOUND:
					case FREE:
					case FROM:
					case FUNCTION:
					case FUSION:
					case G_:
					case GENERAL:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANTED:
					case GREATEST:
					case GROUPING:
					case HANDLER:
					case HIERARCHY:
					case HOLD:
					case HOST:
					case HOUR:
					case IDENTITY:
					case IGNORE:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLEMENTATION:
					case IMPLICIT:
					case IN:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDICATOR:
					case INHERITS:
					case INOUT:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTANCE:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERSECTION:
					case INTERVAL:
					case INVOKER:
					case ISOLATION:
					case K_:
					case KEY:
					case KEY_MEMBER:
					case KEY_TYPE:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAST:
					case LEFT:
					case LENGTH:
					case LEVEL:
					case LISTEN:
					case LN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCATOR:
					case LOCK:
					case LOCKED:
					case LOWER:
					case M_:
					case MAP:
					case MATCH:
					case MATCHED:
					case MAX:
					case MAXVALUE:
					case MEMBER:
					case MERGE:
					case MESSAGE_LENGTH:
					case MESSAGE_OCTET_LENGTH:
					case MESSAGE_TEXT:
					case METHOD:
					case MIN:
					case MINUTE:
					case MINVALUE:
					case MOD:
					case MODE:
					case MODIFIES:
					case MODULE:
					case MONTH:
					case MORE_:
					case MOVE:
					case MULTISET:
					case MUMPS:
					case NAME:
					case NAMES:
					case NATIONAL:
					case NCHAR:
					case NCLOB:
					case NESTING:
					case NEW:
					case NEXT:
					case NO:
					case NONE:
					case NORMALIZE:
					case NORMALIZED:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLABLE:
					case NULLIF:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case OBJECT:
					case OCTET_LENGTH:
					case OCTETS:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPEN:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDERING:
					case ORDINALITY:
					case OTHERS:
					case OUT:
					case OUTPUT:
					case OVER:
					case OVERLAY:
					case OVERRIDING:
					case OWNER:
					case PAD:
					case PARAMETER:
					case PARAMETER_MODE:
					case PARAMETER_NAME:
					case PARAMETER_ORDINAL_POSITION:
					case PARAMETER_SPECIFIC_CATALOG:
					case PARAMETER_SPECIFIC_NAME:
					case PARAMETER_SPECIFIC_SCHEMA:
					case PARTIAL:
					case PARTITION:
					case PASCAL:
					case PASSWORD:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PLAIN:
					case PLI:
					case POSITION:
					case POWER:
					case PRECEDING:
					case PRECISION:
					case PREPARE:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PUBLIC:
					case QUOTE:
					case RANGE:
					case RANK:
					case READ:
					case READS:
					case REAL:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_INTERCEPT:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNED_CARDINALITY:
					case RETURNED_LENGTH:
					case RETURNED_OCTET_LENGTH:
					case RETURNED_SQLSTATE:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINE_CATALOG:
					case ROUTINE_NAME:
					case ROUTINE_SCHEMA:
					case ROW:
					case ROW_COUNT:
					case ROW_NUMBER:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCALE:
					case SCHEMA:
					case SCHEMA_NAME:
					case SCOPE:
					case SCOPE_CATALOG:
					case SCOPE_NAME:
					case SCOPE_SCHEMA:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECTION:
					case SECURITY:
					case SELF:
					case SENSITIVE:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER_NAME:
					case SESSION:
					case SET:
					case SETOF:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SIZE:
					case SMALLINT:
					case SOME:
					case SOURCE:
					case SPACE:
					case SPECIFIC:
					case SPECIFIC_NAME:
					case SPECIFICTYPE:
					case SQL:
					case SQLCODE:
					case SQLERROR:
					case SQLEXCEPTION:
					case SQLSTATE:
					case SQLWARNING:
					case SQRT:
					case STABLE:
					case START:
					case STATE:
					case STATEMENT:
					case STATIC:
					case STATISTICS:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STRICT:
					case STRUCTURE:
					case STYLE:
					case SUBCLASS_ORIGIN:
					case SUBMULTISET:
					case SUBSTRING:
					case SUM:
					case SYSID:
					case SYSTEM:
					case SYSTEM_USER:
					case TABLE_NAME:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TIES:
					case TIME:
					case TIMESTAMP:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TOP_LEVEL_COUNT:
					case TRANSACTION:
					case TRANSACTION_ACTIVE:
					case TRANSACTIONS_COMMITTED:
					case TRANSACTIONS_ROLLED_BACK:
					case TRANSFORM:
					case TRANSFORMS:
					case TRANSLATE:
					case TRANSLATION:
					case TREAT:
					case TRIGGER:
					case TRIGGER_CATALOG:
					case TRIGGER_NAME:
					case TRIGGER_SCHEMA:
					case TRIM:
					case TRUE:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNDER:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNNAMED:
					case UNNEST:
					case UNTIL:
					case UPDATE:
					case UPPER:
					case USAGE:
					case USER_DEFINED_TYPE_CATALOG:
					case USER_DEFINED_TYPE_CODE:
					case USER_DEFINED_TYPE_NAME:
					case USER_DEFINED_TYPE_SCHEMA:
					case VACUUM:
					case VALID:
					case VALIDATOR:
					case VALUE:
					case VALUES:
					case VAR_POP:
					case VAR_SAMP:
					case VARCHAR:
					case VARYING:
					case VIEW:
					case VOLATILE:
					case WHENEVER:
					case WIDTH_BUCKET:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case ABSTIME:
					case BIGSERIAL:
					case BIT_VARYING:
					case BOOL:
					case BOX:
					case BYTEA:
					case CHARACTER_VARYING:
					case CIDR:
					case CIRCLE:
					case FLOAT4:
					case FLOAT8:
					case INET:
					case INT2:
					case INT4:
					case INT8:
					case JSON:
					case JSONB:
					case LINE:
					case LSEG:
					case MACADDR:
					case MACADDR8:
					case MONEY:
					case PG_LSN:
					case POINT:
					case POLYGON:
					case RELTIME:
					case SERIAL:
					case SERIAL2:
					case SERIAL4:
					case SERIAL8:
					case SMALLSERIAL:
					case TEXT:
					case TIMESTAMPTZ:
					case TIMETZ:
					case TSQUERY:
					case TSVECTOR:
					case TXID_SNAPSHOT:
					case UUID:
					case VARBIT:
					case XML:
					case SINGLEQ_STRING_LITERAL:
					case DOUBLEQ_STRING_LITERAL:
					case IDENTIFIER:
					case IDENTIFIER_UNICODE:
						break;
					default:
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(3728);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
			setState(3733);
			((Move_stmtContext)_localctx).cursor_name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Notify_stmtContext extends ParserRuleContext {
		public Name_Context channel;
		public Token payload;
		public TerminalNode NOTIFY() { return getToken(PostgreSqlParser.NOTIFY, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSqlParser.COMMA, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public Notify_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterNotify_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitNotify_stmt(this);
		}
	}

	public final Notify_stmtContext notify_stmt() throws RecognitionException {
		Notify_stmtContext _localctx = new Notify_stmtContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_notify_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3735);
			match(NOTIFY);
			setState(3736);
			((Notify_stmtContext)_localctx).channel = name_();
			setState(3739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3737);
				match(COMMA);
				setState(3738);
				((Notify_stmtContext)_localctx).payload = match(SINGLEQ_STRING_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prepare_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode PREPARE() { return getToken(PostgreSqlParser.PREPARE, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Prepare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterPrepare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitPrepare_stmt(this);
		}
	}

	public final Prepare_stmtContext prepare_stmt() throws RecognitionException {
		Prepare_stmtContext _localctx = new Prepare_stmtContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_prepare_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3741);
			match(PREPARE);
			setState(3742);
			((Prepare_stmtContext)_localctx).name = identifier(0);
			setState(3747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3743);
				match(OPEN_PAREN);
				setState(3744);
				data_type_list();
				setState(3745);
				match(CLOSE_PAREN);
				}
			}

			setState(3749);
			match(AS);
			setState(3755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3750);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(3751);
				insert_stmt();
				}
				break;
			case 3:
				{
				setState(3752);
				update_stmt();
				}
				break;
			case 4:
				{
				setState(3753);
				delete_stmt();
				}
				break;
			case 5:
				{
				setState(3754);
				values_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prepare_transaction_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public TerminalNode PREPARE() { return getToken(PostgreSqlParser.PREPARE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSqlParser.TRANSACTION, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Prepare_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_transaction_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterPrepare_transaction_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitPrepare_transaction_stmt(this);
		}
	}

	public final Prepare_transaction_stmtContext prepare_transaction_stmt() throws RecognitionException {
		Prepare_transaction_stmtContext _localctx = new Prepare_transaction_stmtContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_prepare_transaction_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3757);
			match(PREPARE);
			setState(3758);
			match(TRANSACTION);
			setState(3759);
			((Prepare_transaction_stmtContext)_localctx).name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reassign_owned_stmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSqlParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSqlParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> CURRENT_USER() { return getTokens(PostgreSqlParser.CURRENT_USER); }
		public TerminalNode CURRENT_USER(int i) {
			return getToken(PostgreSqlParser.CURRENT_USER, i);
		}
		public List<TerminalNode> SESSION_USER() { return getTokens(PostgreSqlParser.SESSION_USER); }
		public TerminalNode SESSION_USER(int i) {
			return getToken(PostgreSqlParser.SESSION_USER, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Reassign_owned_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassign_owned_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterReassign_owned_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitReassign_owned_stmt(this);
		}
	}

	public final Reassign_owned_stmtContext reassign_owned_stmt() throws RecognitionException {
		Reassign_owned_stmtContext _localctx = new Reassign_owned_stmtContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_reassign_owned_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3761);
			match(REASSIGN);
			setState(3762);
			match(OWNED);
			setState(3763);
			match(BY);
			{
			setState(3767);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(3764);
				identifier(0);
				}
				break;
			case CURRENT_USER:
				{
				setState(3765);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(3766);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3769);
				match(COMMA);
				setState(3773);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(3770);
					identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(3771);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(3772);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(3779);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			setState(3780);
			match(TO);
			setState(3784);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(3781);
				identifier(0);
				}
				break;
			case CURRENT_USER:
				{
				setState(3782);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(3783);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Refresh_materialized_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Refresh_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refresh_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRefresh_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRefresh_materialized_view_stmt(this);
		}
	}

	public final Refresh_materialized_view_stmtContext refresh_materialized_view_stmt() throws RecognitionException {
		Refresh_materialized_view_stmtContext _localctx = new Refresh_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_refresh_materialized_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3786);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode REINDEX() { return getToken(PostgreSqlParser.REINDEX, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSqlParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSqlParser.DATABASE, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSqlParser.SYSTEM, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSqlParser.VERBOSE, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterReindex_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitReindex_stmt(this);
		}
	}

	public final Reindex_stmtContext reindex_stmt() throws RecognitionException {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_reindex_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3788);
			match(REINDEX);
			setState(3792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3789);
				match(OPEN_PAREN);
				setState(3790);
				match(VERBOSE);
				setState(3791);
				match(CLOSE_PAREN);
				}
			}

			setState(3794);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==INDEX || _la==SCHEMA || _la==SYSTEM || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3795);
			((Reindex_stmtContext)_localctx).name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Release_savepoint_stmtContext extends ParserRuleContext {
		public IdentifierContext savepoint_name;
		public TerminalNode RELEASE() { return getToken(PostgreSqlParser.RELEASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PostgreSqlParser.SAVEPOINT, 0); }
		public Release_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRelease_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRelease_savepoint_stmt(this);
		}
	}

	public final Release_savepoint_stmtContext release_savepoint_stmt() throws RecognitionException {
		Release_savepoint_stmtContext _localctx = new Release_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_release_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3797);
			match(RELEASE);
			setState(3799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3798);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3801);
			((Release_savepoint_stmtContext)_localctx).savepoint_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reset_stmtContext extends ParserRuleContext {
		public IdentifierContext configuration_parameter;
		public TerminalNode RESET() { return getToken(PostgreSqlParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reset_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterReset_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitReset_stmt(this);
		}
	}

	public final Reset_stmtContext reset_stmt() throws RecognitionException {
		Reset_stmtContext _localctx = new Reset_stmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_reset_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3803);
			match(RESET);
			setState(3806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(3804);
				((Reset_stmtContext)_localctx).configuration_parameter = identifier(0);
				}
				break;
			case ALL:
				{
				setState(3805);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Revoke_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRevoke_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRevoke_stmt(this);
		}
	}

	public final Revoke_stmtContext revoke_stmt() throws RecognitionException {
		Revoke_stmtContext _localctx = new Revoke_stmtContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_revoke_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3808);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_stmtContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PostgreSqlParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSqlParser.TRANSACTION, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRollback_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRollback_stmt(this);
		}
	}

	public final Rollback_stmtContext rollback_stmt() throws RecognitionException {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_rollback_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3810);
			match(ROLLBACK);
			setState(3812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(3811);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_prepared_stmtContext extends ParserRuleContext {
		public Token transaction_id;
		public TerminalNode ROLLBACK() { return getToken(PostgreSqlParser.ROLLBACK, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSqlParser.PREPARED, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSqlParser.INTEGER_LITERAL, 0); }
		public Rollback_prepared_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_prepared_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRollback_prepared_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRollback_prepared_stmt(this);
		}
	}

	public final Rollback_prepared_stmtContext rollback_prepared_stmt() throws RecognitionException {
		Rollback_prepared_stmtContext _localctx = new Rollback_prepared_stmtContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_rollback_prepared_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3814);
			match(ROLLBACK);
			setState(3815);
			match(PREPARED);
			setState(3816);
			((Rollback_prepared_stmtContext)_localctx).transaction_id = match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_to_savepoint_stmtContext extends ParserRuleContext {
		public IdentifierContext savepoint_name;
		public TerminalNode ROLLBACK() { return getToken(PostgreSqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PostgreSqlParser.SAVEPOINT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSqlParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSqlParser.TRANSACTION, 0); }
		public Rollback_to_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_to_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRollback_to_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRollback_to_savepoint_stmt(this);
		}
	}

	public final Rollback_to_savepoint_stmtContext rollback_to_savepoint_stmt() throws RecognitionException {
		Rollback_to_savepoint_stmtContext _localctx = new Rollback_to_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_rollback_to_savepoint_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3818);
			match(ROLLBACK);
			setState(3820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(3819);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3822);
			match(TO);
			setState(3824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				setState(3823);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3826);
			((Rollback_to_savepoint_stmtContext)_localctx).savepoint_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Savepoint_stmtContext extends ParserRuleContext {
		public IdentifierContext savepoint_name;
		public TerminalNode SAVEPOINT() { return getToken(PostgreSqlParser.SAVEPOINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSavepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSavepoint_stmt(this);
		}
	}

	public final Savepoint_stmtContext savepoint_stmt() throws RecognitionException {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3828);
			match(SAVEPOINT);
			setState(3829);
			((Savepoint_stmtContext)_localctx).savepoint_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Security_label_stmtContext extends ParserRuleContext {
		public Name_Context provider;
		public IdentifierContext object_name;
		public IdentifierContext table_name;
		public Column_nameContext column_name_;
		public IdentifierContext aggregate_name;
		public IdentifierContext function_name;
		public Token large_object_oid;
		public Token label;
		public TerminalNode SECURITY() { return getToken(PostgreSqlParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSqlParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public TerminalNode IS() { return getToken(PostgreSqlParser.IS, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSqlParser.COLUMN, 0); }
		public TerminalNode DOT() { return getToken(PostgreSqlParser.DOT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSqlParser.AGGREGATE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Aggregate_signatureContext aggregate_signature() {
			return getRuleContext(Aggregate_signatureContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSqlParser.DATABASE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSqlParser.DOMAIN, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSqlParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSqlParser.TRIGGER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSqlParser.FOREIGN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSqlParser.FUNCTION, 0); }
		public Func_sigContext func_sig() {
			return getRuleContext(Func_sigContext.class,0);
		}
		public TerminalNode LARGE() { return getToken(PostgreSqlParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSqlParser.OBJECT, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSqlParser.VIEW, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSqlParser.LANGUAGE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSqlParser.PUBLICATION, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSqlParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSqlParser.SEQUENCE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSqlParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSqlParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSqlParser.TYPE, 0); }
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSqlParser.INTEGER_LITERAL, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSqlParser.PROCEDURAL, 0); }
		public Security_label_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSecurity_label_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSecurity_label_stmt(this);
		}
	}

	public final Security_label_stmtContext security_label_stmt() throws RecognitionException {
		Security_label_stmtContext _localctx = new Security_label_stmtContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_security_label_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3831);
			match(SECURITY);
			setState(3832);
			match(LABEL);
			setState(3835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3833);
				match(FOR);
				setState(3834);
				((Security_label_stmtContext)_localctx).provider = name_();
				}
			}

			setState(3837);
			match(ON);
			setState(3892);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(3838);
				match(TABLE);
				setState(3839);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case COLUMN:
				{
				setState(3840);
				match(COLUMN);
				setState(3841);
				((Security_label_stmtContext)_localctx).table_name = identifier(0);
				setState(3842);
				match(DOT);
				setState(3843);
				((Security_label_stmtContext)_localctx).column_name_ = column_name();
				}
				break;
			case AGGREGATE:
				{
				setState(3845);
				match(AGGREGATE);
				setState(3846);
				((Security_label_stmtContext)_localctx).aggregate_name = identifier(0);
				setState(3847);
				match(OPEN_PAREN);
				setState(3848);
				aggregate_signature();
				setState(3849);
				match(CLOSE_PAREN);
				}
				break;
			case DATABASE:
				{
				setState(3851);
				match(DATABASE);
				setState(3852);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case DOMAIN:
				{
				setState(3853);
				match(DOMAIN);
				setState(3854);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case EVENT:
				{
				setState(3855);
				match(EVENT);
				setState(3856);
				match(TRIGGER);
				setState(3857);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case FOREIGN:
				{
				setState(3858);
				match(FOREIGN);
				setState(3859);
				match(TABLE);
				setState(3860);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case FUNCTION:
				{
				setState(3861);
				match(FUNCTION);
				setState(3862);
				((Security_label_stmtContext)_localctx).function_name = identifier(0);
				setState(3863);
				func_sig();
				}
				break;
			case LARGE:
				{
				setState(3865);
				match(LARGE);
				setState(3866);
				match(OBJECT);
				setState(3867);
				((Security_label_stmtContext)_localctx).large_object_oid = match(INTEGER_LITERAL);
				}
				break;
			case MATERIALIZED:
				{
				setState(3868);
				match(MATERIALIZED);
				setState(3869);
				match(VIEW);
				setState(3870);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				{
				setState(3872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(3871);
					match(PROCEDURAL);
					}
				}

				setState(3874);
				match(LANGUAGE);
				setState(3875);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case PUBLICATION:
				{
				setState(3876);
				match(PUBLICATION);
				setState(3877);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case ROLE:
				{
				setState(3878);
				match(ROLE);
				setState(3879);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case SCHEMA:
				{
				setState(3880);
				match(SCHEMA);
				setState(3881);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case SEQUENCE:
				{
				setState(3882);
				match(SEQUENCE);
				setState(3883);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case SUBSCRIPTION:
				{
				setState(3884);
				match(SUBSCRIPTION);
				setState(3885);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case TABLESPACE:
				{
				setState(3886);
				match(TABLESPACE);
				setState(3887);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case TYPE:
				{
				setState(3888);
				match(TYPE);
				setState(3889);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case VIEW:
				{
				setState(3890);
				match(VIEW);
				setState(3891);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3894);
			match(IS);
			setState(3895);
			((Security_label_stmtContext)_localctx).label = match(SINGLEQ_STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_stmtContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public List<Combine_clauseContext> combine_clause() {
			return getRuleContexts(Combine_clauseContext.class);
		}
		public Combine_clauseContext combine_clause(int i) {
			return getRuleContext(Combine_clauseContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Fetch_clauseContext fetch_clause() {
			return getRuleContext(Fetch_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(PostgreSqlParser.SELECT, 0); }
		public Selector_clauseContext selector_clause() {
			return getRuleContext(Selector_clauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSelect_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSelect_stmt(this);
		}
	}

	public final Select_stmtContext select_stmt() throws RecognitionException {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_select_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3897);
				with_clause();
				}
			}

			setState(3926);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				{
				setState(3900);
				match(SELECT);
				setState(3901);
				selector_clause();
				setState(3903);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(3902);
					from_clause();
					}
					break;
				}
				}
				}
				break;
			case TABLE:
				{
				{
				setState(3905);
				match(TABLE);
				setState(3907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(3906);
					match(ONLY);
					}
				}

				setState(3909);
				table_name_();
				setState(3911);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(3910);
					match(STAR);
					}
					break;
				}
				}
				}
				break;
			case OPEN_PAREN:
				{
				{
				setState(3914); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3913);
						match(OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3916); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,411,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3918);
				select_stmt();
				setState(3920); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3919);
					match(CLOSE_PAREN);
					}
					}
					setState(3922); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CLOSE_PAREN );
				setState(3924);
				combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(3928);
				where_clause();
				}
				break;
			}
			setState(3932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				setState(3931);
				group_by_clause();
				}
				break;
			}
			setState(3935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				setState(3934);
				having_clause();
				}
				break;
			}
			setState(3938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3937);
				window_clause();
				}
				break;
			}
			setState(3941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3940);
				combine_clause();
				}
				break;
			}
			setState(3944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(3943);
				order_by_clause();
				}
				break;
			}
			setState(3947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(3946);
				limit_clause();
				}
				break;
			}
			setState(3950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3949);
				offset_clause();
				}
				break;
			}
			setState(3953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3952);
				fetch_clause();
				}
				break;
			}
			setState(3956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				setState(3955);
				for_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_into_stmtContext extends ParserRuleContext {
		public Table_name_Context new_table;
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public List<Combine_clauseContext> combine_clause() {
			return getRuleContexts(Combine_clauseContext.class);
		}
		public Combine_clauseContext combine_clause(int i) {
			return getRuleContext(Combine_clauseContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Fetch_clauseContext fetch_clause() {
			return getRuleContext(Fetch_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(PostgreSqlParser.SELECT, 0); }
		public Selector_clauseContext selector_clause() {
			return getRuleContext(Selector_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSqlParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSqlParser.TEMP, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSqlParser.UNLOGGED, 0); }
		public Select_into_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_into_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSelect_into_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSelect_into_stmt(this);
		}
	}

	public final Select_into_stmtContext select_into_stmt() throws RecognitionException {
		Select_into_stmtContext _localctx = new Select_into_stmtContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_select_into_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3958);
				with_clause();
				}
			}

			setState(3995);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				{
				setState(3961);
				match(SELECT);
				setState(3962);
				selector_clause();
				setState(3963);
				match(INTO);
				setState(3965);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(3964);
					_la = _input.LA(1);
					if ( !(((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & 8796093022213L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(3967);
					match(TABLE);
					}
				}

				setState(3970);
				((Select_into_stmtContext)_localctx).new_table = table_name_();
				setState(3972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3971);
					from_clause();
					}
				}

				}
				}
				break;
			case TABLE:
				{
				{
				setState(3974);
				match(TABLE);
				setState(3976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(3975);
					match(ONLY);
					}
				}

				setState(3978);
				table_name_();
				setState(3980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(3979);
					match(STAR);
					}
				}

				}
				}
				break;
			case OPEN_PAREN:
				{
				{
				setState(3983); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3982);
						match(OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3985); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,430,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3987);
				select_stmt();
				setState(3989); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3988);
					match(CLOSE_PAREN);
					}
					}
					setState(3991); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CLOSE_PAREN );
				setState(3993);
				combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3997);
				where_clause();
				}
			}

			setState(4001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(4000);
				group_by_clause();
				}
			}

			setState(4004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(4003);
				having_clause();
				}
			}

			setState(4007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(4006);
				window_clause();
				}
			}

			setState(4010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				setState(4009);
				combine_clause();
				}
			}

			setState(4013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4012);
				order_by_clause();
				}
			}

			setState(4016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(4015);
				limit_clause();
				}
			}

			setState(4019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(4018);
				offset_clause();
				}
			}

			setState(4022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(4021);
				fetch_clause();
				}
			}

			setState(4025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4024);
				for_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public List<With_exprContext> with_expr() {
			return getRuleContexts(With_exprContext.class);
		}
		public With_exprContext with_expr(int i) {
			return getRuleContext(With_exprContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSqlParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitWith_clause(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_with_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4027);
			match(WITH);
			setState(4029);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(4028);
				match(RECURSIVE);
				}
				break;
			}
			setState(4031);
			with_expr();
			setState(4036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4032);
				match(COMMA);
				setState(4033);
				with_expr();
				}
				}
				setState(4038);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_exprContext extends ParserRuleContext {
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public With_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterWith_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitWith_expr(this);
		}
	}

	public final With_exprContext with_expr() throws RecognitionException {
		With_exprContext _localctx = new With_exprContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_with_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			table_name_();
			setState(4044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(4040);
				match(OPEN_PAREN);
				setState(4041);
				name_list();
				setState(4042);
				match(CLOSE_PAREN);
				}
			}

			setState(4046);
			match(AS);
			setState(4047);
			match(OPEN_PAREN);
			setState(4053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(4048);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(4049);
				insert_stmt();
				}
				break;
			case 3:
				{
				setState(4050);
				delete_stmt();
				}
				break;
			case 4:
				{
				setState(4051);
				update_stmt();
				}
				break;
			case 5:
				{
				setState(4052);
				values_stmt();
				}
				break;
			}
			setState(4055);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_stmtContext extends ParserRuleContext {
		public IdentifierContext configuration_parameter;
		public Param_valueContext value;
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSqlParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSqlParser.EQUAL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSqlParser.DEFAULT, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSqlParser.SESSION, 0); }
		public List<TerminalNode> LOCAL() { return getTokens(PostgreSqlParser.LOCAL); }
		public TerminalNode LOCAL(int i) {
			return getToken(PostgreSqlParser.LOCAL, i);
		}
		public TerminalNode TIME() { return getToken(PostgreSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSqlParser.ZONE, 0); }
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public Set_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSet_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSet_stmt(this);
		}
	}

	public final Set_stmtContext set_stmt() throws RecognitionException {
		Set_stmtContext _localctx = new Set_stmtContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_set_stmt);
		int _la;
		try {
			setState(4078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4057);
				match(SET);
				setState(4059);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(4058);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4061);
				((Set_stmtContext)_localctx).configuration_parameter = identifier(0);
				setState(4062);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4065);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FALSE:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case ON:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case YES:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case COLON:
				case NUMERIC_LITERAL:
				case INTEGER_LITERAL:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
				case QMARK:
					{
					setState(4063);
					((Set_stmtContext)_localctx).value = param_value();
					}
					break;
				case DEFAULT:
					{
					setState(4064);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4067);
				match(SET);
				setState(4069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==SESSION) {
					{
					setState(4068);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4071);
				match(TIME);
				setState(4072);
				match(ZONE);
				setState(4076);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NUMERIC_LITERAL:
				case INTEGER_LITERAL:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
					{
					setState(4073);
					timezone();
					}
					break;
				case LOCAL:
					{
					setState(4074);
					match(LOCAL);
					}
					break;
				case DEFAULT:
					{
					setState(4075);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_constraints_stmtContext extends ParserRuleContext {
		public Identifier_listContext constraints;
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSqlParser.CONSTRAINTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSqlParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSqlParser.IMMEDIATE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public Set_constraints_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraints_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSet_constraints_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSet_constraints_stmt(this);
		}
	}

	public final Set_constraints_stmtContext set_constraints_stmt() throws RecognitionException {
		Set_constraints_stmtContext _localctx = new Set_constraints_stmtContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_set_constraints_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4080);
			match(SET);
			setState(4081);
			match(CONSTRAINTS);
			setState(4084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(4082);
				match(ALL);
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(4083);
				((Set_constraints_stmtContext)_localctx).constraints = identifier_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4086);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_role_stmtContext extends ParserRuleContext {
		public Role_nameContext role_name_;
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSqlParser.ROLE, 0); }
		public TerminalNode NONE() { return getToken(PostgreSqlParser.NONE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSqlParser.LOCAL, 0); }
		public TerminalNode RESET() { return getToken(PostgreSqlParser.RESET, 0); }
		public Set_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSet_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSet_role_stmt(this);
		}
	}

	public final Set_role_stmtContext set_role_stmt() throws RecognitionException {
		Set_role_stmtContext _localctx = new Set_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_set_role_stmt);
		int _la;
		try {
			setState(4099);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(4088);
				match(SET);
				setState(4090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==SESSION) {
					{
					setState(4089);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4092);
				match(ROLE);
				setState(4095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(4093);
					((Set_role_stmtContext)_localctx).role_name_ = role_name();
					}
					break;
				case 2:
					{
					setState(4094);
					match(NONE);
					}
					break;
				}
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(4097);
				match(RESET);
				setState(4098);
				match(ROLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_authorization_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Set_session_authorization_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_authorization_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSet_session_authorization_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSet_session_authorization_stmt(this);
		}
	}

	public final Set_session_authorization_stmtContext set_session_authorization_stmt() throws RecognitionException {
		Set_session_authorization_stmtContext _localctx = new Set_session_authorization_stmtContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_set_session_authorization_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4101);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_modeContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSqlParser.LEVEL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSqlParser.SERIALIZABLE, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(PostgreSqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSqlParser.UNCOMMITTED, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSqlParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public Transaction_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterTransaction_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitTransaction_mode(this);
		}
	}

	public final Transaction_modeContext transaction_mode() throws RecognitionException {
		Transaction_modeContext _localctx = new Transaction_modeContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_transaction_mode);
		int _la;
		try {
			setState(4122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4103);
				match(ISOLATION);
				setState(4104);
				match(LEVEL);
				setState(4112);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(4105);
					match(SERIALIZABLE);
					}
					break;
				case 2:
					{
					setState(4106);
					match(REPEATABLE);
					setState(4107);
					match(READ);
					}
					break;
				case 3:
					{
					setState(4108);
					match(READ);
					setState(4109);
					match(COMMITTED);
					}
					break;
				case 4:
					{
					setState(4110);
					match(READ);
					setState(4111);
					match(UNCOMMITTED);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4114);
				match(READ);
				setState(4115);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4116);
				match(READ);
				setState(4117);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4118);
					match(NOT);
					}
				}

				setState(4121);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_mode_listContext extends ParserRuleContext {
		public List<Transaction_modeContext> transaction_mode() {
			return getRuleContexts(Transaction_modeContext.class);
		}
		public Transaction_modeContext transaction_mode(int i) {
			return getRuleContext(Transaction_modeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterTransaction_mode_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitTransaction_mode_list(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_transaction_mode_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4124);
			transaction_mode();
			setState(4129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4125);
				match(COMMA);
				setState(4126);
				transaction_mode();
				}
				}
				setState(4131);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_transaction_stmtContext extends ParserRuleContext {
		public Token snapshot_id;
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSqlParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SNAPSHOT() { return getToken(PostgreSqlParser.SNAPSHOT, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSqlParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSqlParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public Set_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSet_transaction_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSet_transaction_stmt(this);
		}
	}

	public final Set_transaction_stmtContext set_transaction_stmt() throws RecognitionException {
		Set_transaction_stmtContext _localctx = new Set_transaction_stmtContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_set_transaction_stmt);
		try {
			setState(4145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4132);
				match(SET);
				setState(4133);
				match(TRANSACTION);
				setState(4134);
				transaction_mode_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4135);
				match(SET);
				setState(4136);
				match(TRANSACTION);
				setState(4137);
				match(SNAPSHOT);
				setState(4138);
				((Set_transaction_stmtContext)_localctx).snapshot_id = match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4139);
				match(SET);
				setState(4140);
				match(SESSION);
				setState(4141);
				match(CHARACTERISTICS);
				setState(4142);
				match(AS);
				setState(4143);
				match(TRANSACTION);
				setState(4144);
				transaction_mode_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode SHOW() { return getToken(PostgreSqlParser.SHOW, 0); }
		public TerminalNode TIME() { return getToken(PostgreSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSqlParser.ZONE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Show_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterShow_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitShow_stmt(this);
		}
	}

	public final Show_stmtContext show_stmt() throws RecognitionException {
		Show_stmtContext _localctx = new Show_stmtContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_show_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			match(SHOW);
			setState(4152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(4148);
				((Show_stmtContext)_localctx).name = identifier(0);
				}
				break;
			case 2:
				{
				setState(4149);
				match(TIME);
				setState(4150);
				match(ZONE);
				}
				break;
			case 3:
				{
				setState(4151);
				match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Truncate_stmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSqlParser.TRUNCATE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSqlParser.TABLE, 0); }
		public List<TerminalNode> ONLY() { return getTokens(PostgreSqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(PostgreSqlParser.ONLY, i);
		}
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSqlParser.COMMA, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(PostgreSqlParser.IDENTITY, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSqlParser.RESTART, 0); }
		public TerminalNode CONTINUE() { return getToken(PostgreSqlParser.CONTINUE, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public Truncate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterTruncate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitTruncate_stmt(this);
		}
	}

	public final Truncate_stmtContext truncate_stmt() throws RecognitionException {
		Truncate_stmtContext _localctx = new Truncate_stmtContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_truncate_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4154);
			match(TRUNCATE);
			setState(4156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(4155);
				match(TABLE);
				}
			}

			setState(4159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(4158);
				match(ONLY);
				}
			}

			setState(4161);
			table_name_();
			setState(4163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAR) {
				{
				setState(4162);
				match(STAR);
				}
			}

			setState(4170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4165);
				match(COMMA);
				setState(4167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(4166);
					match(ONLY);
					}
				}

				setState(4169);
				identifier_list();
				}
			}

			setState(4174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTINUE || _la==RESTART) {
				{
				setState(4172);
				_la = _input.LA(1);
				if ( !(_la==CONTINUE || _la==RESTART) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4173);
				match(IDENTITY);
				}
			}

			setState(4177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4176);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unlisten_stmtContext extends ParserRuleContext {
		public IdentifierContext channel;
		public TerminalNode UNLISTEN() { return getToken(PostgreSqlParser.UNLISTEN, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unlisten_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlisten_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterUnlisten_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitUnlisten_stmt(this);
		}
	}

	public final Unlisten_stmtContext unlisten_stmt() throws RecognitionException {
		Unlisten_stmtContext _localctx = new Unlisten_stmtContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_unlisten_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4179);
			match(UNLISTEN);
			setState(4182);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(4180);
				((Unlisten_stmtContext)_localctx).channel = identifier(0);
				}
				break;
			case STAR:
				{
				setState(4181);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_stmtContext extends ParserRuleContext {
		public IdentifierContext alias_;
		public IdentifierContext cursor_name_;
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public Updater_clauseContext updater_clause() {
			return getRuleContext(Updater_clauseContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(PostgreSqlParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PostgreSqlParser.OF, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterUpdate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitUpdate_stmt(this);
		}
	}

	public final Update_stmtContext update_stmt() throws RecognitionException {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_update_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4184);
				with_clause();
				}
			}

			setState(4187);
			match(UPDATE);
			setState(4189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(4188);
				match(ONLY);
				}
			}

			setState(4191);
			table_name_();
			setState(4193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAR) {
				{
				setState(4192);
				match(STAR);
				}
			}

			setState(4199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(4196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4195);
					match(AS);
					}
				}

				setState(4198);
				((Update_stmtContext)_localctx).alias_ = identifier(0);
				}
				break;
			}
			setState(4201);
			match(SET);
			setState(4202);
			updater_clause();
			setState(4204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4203);
				from_clause();
				}
			}

			setState(4211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(4206);
				where_clause();
				}
				break;
			case 2:
				{
				{
				setState(4207);
				match(WHERE);
				setState(4208);
				match(CURRENT);
				setState(4209);
				match(OF);
				setState(4210);
				((Update_stmtContext)_localctx).cursor_name_ = identifier(0);
				}
				}
				break;
			}
			setState(4214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(4213);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_optContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSqlParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSqlParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSqlParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSqlParser.ANALYZE, 0); }
		public TerminalNode DISABLE_PAGE_SKIPPING() { return getToken(PostgreSqlParser.DISABLE_PAGE_SKIPPING, 0); }
		public Vacuum_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterVacuum_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitVacuum_opt(this);
		}
	}

	public final Vacuum_optContext vacuum_opt() throws RecognitionException {
		Vacuum_optContext _localctx = new Vacuum_optContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_vacuum_opt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4216);
			_la = _input.LA(1);
			if ( !(_la==ANALYZE || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & 180143985094819841L) != 0) || _la==VERBOSE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_opt_listContext extends ParserRuleContext {
		public List<Vacuum_optContext> vacuum_opt() {
			return getRuleContexts(Vacuum_optContext.class);
		}
		public Vacuum_optContext vacuum_opt(int i) {
			return getRuleContext(Vacuum_optContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Vacuum_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterVacuum_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitVacuum_opt_list(this);
		}
	}

	public final Vacuum_opt_listContext vacuum_opt_list() throws RecognitionException {
		Vacuum_opt_listContext _localctx = new Vacuum_opt_listContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_vacuum_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4218);
			vacuum_opt();
			setState(4223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4219);
				match(COMMA);
				setState(4220);
				vacuum_opt();
				}
				}
				setState(4225);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_stmtContext extends ParserRuleContext {
		public Table_name_Context table_name;
		public TerminalNode VACUUM() { return getToken(PostgreSqlParser.VACUUM, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public Vacuum_opt_listContext vacuum_opt_list() {
			return getRuleContext(Vacuum_opt_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode FULL() { return getToken(PostgreSqlParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSqlParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSqlParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSqlParser.ANALYZE, 0); }
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterVacuum_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitVacuum_stmt(this);
		}
	}

	public final Vacuum_stmtContext vacuum_stmt() throws RecognitionException {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_vacuum_stmt);
		int _la;
		try {
			setState(4273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4226);
				match(VACUUM);
				setState(4231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(4227);
					match(OPEN_PAREN);
					setState(4228);
					vacuum_opt_list();
					setState(4229);
					match(CLOSE_PAREN);
					}
				}

				{
				setState(4233);
				((Vacuum_stmtContext)_localctx).table_name = table_name_();
				setState(4238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(4234);
					match(OPEN_PAREN);
					setState(4235);
					column_list();
					setState(4236);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4240);
				match(VACUUM);
				setState(4242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4241);
					match(FULL);
					}
				}

				setState(4245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(4244);
					match(FREEZE);
					}
				}

				setState(4248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(4247);
					match(VERBOSE);
					}
				}

				setState(4251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7662894626537209859L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3170536334544601087L) != 0)) {
					{
					setState(4250);
					((Vacuum_stmtContext)_localctx).table_name = table_name_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4253);
				match(VACUUM);
				setState(4255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4254);
					match(FULL);
					}
				}

				setState(4258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(4257);
					match(FREEZE);
					}
				}

				setState(4261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(4260);
					match(VERBOSE);
					}
				}

				setState(4263);
				match(ANALYZE);
				setState(4271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7662894626537209859L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3170536334544601087L) != 0)) {
					{
					setState(4264);
					((Vacuum_stmtContext)_localctx).table_name = table_name_();
					setState(4269);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPEN_PAREN) {
						{
						setState(4265);
						match(OPEN_PAREN);
						setState(4266);
						column_list();
						setState(4267);
						match(CLOSE_PAREN);
						}
					}

					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_stmtContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public List<Combine_clauseContext> combine_clause() {
			return getRuleContexts(Combine_clauseContext.class);
		}
		public Combine_clauseContext combine_clause(int i) {
			return getRuleContext(Combine_clauseContext.class,i);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Fetch_clauseContext fetch_clause() {
			return getRuleContext(Fetch_clauseContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PostgreSqlParser.VALUES, 0); }
		public Expr_list_listContext expr_list_list() {
			return getRuleContext(Expr_list_listContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public Values_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterValues_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitValues_stmt(this);
		}
	}

	public final Values_stmtContext values_stmt() throws RecognitionException {
		Values_stmtContext _localctx = new Values_stmtContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_values_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4275);
				with_clause();
				}
			}

			setState(4293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				{
				setState(4278);
				match(VALUES);
				setState(4279);
				expr_list_list();
				}
				}
				break;
			case OPEN_PAREN:
				{
				{
				setState(4281); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4280);
						match(OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4283); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,492,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(4285);
				values_stmt();
				setState(4287); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4286);
					match(CLOSE_PAREN);
					}
					}
					setState(4289); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CLOSE_PAREN );
				setState(4291);
				combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(4295);
				order_by_clause();
				}
				break;
			}
			setState(4299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4298);
				combine_clause();
				}
				break;
			}
			setState(4302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4301);
				limit_clause();
				}
				break;
			}
			setState(4305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(4304);
				offset_clause();
				}
				break;
			}
			setState(4308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4307);
				fetch_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Selector_clauseContext extends ParserRuleContext {
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSqlParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Selector_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selector_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterSelector_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitSelector_clause(this);
		}
	}

	public final Selector_clauseContext selector_clause() throws RecognitionException {
		Selector_clauseContext _localctx = new Selector_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_selector_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(4310);
				match(ALL);
				}
				break;
			case 2:
				{
				{
				setState(4311);
				match(DISTINCT);
				setState(4314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(4312);
					match(ON);
					setState(4313);
					expr_list();
					}
				}

				}
				}
				break;
			}
			setState(4318);
			column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_from_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4320);
			match(FROM);
			setState(4321);
			from_item(0);
			setState(4326);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4322);
					match(COMMA);
					setState(4323);
					from_item(0);
					}
					} 
				}
				setState(4328);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSqlParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4329);
			match(WHERE);
			setState(4330);
			predicate(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PostgreSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public List<Grouping_elemContext> grouping_elem() {
			return getRuleContexts(Grouping_elemContext.class);
		}
		public Grouping_elemContext grouping_elem(int i) {
			return getRuleContext(Grouping_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitGroup_by_clause(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_group_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4332);
			match(GROUP);
			setState(4333);
			match(BY);
			setState(4334);
			grouping_elem();
			setState(4339);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4335);
					match(COMMA);
					setState(4336);
					grouping_elem();
					}
					} 
				}
				setState(4341);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_elemContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(PostgreSqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSqlParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSqlParser.SETS, 0); }
		public Grouping_elem_listContext grouping_elem_list() {
			return getRuleContext(Grouping_elem_listContext.class,0);
		}
		public Grouping_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterGrouping_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitGrouping_elem(this);
		}
	}

	public final Grouping_elemContext grouping_elem() throws RecognitionException {
		Grouping_elemContext _localctx = new Grouping_elemContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_grouping_elem);
		int _la;
		try {
			setState(4367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4342);
				match(OPEN_PAREN);
				setState(4343);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4344);
				expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4345);
				expr_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4346);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4347);
				match(OPEN_PAREN);
				setState(4350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(4348);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4349);
					expr_list();
					}
					break;
				}
				setState(4359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4352);
					match(COMMA);
					setState(4355);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
					case 1:
						{
						setState(4353);
						expr(0);
						}
						break;
					case 2:
						{
						setState(4354);
						expr_list();
						}
						break;
					}
					}
					}
					setState(4361);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4362);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4364);
				match(GROUPING);
				setState(4365);
				match(SETS);
				setState(4366);
				grouping_elem_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_elem_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<Grouping_elemContext> grouping_elem() {
			return getRuleContexts(Grouping_elemContext.class);
		}
		public Grouping_elemContext grouping_elem(int i) {
			return getRuleContext(Grouping_elemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Grouping_elem_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_elem_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterGrouping_elem_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitGrouping_elem_list(this);
		}
	}

	public final Grouping_elem_listContext grouping_elem_list() throws RecognitionException {
		Grouping_elem_listContext _localctx = new Grouping_elem_listContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_grouping_elem_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4369);
			match(OPEN_PAREN);
			setState(4370);
			grouping_elem();
			setState(4375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4371);
				match(COMMA);
				setState(4372);
				grouping_elem();
				}
				}
				setState(4377);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4378);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSqlParser.HAVING, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_having_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4380);
			match(HAVING);
			setState(4381);
			predicate(0);
			setState(4386);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4382);
					match(COMMA);
					setState(4383);
					predicate(0);
					}
					} 
				}
				setState(4388);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_listContext extends ParserRuleContext {
		public ExprContext column_name_;
		public Name_Context output_name;
		public List<TerminalNode> STAR() { return getTokens(PostgreSqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(PostgreSqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PostgreSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PostgreSqlParser.AS, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterColumn_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitColumn_list(this);
		}
	}

	public final Column_listContext column_list() throws RecognitionException {
		Column_listContext _localctx = new Column_listContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_column_list);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALL:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ARRAY:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURRENT_USER:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULL:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITH:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case COLON:
			case DOLLAR:
			case DOLLAR_DOLLAR:
			case OPEN_PAREN:
			case BIT_STRING:
			case REGEX_STRING:
			case NUMERIC_LITERAL:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case SINGLEQ_STRING_LITERAL:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case DOLLAR_DEC:
			case IDENTIFIER_UNICODE:
			case AT_SIGN:
			case BANG_BANG:
			case MINUS:
			case PLUS:
			case QMARK:
			case QMARK_HYPHEN:
			case TIL:
				{
				{
				setState(4389);
				((Column_listContext)_localctx).column_name_ = expr(0);
				setState(4394);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(4391);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4390);
						match(AS);
						}
					}

					setState(4393);
					((Column_listContext)_localctx).output_name = name_();
					}
					break;
				}
				}
				}
				break;
			case STAR:
				{
				setState(4396);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4412);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4399);
					match(COMMA);
					setState(4408);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WHITESPACE:
					case A_:
					case ABORT:
					case ABS:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADA:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALL:
					case ALLOCATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ANY:
					case ARE:
					case ARRAY:
					case ASENSITIVE:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATOMIC:
					case ATTRIBUTE:
					case ATTRIBUTES:
					case AVG:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BIT_LENGTH:
					case BLOB:
					case BOOLEAN:
					case BREADTH:
					case BY:
					case C_:
					case CACHE:
					case CALL:
					case CALLED:
					case CARDINALITY:
					case CASCADE:
					case CASCADED:
					case CASE:
					case CAST:
					case CATALOG:
					case CATALOG_NAME:
					case CEIL:
					case CEILING:
					case CHAIN:
					case CHAR:
					case CHAR_LENGTH:
					case CHARACTER:
					case CHARACTER_LENGTH:
					case CHARACTER_SET_CATALOG:
					case CHARACTER_SET_NAME:
					case CHARACTER_SET_SCHEMA:
					case CHARACTERISTICS:
					case CHARACTERS:
					case CHECKPOINT:
					case CLASS:
					case CLASS_ORIGIN:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COALESCE:
					case COBOL:
					case COLLATION_CATALOG:
					case COLLATION_NAME:
					case COLLATION_SCHEMA:
					case COLLECT:
					case COLUMN_NAME:
					case COMMAND_FUNCTION:
					case COMMAND_FUNCTION_CODE:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONDITION:
					case CONDITION_NUMBER:
					case CONNECT:
					case CONNECTION:
					case CONNECTION_NAME:
					case CONSTRAINT_CATALOG:
					case CONSTRAINT_NAME:
					case CONSTRAINT_SCHEMA:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTAINS:
					case CONTINUE:
					case CONVERSION:
					case CONVERT:
					case COPY:
					case CORR:
					case CORRESPONDING:
					case COUNT:
					case COVAR_POP:
					case COVAR_SAMP:
					case CSV:
					case CUBE:
					case CUME_DIST:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_DEFAULT_TRANSFORM_GROUP:
					case CURRENT_PATH:
					case CURRENT_ROLE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
					case CURRENT_USER:
					case CURSOR:
					case CURSOR_NAME:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DATETIME_INTERVAL_CODE:
					case DATETIME_INTERVAL_PRECISION:
					case DAY:
					case DEALLOCATE:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DEFAULT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINED:
					case DEFINER:
					case DEGREE:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DENSE_RANK:
					case DEPTH:
					case DEREF:
					case DERIVED:
					case DESCRIBE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DIAGNOSTICS:
					case DICTIONARY:
					case DISCONNECT:
					case DISPATCH:
					case DOMAIN:
					case DOUBLE:
					case DYNAMIC:
					case DYNAMIC_FUNCTION:
					case DYNAMIC_FUNCTION_CODE:
					case EACH:
					case ELEMENT:
					case ENCODING:
					case ENCRYPTED:
					case END:
					case EQUALS:
					case ESCAPE:
					case EVERY:
					case EXCEPTION:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXEC:
					case EXECUTE:
					case EXISTS:
					case EXP:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case EXTRACT:
					case FALSE:
					case FILTER:
					case FINAL:
					case FIRST:
					case FLOAT:
					case FLOOR:
					case FOLLOWING:
					case FORCE:
					case FORMAT:
					case FORTRAN:
					case FORWARD:
					case FOUND:
					case FREE:
					case FUNCTION:
					case FUSION:
					case G_:
					case GENERAL:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANTED:
					case GREATEST:
					case GROUPING:
					case HANDLER:
					case HIERARCHY:
					case HOLD:
					case HOST:
					case HOUR:
					case IDENTITY:
					case IGNORE:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLEMENTATION:
					case IMPLICIT:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDICATOR:
					case INHERITS:
					case INOUT:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTANCE:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERSECTION:
					case INTERVAL:
					case INVOKER:
					case ISOLATION:
					case K_:
					case KEY:
					case KEY_MEMBER:
					case KEY_TYPE:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAST:
					case LEFT:
					case LENGTH:
					case LEVEL:
					case LISTEN:
					case LN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCATOR:
					case LOCK:
					case LOCKED:
					case LOWER:
					case M_:
					case MAP:
					case MATCH:
					case MATCHED:
					case MAX:
					case MAXVALUE:
					case MEMBER:
					case MERGE:
					case MESSAGE_LENGTH:
					case MESSAGE_OCTET_LENGTH:
					case MESSAGE_TEXT:
					case METHOD:
					case MIN:
					case MINUTE:
					case MINVALUE:
					case MOD:
					case MODE:
					case MODIFIES:
					case MODULE:
					case MONTH:
					case MORE_:
					case MOVE:
					case MULTISET:
					case MUMPS:
					case NAME:
					case NAMES:
					case NATIONAL:
					case NCHAR:
					case NCLOB:
					case NESTING:
					case NEW:
					case NEXT:
					case NO:
					case NONE:
					case NORMALIZE:
					case NORMALIZED:
					case NOT:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULL:
					case NULLABLE:
					case NULLIF:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case OBJECT:
					case OCTET_LENGTH:
					case OCTETS:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPEN:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDERING:
					case ORDINALITY:
					case OTHERS:
					case OUT:
					case OUTPUT:
					case OVER:
					case OVERLAY:
					case OVERRIDING:
					case OWNER:
					case PAD:
					case PARAMETER:
					case PARAMETER_MODE:
					case PARAMETER_NAME:
					case PARAMETER_ORDINAL_POSITION:
					case PARAMETER_SPECIFIC_CATALOG:
					case PARAMETER_SPECIFIC_NAME:
					case PARAMETER_SPECIFIC_SCHEMA:
					case PARTIAL:
					case PARTITION:
					case PASCAL:
					case PASSWORD:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PLAIN:
					case PLI:
					case POSITION:
					case POWER:
					case PRECEDING:
					case PRECISION:
					case PREPARE:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PUBLIC:
					case QUOTE:
					case RANGE:
					case RANK:
					case READ:
					case READS:
					case REAL:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_INTERCEPT:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNED_CARDINALITY:
					case RETURNED_LENGTH:
					case RETURNED_OCTET_LENGTH:
					case RETURNED_SQLSTATE:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINE_CATALOG:
					case ROUTINE_NAME:
					case ROUTINE_SCHEMA:
					case ROW:
					case ROW_COUNT:
					case ROW_NUMBER:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCALE:
					case SCHEMA:
					case SCHEMA_NAME:
					case SCOPE:
					case SCOPE_CATALOG:
					case SCOPE_NAME:
					case SCOPE_SCHEMA:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECTION:
					case SECURITY:
					case SELF:
					case SENSITIVE:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER_NAME:
					case SESSION:
					case SET:
					case SETOF:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SIZE:
					case SMALLINT:
					case SOME:
					case SOURCE:
					case SPACE:
					case SPECIFIC:
					case SPECIFIC_NAME:
					case SPECIFICTYPE:
					case SQL:
					case SQLCODE:
					case SQLERROR:
					case SQLEXCEPTION:
					case SQLSTATE:
					case SQLWARNING:
					case SQRT:
					case STABLE:
					case START:
					case STATE:
					case STATEMENT:
					case STATIC:
					case STATISTICS:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STRICT:
					case STRUCTURE:
					case STYLE:
					case SUBCLASS_ORIGIN:
					case SUBMULTISET:
					case SUBSTRING:
					case SUM:
					case SYSID:
					case SYSTEM:
					case SYSTEM_USER:
					case TABLE_NAME:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TIES:
					case TIME:
					case TIMESTAMP:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TOP_LEVEL_COUNT:
					case TRANSACTION:
					case TRANSACTION_ACTIVE:
					case TRANSACTIONS_COMMITTED:
					case TRANSACTIONS_ROLLED_BACK:
					case TRANSFORM:
					case TRANSFORMS:
					case TRANSLATE:
					case TRANSLATION:
					case TREAT:
					case TRIGGER:
					case TRIGGER_CATALOG:
					case TRIGGER_NAME:
					case TRIGGER_SCHEMA:
					case TRIM:
					case TRUE:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNDER:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNNAMED:
					case UNNEST:
					case UNTIL:
					case UPDATE:
					case UPPER:
					case USAGE:
					case USER_DEFINED_TYPE_CATALOG:
					case USER_DEFINED_TYPE_CODE:
					case USER_DEFINED_TYPE_NAME:
					case USER_DEFINED_TYPE_SCHEMA:
					case VACUUM:
					case VALID:
					case VALIDATOR:
					case VALUE:
					case VALUES:
					case VAR_POP:
					case VAR_SAMP:
					case VARCHAR:
					case VARYING:
					case VIEW:
					case VOLATILE:
					case WHENEVER:
					case WIDTH_BUCKET:
					case WITH:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case ABSTIME:
					case BIGSERIAL:
					case BIT_VARYING:
					case BOOL:
					case BOX:
					case BYTEA:
					case CHARACTER_VARYING:
					case CIDR:
					case CIRCLE:
					case FLOAT4:
					case FLOAT8:
					case INET:
					case INT2:
					case INT4:
					case INT8:
					case JSON:
					case JSONB:
					case LINE:
					case LSEG:
					case MACADDR:
					case MACADDR8:
					case MONEY:
					case PG_LSN:
					case POINT:
					case POLYGON:
					case RELTIME:
					case SERIAL:
					case SERIAL2:
					case SERIAL4:
					case SERIAL8:
					case SMALLSERIAL:
					case TEXT:
					case TIMESTAMPTZ:
					case TIMETZ:
					case TSQUERY:
					case TSVECTOR:
					case TXID_SNAPSHOT:
					case UUID:
					case VARBIT:
					case XML:
					case COLON:
					case DOLLAR:
					case DOLLAR_DOLLAR:
					case OPEN_PAREN:
					case BIT_STRING:
					case REGEX_STRING:
					case NUMERIC_LITERAL:
					case INTEGER_LITERAL:
					case HEX_INTEGER_LITERAL:
					case SINGLEQ_STRING_LITERAL:
					case DOUBLEQ_STRING_LITERAL:
					case IDENTIFIER:
					case DOLLAR_DEC:
					case IDENTIFIER_UNICODE:
					case AT_SIGN:
					case BANG_BANG:
					case MINUS:
					case PLUS:
					case QMARK:
					case QMARK_HYPHEN:
					case TIL:
						{
						{
						setState(4400);
						((Column_listContext)_localctx).column_name_ = expr(0);
						setState(4405);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
						case 1:
							{
							setState(4402);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AS) {
								{
								setState(4401);
								match(AS);
								}
							}

							setState(4404);
							((Column_listContext)_localctx).output_name = name_();
							}
							break;
						}
						}
						}
						break;
					case STAR:
						{
						setState(4407);
						match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(4414);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_parameterContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSqlParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSqlParser.VERBOSE, 0); }
		public TerminalNode COSTS() { return getToken(PostgreSqlParser.COSTS, 0); }
		public TerminalNode BUFFERS() { return getToken(PostgreSqlParser.BUFFERS, 0); }
		public TerminalNode TIMING() { return getToken(PostgreSqlParser.TIMING, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode FORMAT() { return getToken(PostgreSqlParser.FORMAT, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public TerminalNode XML() { return getToken(PostgreSqlParser.XML, 0); }
		public TerminalNode JSON() { return getToken(PostgreSqlParser.JSON, 0); }
		public TerminalNode YAML() { return getToken(PostgreSqlParser.YAML, 0); }
		public Explain_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterExplain_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitExplain_parameter(this);
		}
	}

	public final Explain_parameterContext explain_parameter() throws RecognitionException {
		Explain_parameterContext _localctx = new Explain_parameterContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_explain_parameter);
		int _la;
		try {
			setState(4421);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANALYZE:
			case BUFFERS:
			case COSTS:
			case TIMING:
			case VERBOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4415);
				_la = _input.LA(1);
				if ( !(_la==ANALYZE || _la==BUFFERS || _la==COSTS || _la==TIMING || _la==VERBOSE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -2918355150198407171L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7662894626537209859L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 119L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3341677518431191039L) != 0) || _la==QMARK) {
					{
					setState(4416);
					param_value();
					}
				}

				}
				break;
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4419);
				match(FORMAT);
				setState(4420);
				_la = _input.LA(1);
				if ( !(_la==YAML || ((((_la - 735)) & ~0x3f) == 0 && ((1L << (_la - 735)) & 33685505L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSqlParser.PRECEDING, 0); }
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral() {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(PostgreSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSqlParser.ROW, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSqlParser.FOLLOWING, 0); }
		public FrameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFrame(this);
		}
	}

	public final FrameContext frame() throws RecognitionException {
		FrameContext _localctx = new FrameContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_frame);
		try {
			setState(4435);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4423);
				match(UNBOUNDED);
				setState(4424);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4425);
				parameterOrIntegerLiteral();
				setState(4426);
				match(PRECEDING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4428);
				match(CURRENT);
				setState(4429);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4430);
				parameterOrIntegerLiteral();
				setState(4431);
				match(FOLLOWING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4433);
				match(UNBOUNDED);
				setState(4434);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_startContext extends ParserRuleContext {
		public FrameContext frame() {
			return getRuleContext(FrameContext.class,0);
		}
		public Frame_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFrame_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFrame_start(this);
		}
	}

	public final Frame_startContext frame_start() throws RecognitionException {
		Frame_startContext _localctx = new Frame_startContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_frame_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4437);
			frame();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_endContext extends ParserRuleContext {
		public FrameContext frame() {
			return getRuleContext(FrameContext.class,0);
		}
		public Frame_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_end; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFrame_end(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFrame_end(this);
		}
	}

	public final Frame_endContext frame_end() throws RecognitionException {
		Frame_endContext _localctx = new Frame_endContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_frame_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4439);
			frame();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_clauseContext extends ParserRuleContext {
		public Frame_startContext frame_start() {
			return getRuleContext(Frame_startContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSqlParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSqlParser.ROWS, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSqlParser.AND, 0); }
		public Frame_endContext frame_end() {
			return getRuleContext(Frame_endContext.class,0);
		}
		public Frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFrame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFrame_clause(this);
		}
	}

	public final Frame_clauseContext frame_clause() throws RecognitionException {
		Frame_clauseContext _localctx = new Frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_frame_clause);
		int _la;
		try {
			setState(4449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4441);
				_la = _input.LA(1);
				if ( !(_la==RANGE || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4442);
				frame_start();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4443);
				_la = _input.LA(1);
				if ( !(_la==RANGE || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4444);
				match(BETWEEN);
				setState(4445);
				frame_start();
				setState(4446);
				match(AND);
				setState(4447);
				frame_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_definitionContext extends ParserRuleContext {
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitWindow_definition(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_window_definition);
		int _la;
		try {
			setState(4463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4451);
				window_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4452);
				match(PARTITION);
				setState(4453);
				match(BY);
				setState(4454);
				expr(0);
				setState(4459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4455);
					match(COMMA);
					setState(4456);
					expr(0);
					}
					}
					setState(4461);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4462);
				order_by_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSqlParser.WINDOW, 0); }
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitWindow_clause(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_window_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4465);
			match(WINDOW);
			setState(4466);
			window_name();
			setState(4467);
			match(AS);
			setState(4468);
			match(OPEN_PAREN);
			setState(4469);
			window_definition();
			setState(4470);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Combine_clauseContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(PostgreSqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSqlParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSqlParser.EXCEPT, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public Combine_clauseContext combine_clause() {
			return getRuleContext(Combine_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSqlParser.DISTINCT, 0); }
		public Combine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_combine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCombine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCombine_clause(this);
		}
	}

	public final Combine_clauseContext combine_clause() throws RecognitionException {
		Combine_clauseContext _localctx = new Combine_clauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_combine_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4472);
			_la = _input.LA(1);
			if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(4473);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4479);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4476);
					match(OPEN_PAREN);
					}
					} 
				}
				setState(4481);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
			}
			setState(4484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				setState(4482);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(4483);
				values_stmt();
				}
				break;
			}
			setState(4489);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,526,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4486);
					match(CLOSE_PAREN);
					}
					} 
				}
				setState(4491);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,526,_ctx);
			}
			setState(4493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4492);
				combine_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public List<Order_by_itemContext> order_by_item() {
			return getRuleContexts(Order_by_itemContext.class);
		}
		public Order_by_itemContext order_by_item(int i) {
			return getRuleContext(Order_by_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_order_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4495);
			match(ORDER);
			setState(4496);
			match(BY);
			setState(4497);
			order_by_item();
			setState(4502);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4498);
					match(COMMA);
					setState(4499);
					order_by_item();
					}
					} 
				}
				setState(4504);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_itemContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.DOUBLEQ_STRING_LITERAL, 0); }
		public TerminalNode ASC() { return getToken(PostgreSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSqlParser.DESC, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public List<TerminalNode> NULLS() { return getTokens(PostgreSqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PostgreSqlParser.NULLS, i);
		}
		public List<TerminalNode> FIRST() { return getTokens(PostgreSqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PostgreSqlParser.FIRST, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PostgreSqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PostgreSqlParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Order_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterOrder_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitOrder_by_item(this);
		}
	}

	public final Order_by_itemContext order_by_item() throws RecognitionException {
		Order_by_itemContext _localctx = new Order_by_itemContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_order_by_item);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				setState(4505);
				expr(0);
				}
				break;
			case 2:
				{
				setState(4506);
				match(DOUBLEQ_STRING_LITERAL);
				}
				break;
			}
			setState(4513);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(4509);
				match(ASC);
				}
				break;
			case 2:
				{
				setState(4510);
				match(DESC);
				}
				break;
			case 3:
				{
				setState(4511);
				match(USING);
				setState(4512);
				expr(0);
				}
				break;
			}
			setState(4526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				{
				setState(4515);
				match(NULLS);
				setState(4516);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				setState(4523);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,531,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4518);
						match(COMMA);
						{
						setState(4519);
						match(NULLS);
						setState(4520);
						_la = _input.LA(1);
						if ( !(_la==FIRST || _la==LAST) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						} 
					}
					setState(4525);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,531,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSqlParser.LIMIT, 0); }
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral() {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public Func_callContext func_call() {
			return getRuleContext(Func_callContext.class,0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitLimit_clause(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4528);
			match(LIMIT);
			setState(4532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
			case INTEGER_LITERAL:
			case QMARK:
				{
				setState(4529);
				parameterOrIntegerLiteral();
				}
				break;
			case ALL:
				{
				setState(4530);
				match(ALL);
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(4531);
				func_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSqlParser.OFFSET, 0); }
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral() {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PostgreSqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSqlParser.ROWS, 0); }
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitOffset_clause(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_offset_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4534);
			match(OFFSET);
			setState(4535);
			parameterOrIntegerLiteral();
			setState(4537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4536);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fetch_clauseContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSqlParser.NEXT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSqlParser.ROWS, 0); }
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral() {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,0);
		}
		public Fetch_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFetch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFetch_clause(this);
		}
	}

	public final Fetch_clauseContext fetch_clause() throws RecognitionException {
		Fetch_clauseContext _localctx = new Fetch_clauseContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_fetch_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4539);
			match(FETCH);
			setState(4540);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 762)) & ~0x3f) == 0 && ((1L << (_la - 762)) & 576460752303427585L) != 0)) {
				{
				setState(4541);
				parameterOrIntegerLiteral();
				}
			}

			setState(4544);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4545);
			match(ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(PostgreSqlParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSqlParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSqlParser.SHARE, 0); }
		public TerminalNode OF() { return getToken(PostgreSqlParser.OF, 0); }
		public List<Table_name_Context> table_name_() {
			return getRuleContexts(Table_name_Context.class);
		}
		public Table_name_Context table_name_(int i) {
			return getRuleContext(Table_name_Context.class,i);
		}
		public List<TerminalNode> NOWAIT() { return getTokens(PostgreSqlParser.NOWAIT); }
		public TerminalNode NOWAIT(int i) {
			return getToken(PostgreSqlParser.NOWAIT, i);
		}
		public List<TerminalNode> SKIP_() { return getTokens(PostgreSqlParser.SKIP_); }
		public TerminalNode SKIP_(int i) {
			return getToken(PostgreSqlParser.SKIP_, i);
		}
		public List<TerminalNode> LOCKED() { return getTokens(PostgreSqlParser.LOCKED); }
		public TerminalNode LOCKED(int i) {
			return getToken(PostgreSqlParser.LOCKED, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFor_clause(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_for_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4547);
			match(FOR);
			setState(4555);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(4548);
				match(UPDATE);
				}
				break;
			case NO:
				{
				setState(4549);
				match(NO);
				setState(4550);
				match(KEY);
				setState(4551);
				match(UPDATE);
				}
				break;
			case SHARE:
				{
				setState(4552);
				match(SHARE);
				}
				break;
			case KEY:
				{
				setState(4553);
				match(KEY);
				setState(4554);
				match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(4557);
				match(OF);
				setState(4558);
				table_name_();
				setState(4563);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,537,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4559);
						match(COMMA);
						setState(4560);
						table_name_();
						}
						} 
					}
					setState(4565);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,537,_ctx);
				}
				}
				break;
			}
			setState(4573);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4571);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NOWAIT:
						{
						setState(4568);
						match(NOWAIT);
						}
						break;
					case SKIP_:
						{
						setState(4569);
						match(SKIP_);
						setState(4570);
						match(LOCKED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(4575);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Updater_clauseContext extends ParserRuleContext {
		public List<Updater_exprContext> updater_expr() {
			return getRuleContexts(Updater_exprContext.class);
		}
		public Updater_exprContext updater_expr(int i) {
			return getRuleContext(Updater_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Updater_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updater_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterUpdater_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitUpdater_clause(this);
		}
	}

	public final Updater_clauseContext updater_clause() throws RecognitionException {
		Updater_clauseContext _localctx = new Updater_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_updater_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4576);
			updater_expr();
			setState(4581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4577);
				match(COMMA);
				setState(4578);
				updater_expr();
				}
				}
				setState(4583);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Updater_exprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSqlParser.EQUAL, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Updater_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updater_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterUpdater_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitUpdater_expr(this);
		}
	}

	public final Updater_exprContext updater_expr() throws RecognitionException {
		Updater_exprContext _localctx = new Updater_exprContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_updater_expr);
		try {
			setState(4593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4584);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(4585);
				match(OPEN_PAREN);
				setState(4586);
				name_list();
				setState(4587);
				match(CLOSE_PAREN);
				setState(4588);
				match(EQUAL);
				setState(4591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(4589);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4590);
					expr_list();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSqlParser.RETURNING, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitReturning_clause(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_returning_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4595);
			match(RETURNING);
			setState(4596);
			column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprContext extends ParserRuleContext {
		public Token op;
		public TerminalNode NULL() { return getToken(PostgreSqlParser.NULL, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSqlParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSqlParser.DEFAULT, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSqlParser.INTEGER_LITERAL, 0); }
		public TerminalNode HEX_INTEGER_LITERAL() { return getToken(PostgreSqlParser.HEX_INTEGER_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(PostgreSqlParser.NUMERIC_LITERAL, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(PostgreSqlParser.BIT_STRING, 0); }
		public TerminalNode REGEX_STRING() { return getToken(PostgreSqlParser.REGEX_STRING, 0); }
		public List<TerminalNode> DOLLAR_DOLLAR() { return getTokens(PostgreSqlParser.DOLLAR_DOLLAR); }
		public TerminalNode DOLLAR_DOLLAR(int i) {
			return getToken(PostgreSqlParser.DOLLAR_DOLLAR, i);
		}
		public List<TerminalNode> DOLLAR() { return getTokens(PostgreSqlParser.DOLLAR); }
		public TerminalNode DOLLAR(int i) {
			return getToken(PostgreSqlParser.DOLLAR, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BANG_BANG() { return getToken(PostgreSqlParser.BANG_BANG, 0); }
		public TerminalNode AT_SIGN() { return getToken(PostgreSqlParser.AT_SIGN, 0); }
		public TerminalNode PLUS() { return getToken(PostgreSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSqlParser.MINUS, 0); }
		public TerminalNode TIL() { return getToken(PostgreSqlParser.TIL, 0); }
		public TerminalNode QMARK_HYPHEN() { return getToken(PostgreSqlParser.QMARK_HYPHEN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public Func_callContext func_call() {
			return getRuleContext(Func_callContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSqlParser.DOT, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public AggregateContext aggregate() {
			return getRuleContext(AggregateContext.class,0);
		}
		public Array_cons_exprContext array_cons_expr() {
			return getRuleContext(Array_cons_exprContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode DOLLAR_DEC() { return getToken(PostgreSqlParser.DOLLAR_DEC, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public ParameterContext parameter() {
			return getRuleContext(ParameterContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSqlParser.CARET, 0); }
		public TerminalNode PIPE_SLASH() { return getToken(PostgreSqlParser.PIPE_SLASH, 0); }
		public TerminalNode PIPE_PIPE_SLASH() { return getToken(PostgreSqlParser.PIPE_PIPE_SLASH, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSqlParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSqlParser.PERCENT, 0); }
		public TerminalNode AMP() { return getToken(PostgreSqlParser.AMP, 0); }
		public TerminalNode PIPE() { return getToken(PostgreSqlParser.PIPE, 0); }
		public TerminalNode HASH() { return getToken(PostgreSqlParser.HASH, 0); }
		public TerminalNode LT_LT() { return getToken(PostgreSqlParser.LT_LT, 0); }
		public TerminalNode LT_LT_EQ() { return getToken(PostgreSqlParser.LT_LT_EQ, 0); }
		public TerminalNode GT_GT() { return getToken(PostgreSqlParser.GT_GT, 0); }
		public TerminalNode AT_AT() { return getToken(PostgreSqlParser.AT_AT, 0); }
		public TerminalNode LT_HYPHEN_GT() { return getToken(PostgreSqlParser.LT_HYPHEN_GT, 0); }
		public TerminalNode AT_GT() { return getToken(PostgreSqlParser.AT_GT, 0); }
		public TerminalNode LT_AT() { return getToken(PostgreSqlParser.LT_AT, 0); }
		public TerminalNode TIL_EQ() { return getToken(PostgreSqlParser.TIL_EQ, 0); }
		public TerminalNode TIL_STAR() { return getToken(PostgreSqlParser.TIL_STAR, 0); }
		public TerminalNode TIL_TIL() { return getToken(PostgreSqlParser.TIL_TIL, 0); }
		public TerminalNode TIL_LT_TIL() { return getToken(PostgreSqlParser.TIL_LT_TIL, 0); }
		public TerminalNode TIL_GT_TIL() { return getToken(PostgreSqlParser.TIL_GT_TIL, 0); }
		public TerminalNode TIL_LTE_TIL() { return getToken(PostgreSqlParser.TIL_LTE_TIL, 0); }
		public TerminalNode TIL_GTE_TIL() { return getToken(PostgreSqlParser.TIL_GTE_TIL, 0); }
		public TerminalNode LT_QMARK_GT() { return getToken(PostgreSqlParser.LT_QMARK_GT, 0); }
		public TerminalNode HYPHEN_GT() { return getToken(PostgreSqlParser.HYPHEN_GT, 0); }
		public TerminalNode HYPHEN_GT_GT() { return getToken(PostgreSqlParser.HYPHEN_GT_GT, 0); }
		public TerminalNode HASH_HASH() { return getToken(PostgreSqlParser.HASH_HASH, 0); }
		public TerminalNode HASH_GT() { return getToken(PostgreSqlParser.HASH_GT, 0); }
		public TerminalNode HASH_GT_GT() { return getToken(PostgreSqlParser.HASH_GT_GT, 0); }
		public TerminalNode QMARK() { return getToken(PostgreSqlParser.QMARK, 0); }
		public TerminalNode QMARK_PIPE() { return getToken(PostgreSqlParser.QMARK_PIPE, 0); }
		public TerminalNode QMARK_AMP() { return getToken(PostgreSqlParser.QMARK_AMP, 0); }
		public TerminalNode QMARK_HASH() { return getToken(PostgreSqlParser.QMARK_HASH, 0); }
		public TerminalNode LT_CARET() { return getToken(PostgreSqlParser.LT_CARET, 0); }
		public TerminalNode AMP_LT() { return getToken(PostgreSqlParser.AMP_LT, 0); }
		public TerminalNode HYPHEN_PIPE_HYPHEN() { return getToken(PostgreSqlParser.HYPHEN_PIPE_HYPHEN, 0); }
		public TerminalNode HASH_EQ() { return getToken(PostgreSqlParser.HASH_EQ, 0); }
		public TerminalNode AMP_AMP() { return getToken(PostgreSqlParser.AMP_AMP, 0); }
		public TerminalNode PIPE_PIPE() { return getToken(PostgreSqlParser.PIPE_PIPE, 0); }
		public TerminalNode EQUAL_GT() { return getToken(PostgreSqlParser.EQUAL_GT, 0); }
		public TerminalNode AND() { return getToken(PostgreSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSqlParser.OR, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSqlParser.LIKE, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSqlParser.BETWEEN, 0); }
		public TerminalNode IN() { return getToken(PostgreSqlParser.IN, 0); }
		public TerminalNode LT() { return getToken(PostgreSqlParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSqlParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSqlParser.EQUAL, 0); }
		public TerminalNode LTE() { return getToken(PostgreSqlParser.LTE, 0); }
		public TerminalNode GTE() { return getToken(PostgreSqlParser.GTE, 0); }
		public TerminalNode LT_GT() { return getToken(PostgreSqlParser.LT_GT, 0); }
		public TerminalNode BANG_EQUAL() { return getToken(PostgreSqlParser.BANG_EQUAL, 0); }
		public TerminalNode IS() { return getToken(PostgreSqlParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSqlParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSqlParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSqlParser.OPEN_BRACKET, i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSqlParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSqlParser.CLOSE_BRACKET, i);
		}
		public TerminalNode BANG() { return getToken(PostgreSqlParser.BANG, 0); }
		public List<TerminalNode> COLON() { return getTokens(PostgreSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(PostgreSqlParser.COLON, i);
		}
		public List<TerminalNode> COLON_COLON() { return getTokens(PostgreSqlParser.COLON_COLON); }
		public TerminalNode COLON_COLON(int i) {
			return getToken(PostgreSqlParser.COLON_COLON, i);
		}
		public TerminalNode OF() { return getToken(PostgreSqlParser.OF, 0); }
		public TerminalNode AT() { return getToken(PostgreSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSqlParser.ZONE, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitExpr(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 432;
		enterRecursionRule(_localctx, 432, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(4599);
				match(NULL);
				}
				break;
			case 2:
				{
				setState(4600);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				{
				setState(4601);
				match(CURRENT_ROLE);
				}
				break;
			case 4:
				{
				setState(4602);
				match(CURRENT_TIME);
				}
				break;
			case 5:
				{
				setState(4603);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				{
				setState(4604);
				match(CURRENT_USER);
				}
				break;
			case 7:
				{
				setState(4605);
				match(DEFAULT);
				}
				break;
			case 8:
				{
				setState(4606);
				match(INTEGER_LITERAL);
				}
				break;
			case 9:
				{
				setState(4607);
				match(HEX_INTEGER_LITERAL);
				}
				break;
			case 10:
				{
				setState(4608);
				match(NUMERIC_LITERAL);
				}
				break;
			case 11:
				{
				setState(4609);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 12:
				{
				setState(4610);
				match(BIT_STRING);
				}
				break;
			case 13:
				{
				setState(4611);
				match(REGEX_STRING);
				}
				break;
			case 14:
				{
				setState(4612);
				match(DOLLAR_DOLLAR);
				setState(4614); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4613);
						_la = _input.LA(1);
						if ( _la <= 0 || (_la==DOLLAR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4616); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(4618);
				match(DOLLAR_DOLLAR);
				}
				break;
			case 15:
				{
				setState(4619);
				match(DOLLAR);
				setState(4620);
				identifier(0);
				setState(4622); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4621);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==DOLLAR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4624); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -1L) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -1L) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1L) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -1L) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -1152921504606846977L) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -1L) != 0) || ((((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & 31L) != 0) );
				setState(4626);
				match(DOLLAR);
				setState(4627);
				identifier(0);
				setState(4628);
				match(DOLLAR);
				}
				break;
			case 16:
				{
				setState(4630);
				bool_expr(0);
				}
				break;
			case 17:
				{
				setState(4631);
				values_stmt();
				}
				break;
			case 18:
				{
				setState(4632);
				expr_list();
				}
				break;
			case 19:
				{
				setState(4633);
				match(OPEN_PAREN);
				setState(4634);
				expr(0);
				setState(4635);
				match(CLOSE_PAREN);
				}
				break;
			case 20:
				{
				setState(4637);
				type_name();
				setState(4638);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 21:
				{
				setState(4640);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & 8724152325L) != 0)) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4641);
				expr(31);
				}
				break;
			case 22:
				{
				setState(4642);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==QMARK_HYPHEN || _la==TIL) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4643);
				expr(30);
				}
				break;
			case 23:
				{
				setState(4644);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==NOT) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4645);
				expr(18);
				}
				break;
			case 24:
				{
				setState(4646);
				func_call();
				}
				break;
			case 25:
				{
				setState(4647);
				identifier(0);
				}
				break;
			case 26:
				{
				setState(4648);
				match(CAST);
				setState(4649);
				match(OPEN_PAREN);
				setState(4650);
				expr(0);
				setState(4651);
				match(AS);
				setState(4652);
				data_type();
				setState(4653);
				match(CLOSE_PAREN);
				}
				break;
			case 27:
				{
				setState(4655);
				correlation_name();
				setState(4656);
				match(DOT);
				setState(4657);
				column_name();
				}
				break;
			case 28:
				{
				setState(4659);
				case_expr();
				}
				break;
			case 29:
				{
				setState(4660);
				data_type();
				setState(4661);
				expr(10);
				}
				break;
			case 30:
				{
				setState(4663);
				aggregate();
				}
				break;
			case 31:
				{
				setState(4664);
				array_cons_expr();
				}
				break;
			case 32:
				{
				setState(4665);
				match(EXISTS);
				setState(4666);
				expr(4);
				}
				break;
			case 33:
				{
				setState(4667);
				match(DOLLAR_DEC);
				}
				break;
			case 34:
				{
				setState(4668);
				match(OPEN_PAREN);
				setState(4669);
				select_stmt();
				setState(4670);
				match(CLOSE_PAREN);
				}
				break;
			case 35:
				{
				setState(4672);
				parameter();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4774);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4772);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4675);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(4676);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & 402653185L) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4677);
						expr(29);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4678);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(4679);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & 1153484454560268289L) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4680);
						expr(28);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4681);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(4682);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4683);
						expr(27);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4684);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(4685);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==NOT || _la==OR || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & 8984714941548575L) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4686);
						expr(26);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4687);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(4691);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NOT:
							{
							setState(4688);
							match(NOT);
							setState(4689);
							match(LIKE);
							}
							break;
						case LIKE:
							{
							setState(4690);
							match(LIKE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4693);
						expr(25);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4694);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(4696);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4695);
							match(NOT);
							}
						}

						setState(4698);
						match(BETWEEN);
						setState(4699);
						expr(0);
						setState(4700);
						match(AND);
						setState(4701);
						expr(24);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4703);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(4704);
						match(IN);
						setState(4705);
						expr(23);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4706);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(4707);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & 622645L) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4708);
						expr(22);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4709);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(4710);
						match(IS);
						setState(4712);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4711);
							match(NOT);
							}
						}

						setState(4714);
						match(DISTINCT);
						setState(4715);
						match(FROM);
						setState(4716);
						expr(20);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4717);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(4718);
						match(OPEN_BRACKET);
						setState(4719);
						expr(0);
						setState(4720);
						match(CLOSE_BRACKET);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4722);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(4723);
						((ExprContext)_localctx).op = match(BANG);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4724);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(4725);
						((ExprContext)_localctx).op = match(IS);
						setState(4730);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
						case 1:
							{
							setState(4726);
							bool_expr(0);
							}
							break;
						case 2:
							{
							setState(4727);
							match(NULL);
							}
							break;
						case 3:
							{
							setState(4728);
							match(NOT);
							setState(4729);
							match(NULL);
							}
							break;
						}
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4732);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(4742); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(4733);
								match(OPEN_BRACKET);
								setState(4735);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
								case 1:
									{
									setState(4734);
									expr(0);
									}
									break;
								}
								setState(4737);
								match(COLON);
								setState(4739);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3051208608109821955L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 4537576733544546303L) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & 1262854602757L) != 0)) {
									{
									setState(4738);
									expr(0);
									}
								}

								setState(4741);
								match(CLOSE_BRACKET);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(4744); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,553,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4746);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(4749); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(4747);
								match(COLON_COLON);
								setState(4748);
								data_type();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(4751); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,554,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4753);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(4754);
						match(IS);
						setState(4755);
						match(OF);
						setState(4756);
						match(OPEN_PAREN);
						setState(4757);
						data_type();
						setState(4758);
						match(CLOSE_PAREN);
						}
						break;
					case 16:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4760);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(4761);
						match(DOT);
						setState(4764);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case WHITESPACE:
						case A_:
						case ABORT:
						case ABS:
						case ABSOLUTE:
						case ACCESS:
						case ACTION:
						case ADA:
						case ADD:
						case ADMIN:
						case AFTER:
						case AGGREGATE:
						case ALLOCATE:
						case ALSO:
						case ALTER:
						case ALWAYS:
						case ANY:
						case ARE:
						case ASENSITIVE:
						case ASSERTION:
						case ASSIGNMENT:
						case AT:
						case ATOMIC:
						case ATTRIBUTE:
						case ATTRIBUTES:
						case AVG:
						case BACKWARD:
						case BEFORE:
						case BEGIN:
						case BERNOULLI:
						case BETWEEN:
						case BIGINT:
						case BIT:
						case BIT_LENGTH:
						case BLOB:
						case BOOLEAN:
						case BREADTH:
						case BY:
						case C_:
						case CACHE:
						case CALL:
						case CALLED:
						case CARDINALITY:
						case CASCADE:
						case CASCADED:
						case CATALOG:
						case CATALOG_NAME:
						case CEIL:
						case CEILING:
						case CHAIN:
						case CHAR:
						case CHAR_LENGTH:
						case CHARACTER:
						case CHARACTER_LENGTH:
						case CHARACTER_SET_CATALOG:
						case CHARACTER_SET_NAME:
						case CHARACTER_SET_SCHEMA:
						case CHARACTERISTICS:
						case CHARACTERS:
						case CHECKPOINT:
						case CLASS:
						case CLASS_ORIGIN:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COALESCE:
						case COBOL:
						case COLLATION_CATALOG:
						case COLLATION_NAME:
						case COLLATION_SCHEMA:
						case COLLECT:
						case COLUMN_NAME:
						case COMMAND_FUNCTION:
						case COMMAND_FUNCTION_CODE:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case CONDITION:
						case CONDITION_NUMBER:
						case CONNECT:
						case CONNECTION:
						case CONNECTION_NAME:
						case CONSTRAINT_CATALOG:
						case CONSTRAINT_NAME:
						case CONSTRAINT_SCHEMA:
						case CONSTRAINTS:
						case CONSTRUCTOR:
						case CONTAINS:
						case CONTINUE:
						case CONVERSION:
						case CONVERT:
						case COPY:
						case CORR:
						case CORRESPONDING:
						case COUNT:
						case COVAR_POP:
						case COVAR_SAMP:
						case CSV:
						case CUBE:
						case CUME_DIST:
						case CURRENT:
						case CURRENT_DEFAULT_TRANSFORM_GROUP:
						case CURRENT_PATH:
						case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
						case CURSOR:
						case CURSOR_NAME:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DATE:
						case DATETIME_INTERVAL_CODE:
						case DATETIME_INTERVAL_PRECISION:
						case DAY:
						case DEALLOCATE:
						case DEC:
						case DECIMAL:
						case DECLARE:
						case DEFAULTS:
						case DEFERRED:
						case DEFINED:
						case DEFINER:
						case DEGREE:
						case DELETE:
						case DELIMITER:
						case DELIMITERS:
						case DENSE_RANK:
						case DEPTH:
						case DEREF:
						case DERIVED:
						case DESCRIBE:
						case DESCRIPTOR:
						case DETERMINISTIC:
						case DIAGNOSTICS:
						case DICTIONARY:
						case DISCONNECT:
						case DISPATCH:
						case DOMAIN:
						case DOUBLE:
						case DYNAMIC:
						case DYNAMIC_FUNCTION:
						case DYNAMIC_FUNCTION_CODE:
						case EACH:
						case ELEMENT:
						case ENCODING:
						case ENCRYPTED:
						case END:
						case EQUALS:
						case ESCAPE:
						case EVERY:
						case EXCEPTION:
						case EXCLUDE:
						case EXCLUDING:
						case EXCLUSIVE:
						case EXEC:
						case EXECUTE:
						case EXISTS:
						case EXP:
						case EXPLAIN:
						case EXTENSION:
						case EXTERNAL:
						case EXTRACT:
						case FILTER:
						case FINAL:
						case FIRST:
						case FLOAT:
						case FLOOR:
						case FOLLOWING:
						case FORCE:
						case FORMAT:
						case FORTRAN:
						case FORWARD:
						case FOUND:
						case FREE:
						case FUNCTION:
						case FUSION:
						case G_:
						case GENERAL:
						case GENERATED:
						case GET:
						case GLOBAL:
						case GO:
						case GOTO:
						case GRANTED:
						case GREATEST:
						case GROUPING:
						case HANDLER:
						case HIERARCHY:
						case HOLD:
						case HOST:
						case HOUR:
						case IDENTITY:
						case IGNORE:
						case IMMEDIATE:
						case IMMUTABLE:
						case IMPLEMENTATION:
						case IMPLICIT:
						case INCLUDING:
						case INCREMENT:
						case INDEX:
						case INDICATOR:
						case INHERITS:
						case INOUT:
						case INPUT:
						case INSENSITIVE:
						case INSERT:
						case INSTANCE:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERSECTION:
						case INTERVAL:
						case INVOKER:
						case ISOLATION:
						case K_:
						case KEY:
						case KEY_MEMBER:
						case KEY_TYPE:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LEAST:
						case LEFT:
						case LENGTH:
						case LEVEL:
						case LISTEN:
						case LN:
						case LOAD:
						case LOCAL:
						case LOCATION:
						case LOCATOR:
						case LOCK:
						case LOCKED:
						case LOWER:
						case M_:
						case MAP:
						case MATCH:
						case MATCHED:
						case MAX:
						case MAXVALUE:
						case MEMBER:
						case MERGE:
						case MESSAGE_LENGTH:
						case MESSAGE_OCTET_LENGTH:
						case MESSAGE_TEXT:
						case METHOD:
						case MIN:
						case MINUTE:
						case MINVALUE:
						case MOD:
						case MODE:
						case MODIFIES:
						case MODULE:
						case MONTH:
						case MORE_:
						case MOVE:
						case MULTISET:
						case MUMPS:
						case NAME:
						case NAMES:
						case NATIONAL:
						case NCHAR:
						case NCLOB:
						case NESTING:
						case NEW:
						case NEXT:
						case NO:
						case NONE:
						case NORMALIZE:
						case NORMALIZED:
						case NOTHING:
						case NOTIFY:
						case NOWAIT:
						case NULLABLE:
						case NULLIF:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case OBJECT:
						case OCTET_LENGTH:
						case OCTETS:
						case OF:
						case OFF:
						case OIDS:
						case OLD:
						case OPEN:
						case OPERATOR:
						case OPTION:
						case OPTIONS:
						case ORDERING:
						case ORDINALITY:
						case OTHERS:
						case OUT:
						case OUTPUT:
						case OVER:
						case OVERLAY:
						case OVERRIDING:
						case OWNER:
						case PAD:
						case PARAMETER:
						case PARAMETER_MODE:
						case PARAMETER_NAME:
						case PARAMETER_ORDINAL_POSITION:
						case PARAMETER_SPECIFIC_CATALOG:
						case PARAMETER_SPECIFIC_NAME:
						case PARAMETER_SPECIFIC_SCHEMA:
						case PARTIAL:
						case PARTITION:
						case PASCAL:
						case PASSWORD:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case PLAIN:
						case PLI:
						case POSITION:
						case POWER:
						case PRECEDING:
						case PRECISION:
						case PREPARE:
						case PRESERVE:
						case PRIOR:
						case PRIVILEGES:
						case PROCEDURAL:
						case PROCEDURE:
						case PUBLIC:
						case QUOTE:
						case RANGE:
						case RANK:
						case READ:
						case READS:
						case REAL:
						case RECHECK:
						case RECURSIVE:
						case REF:
						case REFERENCING:
						case REFRESH:
						case REGR_AVGX:
						case REGR_AVGY:
						case REGR_COUNT:
						case REGR_INTERCEPT:
						case REGR_SLOPE:
						case REGR_SXX:
						case REGR_SXY:
						case REGR_SYY:
						case REINDEX:
						case RELATIVE:
						case RELEASE:
						case RENAME:
						case REPEATABLE:
						case REPLACE:
						case RESET:
						case RESTART:
						case RESTRICT:
						case RESULT:
						case RETURN:
						case RETURNED_CARDINALITY:
						case RETURNED_LENGTH:
						case RETURNED_OCTET_LENGTH:
						case RETURNED_SQLSTATE:
						case RETURNS:
						case REVOKE:
						case RIGHT:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROUTINE:
						case ROUTINE_CATALOG:
						case ROUTINE_NAME:
						case ROUTINE_SCHEMA:
						case ROW:
						case ROW_COUNT:
						case ROW_NUMBER:
						case ROWS:
						case RULE:
						case SAVEPOINT:
						case SCALE:
						case SCHEMA:
						case SCHEMA_NAME:
						case SCOPE:
						case SCOPE_CATALOG:
						case SCOPE_NAME:
						case SCOPE_SCHEMA:
						case SCROLL:
						case SEARCH:
						case SECOND:
						case SECTION:
						case SECURITY:
						case SELF:
						case SENSITIVE:
						case SEQUENCE:
						case SEQUENCES:
						case SERIALIZABLE:
						case SERVER_NAME:
						case SESSION:
						case SET:
						case SETOF:
						case SETS:
						case SHARE:
						case SHOW:
						case SIMPLE:
						case SIZE:
						case SMALLINT:
						case SOME:
						case SOURCE:
						case SPACE:
						case SPECIFIC:
						case SPECIFIC_NAME:
						case SPECIFICTYPE:
						case SQL:
						case SQLCODE:
						case SQLERROR:
						case SQLEXCEPTION:
						case SQLSTATE:
						case SQLWARNING:
						case SQRT:
						case STABLE:
						case START:
						case STATE:
						case STATEMENT:
						case STATIC:
						case STATISTICS:
						case STDDEV_POP:
						case STDDEV_SAMP:
						case STDIN:
						case STDOUT:
						case STORAGE:
						case STRICT:
						case STRUCTURE:
						case STYLE:
						case SUBCLASS_ORIGIN:
						case SUBMULTISET:
						case SUBSTRING:
						case SUM:
						case SYSID:
						case SYSTEM:
						case SYSTEM_USER:
						case TABLE_NAME:
						case TABLESPACE:
						case TEMP:
						case TEMPLATE:
						case TEMPORARY:
						case TIES:
						case TIME:
						case TIMESTAMP:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TOP_LEVEL_COUNT:
						case TRANSACTION:
						case TRANSACTION_ACTIVE:
						case TRANSACTIONS_COMMITTED:
						case TRANSACTIONS_ROLLED_BACK:
						case TRANSFORM:
						case TRANSFORMS:
						case TRANSLATE:
						case TRANSLATION:
						case TREAT:
						case TRIGGER:
						case TRIGGER_CATALOG:
						case TRIGGER_NAME:
						case TRIGGER_SCHEMA:
						case TRIM:
						case TRUE:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case UESCAPE:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNDER:
						case UNENCRYPTED:
						case UNKNOWN:
						case UNLISTEN:
						case UNNAMED:
						case UNNEST:
						case UNTIL:
						case UPDATE:
						case UPPER:
						case USAGE:
						case USER_DEFINED_TYPE_CATALOG:
						case USER_DEFINED_TYPE_CODE:
						case USER_DEFINED_TYPE_NAME:
						case USER_DEFINED_TYPE_SCHEMA:
						case VACUUM:
						case VALID:
						case VALIDATOR:
						case VALUE:
						case VALUES:
						case VAR_POP:
						case VAR_SAMP:
						case VARCHAR:
						case VARYING:
						case VIEW:
						case VOLATILE:
						case WHENEVER:
						case WIDTH_BUCKET:
						case WITHIN:
						case WITHOUT:
						case WORK:
						case WRITE:
						case YEAR:
						case ZONE:
						case ABSTIME:
						case BIGSERIAL:
						case BIT_VARYING:
						case BOOL:
						case BOX:
						case BYTEA:
						case CHARACTER_VARYING:
						case CIDR:
						case CIRCLE:
						case FLOAT4:
						case FLOAT8:
						case INET:
						case INT2:
						case INT4:
						case INT8:
						case JSON:
						case JSONB:
						case LINE:
						case LSEG:
						case MACADDR:
						case MACADDR8:
						case MONEY:
						case PG_LSN:
						case POINT:
						case POLYGON:
						case RELTIME:
						case SERIAL:
						case SERIAL2:
						case SERIAL4:
						case SERIAL8:
						case SMALLSERIAL:
						case TEXT:
						case TIMESTAMPTZ:
						case TIMETZ:
						case TSQUERY:
						case TSVECTOR:
						case TXID_SNAPSHOT:
						case UUID:
						case VARBIT:
						case XML:
						case DOUBLEQ_STRING_LITERAL:
						case IDENTIFIER:
						case IDENTIFIER_UNICODE:
							{
							setState(4762);
							identifier(0);
							}
							break;
						case STAR:
							{
							setState(4763);
							match(STAR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 17:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4766);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						{
						setState(4767);
						match(AT);
						setState(4768);
						match(TIME);
						setState(4769);
						match(ZONE);
						}
						setState(4771);
						match(SINGLEQ_STRING_LITERAL);
						}
						break;
					}
					} 
				}
				setState(4776);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterContext extends ParserRuleContext {
		public Token prefix;
		public TerminalNode COLON() { return getToken(PostgreSqlParser.COLON, 0); }
		public TerminalNode SPEL() { return getToken(PostgreSqlParser.SPEL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reserved_keywordContext reserved_keyword() {
			return getRuleContext(Reserved_keywordContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSqlParser.INTEGER_LITERAL, 0); }
		public TerminalNode QMARK() { return getToken(PostgreSqlParser.QMARK, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_parameter);
		try {
			setState(4791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4777);
				match(COLON);
				setState(4778);
				match(SPEL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4779);
				match(COLON);
				setState(4780);
				identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4781);
				match(COLON);
				setState(4782);
				reserved_keyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4783);
				match(COLON);
				setState(4784);
				match(INTEGER_LITERAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4785);
				((ParameterContext)_localctx).prefix = match(QMARK);
				setState(4786);
				match(SPEL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4787);
				((ParameterContext)_localctx).prefix = match(QMARK);
				setState(4789);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
				case 1:
					{
					setState(4788);
					match(INTEGER_LITERAL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterOrIntegerLiteralContext extends ParserRuleContext {
		public ParameterContext parameter() {
			return getRuleContext(ParameterContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSqlParser.INTEGER_LITERAL, 0); }
		public ParameterOrIntegerLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterOrIntegerLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterParameterOrIntegerLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitParameterOrIntegerLiteral(this);
		}
	}

	public final ParameterOrIntegerLiteralContext parameterOrIntegerLiteral() throws RecognitionException {
		ParameterOrIntegerLiteralContext _localctx = new ParameterOrIntegerLiteralContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_parameterOrIntegerLiteral);
		try {
			setState(4795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
			case QMARK:
				enterOuterAlt(_localctx, 1);
				{
				setState(4793);
				parameter();
				}
				break;
			case INTEGER_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4794);
				match(INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterOrNumericLiteralContext extends ParserRuleContext {
		public ParameterContext parameter() {
			return getRuleContext(ParameterContext.class,0);
		}
		public TerminalNode NUMERIC_LITERAL() { return getToken(PostgreSqlParser.NUMERIC_LITERAL, 0); }
		public ParameterOrNumericLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterOrNumericLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterParameterOrNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitParameterOrNumericLiteral(this);
		}
	}

	public final ParameterOrNumericLiteralContext parameterOrNumericLiteral() throws RecognitionException {
		ParameterOrNumericLiteralContext _localctx = new ParameterOrNumericLiteralContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_parameterOrNumericLiteral);
		try {
			setState(4799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLON:
			case QMARK:
				enterOuterAlt(_localctx, 1);
				{
				setState(4797);
				parameter();
				}
				break;
			case NUMERIC_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4798);
				match(NUMERIC_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bool_exprContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PostgreSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSqlParser.FALSE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public List<Bool_exprContext> bool_expr() {
			return getRuleContexts(Bool_exprContext.class);
		}
		public Bool_exprContext bool_expr(int i) {
			return getRuleContext(Bool_exprContext.class,i);
		}
		public TerminalNode AND() { return getToken(PostgreSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSqlParser.OR, 0); }
		public Bool_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterBool_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitBool_expr(this);
		}
	}

	public final Bool_exprContext bool_expr() throws RecognitionException {
		return bool_expr(0);
	}

	private Bool_exprContext bool_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bool_exprContext _localctx = new Bool_exprContext(_ctx, _parentState);
		Bool_exprContext _prevctx = _localctx;
		int _startState = 440;
		enterRecursionRule(_localctx, 440, RULE_bool_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE:
				{
				setState(4802);
				match(TRUE);
				}
				break;
			case FALSE:
				{
				setState(4803);
				match(FALSE);
				}
				break;
			case NOT:
				{
				setState(4804);
				match(NOT);
				setState(4805);
				bool_expr(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(4816);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4814);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
					case 1:
						{
						_localctx = new Bool_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
						setState(4808);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4809);
						match(AND);
						setState(4810);
						bool_expr(3);
						}
						break;
					case 2:
						{
						_localctx = new Bool_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
						setState(4811);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(4812);
						match(OR);
						setState(4813);
						bool_expr(2);
						}
						break;
					}
					} 
				}
				setState(4818);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSqlParser.CASE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode END() { return getToken(PostgreSqlParser.END, 0); }
		public List<TerminalNode> WHEN() { return getTokens(PostgreSqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(PostgreSqlParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(PostgreSqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PostgreSqlParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(PostgreSqlParser.ELSE, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCase_expr(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_case_expr);
		int _la;
		try {
			setState(4852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4819);
				match(CASE);
				setState(4820);
				expr(0);
				setState(4826); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4821);
					match(WHEN);
					setState(4822);
					expr(0);
					setState(4823);
					match(THEN);
					setState(4824);
					expr(0);
					}
					}
					setState(4828); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4830);
					match(ELSE);
					setState(4831);
					expr(0);
					}
				}

				setState(4834);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4836);
				match(CASE);
				setState(4842); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4837);
					match(WHEN);
					setState(4838);
					predicate(0);
					setState(4839);
					match(THEN);
					setState(4840);
					expr(0);
					}
					}
					setState(4844); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4846);
					match(ELSE);
					setState(4847);
					expr(0);
					}
				}

				setState(4850);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitExpr_list(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4854);
			match(OPEN_PAREN);
			setState(4855);
			expr(0);
			setState(4860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4856);
				match(COMMA);
				setState(4857);
				expr(0);
				}
				}
				setState(4862);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4863);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_list_listContext extends ParserRuleContext {
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Expr_list_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterExpr_list_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitExpr_list_list(this);
		}
	}

	public final Expr_list_listContext expr_list_list() throws RecognitionException {
		Expr_list_listContext _localctx = new Expr_list_listContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_expr_list_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				{
				setState(4865);
				match(OPEN_PAREN);
				}
				break;
			}
			setState(4868);
			expr_list();
			setState(4873);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,572,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4869);
					match(COMMA);
					setState(4870);
					expr_list();
					}
					} 
				}
				setState(4875);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,572,_ctx);
			}
			setState(4877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				{
				setState(4876);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_sig_argContext extends ParserRuleContext {
		public Token argmode;
		public IdentifierContext argname;
		public Data_typeContext argtype;
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(PostgreSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PostgreSqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSqlParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSqlParser.VARIADIC, 0); }
		public Func_sig_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFunc_sig_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFunc_sig_arg(this);
		}
	}

	public final Func_sig_argContext func_sig_arg() throws RecognitionException {
		Func_sig_argContext _localctx = new Func_sig_argContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_func_sig_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513601L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7658391026909839363L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 3170536334544601087L) != 0)) {
				{
				setState(4880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
				case 1:
					{
					setState(4879);
					((Func_sig_argContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==OUT || _la==VARIADIC) ) {
						((Func_sig_argContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4883);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
				case 1:
					{
					setState(4882);
					((Func_sig_argContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(4885);
				((Func_sig_argContext)_localctx).argtype = data_type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_sig_arg_listContext extends ParserRuleContext {
		public List<Func_sig_argContext> func_sig_arg() {
			return getRuleContexts(Func_sig_argContext.class);
		}
		public Func_sig_argContext func_sig_arg(int i) {
			return getRuleContext(Func_sig_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Func_sig_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFunc_sig_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFunc_sig_arg_list(this);
		}
	}

	public final Func_sig_arg_listContext func_sig_arg_list() throws RecognitionException {
		Func_sig_arg_listContext _localctx = new Func_sig_arg_listContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_func_sig_arg_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4888);
			func_sig_arg();
			setState(4893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4889);
				match(COMMA);
				setState(4890);
				func_sig_arg();
				}
				}
				setState(4895);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_sigContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Func_sig_arg_listContext func_sig_arg_list() {
			return getRuleContext(Func_sig_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public Func_sigContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFunc_sig(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFunc_sig(this);
		}
	}

	public final Func_sigContext func_sig() throws RecognitionException {
		Func_sigContext _localctx = new Func_sigContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_func_sig);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4896);
			((Func_sigContext)_localctx).name = identifier(0);
			setState(4901);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(4897);
				match(OPEN_PAREN);
				setState(4898);
				func_sig_arg_list();
				setState(4899);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_sig_listContext extends ParserRuleContext {
		public List<Func_sigContext> func_sig() {
			return getRuleContexts(Func_sigContext.class);
		}
		public Func_sigContext func_sig(int i) {
			return getRuleContext(Func_sigContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Func_sig_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFunc_sig_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFunc_sig_list(this);
		}
	}

	public final Func_sig_listContext func_sig_list() throws RecognitionException {
		Func_sig_listContext _localctx = new Func_sig_listContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_func_sig_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4903);
			func_sig();
			setState(4908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4904);
				match(COMMA);
				setState(4905);
				func_sig();
				}
				}
				setState(4910);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_nameContext extends ParserRuleContext {
		public TerminalNode ABSTIME() { return getToken(PostgreSqlParser.ABSTIME, 0); }
		public TerminalNode RELTIME() { return getToken(PostgreSqlParser.RELTIME, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSqlParser.BIGINT, 0); }
		public TerminalNode BIGSERIAL() { return getToken(PostgreSqlParser.BIGSERIAL, 0); }
		public TerminalNode BIT() { return getToken(PostgreSqlParser.BIT, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSqlParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSqlParser.INTEGER_LITERAL, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode BIT_VARYING() { return getToken(PostgreSqlParser.BIT_VARYING, 0); }
		public TerminalNode BOOL() { return getToken(PostgreSqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSqlParser.BOOLEAN, 0); }
		public TerminalNode BOX() { return getToken(PostgreSqlParser.BOX, 0); }
		public TerminalNode BYTEA() { return getToken(PostgreSqlParser.BYTEA, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSqlParser.CHARACTER, 0); }
		public TerminalNode CHARACTER_VARYING() { return getToken(PostgreSqlParser.CHARACTER_VARYING, 0); }
		public TerminalNode CIDR() { return getToken(PostgreSqlParser.CIDR, 0); }
		public TerminalNode CIRCLE() { return getToken(PostgreSqlParser.CIRCLE, 0); }
		public TerminalNode DATE() { return getToken(PostgreSqlParser.DATE, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSqlParser.DECIMAL, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSqlParser.COMMA, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSqlParser.PRECISION, 0); }
		public TerminalNode FLOAT4() { return getToken(PostgreSqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(PostgreSqlParser.FLOAT8, 0); }
		public TerminalNode INET() { return getToken(PostgreSqlParser.INET, 0); }
		public TerminalNode INT() { return getToken(PostgreSqlParser.INT, 0); }
		public TerminalNode INT4() { return getToken(PostgreSqlParser.INT4, 0); }
		public TerminalNode INT2() { return getToken(PostgreSqlParser.INT2, 0); }
		public TerminalNode INT8() { return getToken(PostgreSqlParser.INT8, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSqlParser.INTERVAL, 0); }
		public TerminalNode FIELDS() { return getToken(PostgreSqlParser.FIELDS, 0); }
		public TerminalNode JSON() { return getToken(PostgreSqlParser.JSON, 0); }
		public TerminalNode JSONB() { return getToken(PostgreSqlParser.JSONB, 0); }
		public TerminalNode LINE() { return getToken(PostgreSqlParser.LINE, 0); }
		public TerminalNode LSEG() { return getToken(PostgreSqlParser.LSEG, 0); }
		public TerminalNode MACADDR() { return getToken(PostgreSqlParser.MACADDR, 0); }
		public TerminalNode MACADDR8() { return getToken(PostgreSqlParser.MACADDR8, 0); }
		public TerminalNode MONEY() { return getToken(PostgreSqlParser.MONEY, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSqlParser.NUMERIC, 0); }
		public TerminalNode PATH() { return getToken(PostgreSqlParser.PATH, 0); }
		public TerminalNode PG_LSN() { return getToken(PostgreSqlParser.PG_LSN, 0); }
		public TerminalNode POINT() { return getToken(PostgreSqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(PostgreSqlParser.POLYGON, 0); }
		public TerminalNode REAL() { return getToken(PostgreSqlParser.REAL, 0); }
		public TerminalNode SERIAL() { return getToken(PostgreSqlParser.SERIAL, 0); }
		public TerminalNode SERIAL2() { return getToken(PostgreSqlParser.SERIAL2, 0); }
		public TerminalNode SERIAL4() { return getToken(PostgreSqlParser.SERIAL4, 0); }
		public TerminalNode SERIAL8() { return getToken(PostgreSqlParser.SERIAL8, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSqlParser.SMALLINT, 0); }
		public TerminalNode SMALLSERIAL() { return getToken(PostgreSqlParser.SMALLSERIAL, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public List<TerminalNode> TIME() { return getTokens(PostgreSqlParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(PostgreSqlParser.TIME, i);
		}
		public TerminalNode ZONE() { return getToken(PostgreSqlParser.ZONE, 0); }
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSqlParser.WITHOUT, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMETZ() { return getToken(PostgreSqlParser.TIMETZ, 0); }
		public TerminalNode TIMESTAMPTZ() { return getToken(PostgreSqlParser.TIMESTAMPTZ, 0); }
		public TerminalNode TSQUERY() { return getToken(PostgreSqlParser.TSQUERY, 0); }
		public TerminalNode TSVECTOR() { return getToken(PostgreSqlParser.TSVECTOR, 0); }
		public TerminalNode TXID_SNAPSHOT() { return getToken(PostgreSqlParser.TXID_SNAPSHOT, 0); }
		public TerminalNode UUID() { return getToken(PostgreSqlParser.UUID, 0); }
		public TerminalNode VARBIT() { return getToken(PostgreSqlParser.VARBIT, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSqlParser.VARCHAR, 0); }
		public TerminalNode XML() { return getToken(PostgreSqlParser.XML, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitType_name(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_type_name);
		int _la;
		try {
			setState(5055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABSTIME:
				enterOuterAlt(_localctx, 1);
				{
				setState(4911);
				match(ABSTIME);
				}
				break;
			case RELTIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4912);
				match(RELTIME);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4913);
				match(BIGINT);
				}
				break;
			case BIGSERIAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4914);
				match(BIGSERIAL);
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4915);
				match(BIT);
				setState(4919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					setState(4916);
					match(OPEN_PAREN);
					setState(4917);
					match(INTEGER_LITERAL);
					setState(4918);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case BIT_VARYING:
				enterOuterAlt(_localctx, 6);
				{
				setState(4921);
				match(BIT_VARYING);
				setState(4925);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
				case 1:
					{
					setState(4922);
					match(OPEN_PAREN);
					setState(4923);
					match(INTEGER_LITERAL);
					setState(4924);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case BOOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(4927);
				match(BOOL);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 8);
				{
				setState(4928);
				match(BOOLEAN);
				}
				break;
			case BOX:
				enterOuterAlt(_localctx, 9);
				{
				setState(4929);
				match(BOX);
				}
				break;
			case BYTEA:
				enterOuterAlt(_localctx, 10);
				{
				setState(4930);
				match(BYTEA);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 11);
				{
				setState(4931);
				match(CHAR);
				setState(4935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4932);
					match(OPEN_PAREN);
					setState(4933);
					match(INTEGER_LITERAL);
					setState(4934);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 12);
				{
				setState(4937);
				match(CHARACTER);
				setState(4941);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(4938);
					match(OPEN_PAREN);
					setState(4939);
					match(INTEGER_LITERAL);
					setState(4940);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CHARACTER_VARYING:
				enterOuterAlt(_localctx, 13);
				{
				setState(4943);
				match(CHARACTER_VARYING);
				setState(4947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					setState(4944);
					match(OPEN_PAREN);
					setState(4945);
					match(INTEGER_LITERAL);
					setState(4946);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CIDR:
				enterOuterAlt(_localctx, 14);
				{
				setState(4949);
				match(CIDR);
				}
				break;
			case CIRCLE:
				enterOuterAlt(_localctx, 15);
				{
				setState(4950);
				match(CIRCLE);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 16);
				{
				setState(4951);
				match(DATE);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 17);
				{
				setState(4952);
				match(DECIMAL);
				setState(4958);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
				case 1:
					{
					setState(4953);
					match(OPEN_PAREN);
					setState(4954);
					match(INTEGER_LITERAL);
					setState(4955);
					match(COMMA);
					setState(4956);
					match(INTEGER_LITERAL);
					setState(4957);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 18);
				{
				setState(4960);
				match(DOUBLE);
				setState(4961);
				match(PRECISION);
				}
				break;
			case FLOAT4:
				enterOuterAlt(_localctx, 19);
				{
				setState(4962);
				match(FLOAT4);
				}
				break;
			case FLOAT8:
				enterOuterAlt(_localctx, 20);
				{
				setState(4963);
				match(FLOAT8);
				}
				break;
			case INET:
				enterOuterAlt(_localctx, 21);
				{
				setState(4964);
				match(INET);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 22);
				{
				setState(4965);
				match(INT);
				}
				break;
			case INT4:
				enterOuterAlt(_localctx, 23);
				{
				setState(4966);
				match(INT4);
				}
				break;
			case INT2:
				enterOuterAlt(_localctx, 24);
				{
				setState(4967);
				match(INT2);
				}
				break;
			case INT8:
				enterOuterAlt(_localctx, 25);
				{
				setState(4968);
				match(INT8);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 26);
				{
				setState(4969);
				match(INTEGER);
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 27);
				{
				setState(4970);
				match(INTERVAL);
				setState(4972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(4971);
					match(FIELDS);
					}
					break;
				}
				setState(4975);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					setState(4974);
					match(INTEGER_LITERAL);
					}
					break;
				}
				}
				break;
			case JSON:
				enterOuterAlt(_localctx, 28);
				{
				setState(4977);
				match(JSON);
				}
				break;
			case JSONB:
				enterOuterAlt(_localctx, 29);
				{
				setState(4978);
				match(JSONB);
				}
				break;
			case LINE:
				enterOuterAlt(_localctx, 30);
				{
				setState(4979);
				match(LINE);
				}
				break;
			case LSEG:
				enterOuterAlt(_localctx, 31);
				{
				setState(4980);
				match(LSEG);
				}
				break;
			case MACADDR:
				enterOuterAlt(_localctx, 32);
				{
				setState(4981);
				match(MACADDR);
				}
				break;
			case MACADDR8:
				enterOuterAlt(_localctx, 33);
				{
				setState(4982);
				match(MACADDR8);
				}
				break;
			case MONEY:
				enterOuterAlt(_localctx, 34);
				{
				setState(4983);
				match(MONEY);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 35);
				{
				setState(4984);
				match(NUMERIC);
				setState(4990);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(4985);
					match(OPEN_PAREN);
					setState(4986);
					match(INTEGER_LITERAL);
					setState(4987);
					match(COMMA);
					setState(4988);
					match(INTEGER_LITERAL);
					setState(4989);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PATH:
				enterOuterAlt(_localctx, 36);
				{
				setState(4992);
				match(PATH);
				}
				break;
			case PG_LSN:
				enterOuterAlt(_localctx, 37);
				{
				setState(4993);
				match(PG_LSN);
				}
				break;
			case POINT:
				enterOuterAlt(_localctx, 38);
				{
				setState(4994);
				match(POINT);
				}
				break;
			case POLYGON:
				enterOuterAlt(_localctx, 39);
				{
				setState(4995);
				match(POLYGON);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 40);
				{
				setState(4996);
				match(REAL);
				}
				break;
			case SERIAL:
				enterOuterAlt(_localctx, 41);
				{
				setState(4997);
				match(SERIAL);
				}
				break;
			case SERIAL2:
				enterOuterAlt(_localctx, 42);
				{
				setState(4998);
				match(SERIAL2);
				}
				break;
			case SERIAL4:
				enterOuterAlt(_localctx, 43);
				{
				setState(4999);
				match(SERIAL4);
				}
				break;
			case SERIAL8:
				enterOuterAlt(_localctx, 44);
				{
				setState(5000);
				match(SERIAL8);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 45);
				{
				setState(5001);
				match(SMALLINT);
				}
				break;
			case SMALLSERIAL:
				enterOuterAlt(_localctx, 46);
				{
				setState(5002);
				match(SMALLSERIAL);
				}
				break;
			case TEXT:
				enterOuterAlt(_localctx, 47);
				{
				setState(5003);
				match(TEXT);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 48);
				{
				setState(5004);
				match(TIME);
				setState(5008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
				case 1:
					{
					setState(5005);
					match(OPEN_PAREN);
					setState(5006);
					match(INTEGER_LITERAL);
					setState(5007);
					match(CLOSE_PAREN);
					}
					break;
				}
				setState(5013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(5010);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5011);
					match(TIME);
					setState(5012);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 49);
				{
				setState(5015);
				match(TIMESTAMP);
				setState(5019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					setState(5016);
					match(OPEN_PAREN);
					setState(5017);
					match(INTEGER_LITERAL);
					setState(5018);
					match(CLOSE_PAREN);
					}
					break;
				}
				setState(5024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
				case 1:
					{
					setState(5021);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5022);
					match(TIME);
					setState(5023);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case TIMETZ:
				enterOuterAlt(_localctx, 50);
				{
				setState(5026);
				match(TIMETZ);
				setState(5030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(5027);
					match(OPEN_PAREN);
					setState(5028);
					match(INTEGER_LITERAL);
					setState(5029);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case TIMESTAMPTZ:
				enterOuterAlt(_localctx, 51);
				{
				setState(5032);
				match(TIMESTAMPTZ);
				setState(5036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(5033);
					match(OPEN_PAREN);
					setState(5034);
					match(INTEGER_LITERAL);
					setState(5035);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case TSQUERY:
				enterOuterAlt(_localctx, 52);
				{
				setState(5038);
				match(TSQUERY);
				}
				break;
			case TSVECTOR:
				enterOuterAlt(_localctx, 53);
				{
				setState(5039);
				match(TSVECTOR);
				}
				break;
			case TXID_SNAPSHOT:
				enterOuterAlt(_localctx, 54);
				{
				setState(5040);
				match(TXID_SNAPSHOT);
				}
				break;
			case UUID:
				enterOuterAlt(_localctx, 55);
				{
				setState(5041);
				match(UUID);
				}
				break;
			case VARBIT:
				enterOuterAlt(_localctx, 56);
				{
				setState(5042);
				match(VARBIT);
				setState(5046);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(5043);
					match(OPEN_PAREN);
					setState(5044);
					match(INTEGER_LITERAL);
					setState(5045);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 57);
				{
				setState(5048);
				match(VARCHAR);
				setState(5052);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					setState(5049);
					match(OPEN_PAREN);
					setState(5050);
					match(INTEGER_LITERAL);
					setState(5051);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case XML:
				enterOuterAlt(_localctx, 58);
				{
				setState(5054);
				match(XML);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimezoneContext extends ParserRuleContext {
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.DOUBLEQ_STRING_LITERAL, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSqlParser.INTEGER_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(PostgreSqlParser.NUMERIC_LITERAL, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterTimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitTimezone(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_timezone);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5057);
			_la = _input.LA(1);
			if ( !(((((_la - 773)) & ~0x3f) == 0 && ((1L << (_la - 773)) & 51L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PostgreSqlParser.IS, 0); }
		public TerminalNode OF() { return getToken(PostgreSqlParser.OF, 0); }
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public OperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterOper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitOper(this);
		}
	}

	public final OperContext oper() throws RecognitionException {
		OperContext _localctx = new OperContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_oper);
		try {
			setState(5063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5060);
				match(IS);
				setState(5061);
				match(OF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5062);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregateContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FILTER() { return getToken(PostgreSqlParser.FILTER, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSqlParser.WHERE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSqlParser.DISTINCT, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSqlParser.GROUP, 0); }
		public AggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAggregate(this);
		}
	}

	public final AggregateContext aggregate() throws RecognitionException {
		AggregateContext _localctx = new AggregateContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_aggregate);
		int _la;
		try {
			setState(5128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5065);
				identifier(0);
				setState(5066);
				match(OPEN_PAREN);
				setState(5068);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(5067);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5070);
				expr(0);
				setState(5075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5071);
					match(COMMA);
					setState(5072);
					expr(0);
					}
					}
					setState(5077);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5078);
					order_by_clause();
					}
				}

				setState(5081);
				match(CLOSE_PAREN);
				setState(5088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(5082);
					match(FILTER);
					setState(5083);
					match(OPEN_PAREN);
					setState(5084);
					match(WHERE);
					setState(5085);
					where_clause();
					setState(5086);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5090);
				identifier(0);
				setState(5091);
				match(OPEN_PAREN);
				setState(5092);
				match(STAR);
				setState(5093);
				match(CLOSE_PAREN);
				setState(5100);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
				case 1:
					{
					setState(5094);
					match(FILTER);
					setState(5095);
					match(OPEN_PAREN);
					setState(5096);
					match(WHERE);
					setState(5097);
					where_clause();
					setState(5098);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5102);
				identifier(0);
				setState(5103);
				match(OPEN_PAREN);
				setState(5112);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3051208608109821955L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 4537576733544546303L) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & 1262854602757L) != 0)) {
					{
					setState(5104);
					expr(0);
					setState(5109);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5105);
						match(COMMA);
						setState(5106);
						expr(0);
						}
						}
						setState(5111);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5114);
				match(CLOSE_PAREN);
				setState(5115);
				match(WITHIN);
				setState(5116);
				match(GROUP);
				setState(5117);
				match(OPEN_PAREN);
				setState(5118);
				order_by_clause();
				setState(5119);
				match(CLOSE_PAREN);
				setState(5126);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(5120);
					match(FILTER);
					setState(5121);
					match(OPEN_PAREN);
					setState(5122);
					match(WHERE);
					setState(5123);
					where_clause();
					setState(5124);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Name_Context extends ParserRuleContext {
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterName_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitName_(this);
		}
	}

	public final Name_Context name_() throws RecognitionException {
		Name_Context _localctx = new Name_Context(_ctx, getState());
		enterRule(_localctx, 464, RULE_name_);
		try {
			setState(5132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLEQ_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5130);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5131);
				identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Name_listContext extends ParserRuleContext {
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitName_list(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		Name_listContext _localctx = new Name_listContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5134);
			name_();
			setState(5139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5135);
				match(COMMA);
				setState(5136);
				name_();
				}
				}
				setState(5141);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Identifier_listContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterIdentifier_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitIdentifier_list(this);
		}
	}

	public final Identifier_listContext identifier_list() throws RecognitionException {
		Identifier_listContext _localctx = new Identifier_listContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_identifier_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5142);
			identifier(0);
			setState(5147);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,610,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5143);
					match(COMMA);
					setState(5144);
					identifier(0);
					}
					} 
				}
				setState(5149);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,610,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Option_exprContext extends ParserRuleContext {
		public IdentifierContext option_name;
		public Param_valueContext value;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSqlParser.EQUAL, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public Option_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterOption_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitOption_expr(this);
		}
	}

	public final Option_exprContext option_expr() throws RecognitionException {
		Option_exprContext _localctx = new Option_exprContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_option_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5150);
			((Option_exprContext)_localctx).option_name = identifier(0);
			setState(5153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(5151);
				match(EQUAL);
				setState(5152);
				((Option_exprContext)_localctx).value = param_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Option_listContext extends ParserRuleContext {
		public List<Option_exprContext> option_expr() {
			return getRuleContexts(Option_exprContext.class);
		}
		public Option_exprContext option_expr(int i) {
			return getRuleContext(Option_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterOption_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitOption_list(this);
		}
	}

	public final Option_listContext option_list() throws RecognitionException {
		Option_listContext _localctx = new Option_listContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5155);
			option_expr();
			setState(5160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5156);
				match(COMMA);
				setState(5157);
				option_expr();
				}
				}
				setState(5162);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_name_Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterTable_name_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitTable_name_(this);
		}
	}

	public final Table_name_Context table_name_() throws RecognitionException {
		Table_name_Context _localctx = new Table_name_Context(_ctx, getState());
		enterRule(_localctx, 474, RULE_table_name_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5163);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_typeContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSqlParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSqlParser.OPEN_BRACKET, i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSqlParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSqlParser.CLOSE_BRACKET, i);
		}
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSqlParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSqlParser.INTEGER_LITERAL, i);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitData_type(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_data_type);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				setState(5165);
				type_name();
				}
				break;
			case 2:
				{
				setState(5166);
				identifier(0);
				}
				break;
			}
			setState(5176);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,615,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5169);
					match(OPEN_BRACKET);
					setState(5171);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INTEGER_LITERAL) {
						{
						setState(5170);
						match(INTEGER_LITERAL);
						}
					}

					setState(5173);
					match(CLOSE_BRACKET);
					}
					} 
				}
				setState(5178);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,615,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_type_listContext extends ParserRuleContext {
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Data_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterData_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitData_type_list(this);
		}
	}

	public final Data_type_listContext data_type_list() throws RecognitionException {
		Data_type_listContext _localctx = new Data_type_listContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_data_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5179);
			data_type();
			setState(5184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5180);
				match(COMMA);
				setState(5181);
				data_type();
				}
				}
				setState(5186);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_methodContext extends ParserRuleContext {
		public Token builtin;
		public IdentifierContext unknown;
		public TerminalNode BTREE() { return getToken(PostgreSqlParser.BTREE, 0); }
		public TerminalNode HASH_() { return getToken(PostgreSqlParser.HASH_, 0); }
		public TerminalNode GIST() { return getToken(PostgreSqlParser.GIST, 0); }
		public TerminalNode SPGIST() { return getToken(PostgreSqlParser.SPGIST, 0); }
		public TerminalNode GIN() { return getToken(PostgreSqlParser.GIN, 0); }
		public TerminalNode BRIN() { return getToken(PostgreSqlParser.BRIN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterIndex_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitIndex_method(this);
		}
	}

	public final Index_methodContext index_method() throws RecognitionException {
		Index_methodContext _localctx = new Index_methodContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_index_method);
		int _la;
		try {
			setState(5189);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BTREE:
			case HASH_:
			case GIST:
			case SPGIST:
			case GIN:
			case BRIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5187);
				((Index_methodContext)_localctx).builtin = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & 63L) != 0)) ) {
					((Index_methodContext)_localctx).builtin = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5188);
				((Index_methodContext)_localctx).unknown = identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFunc_name(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_func_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5191);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_callContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSqlParser.VARIADIC, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Todo_fill_inContext todo_fill_in() {
			return getRuleContext(Todo_fill_inContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSqlParser.FOR, 0); }
		public Func_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFunc_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFunc_call(this);
		}
	}

	public final Func_callContext func_call() throws RecognitionException {
		Func_callContext _localctx = new Func_callContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_func_call);
		int _la;
		try {
			int _alt;
			setState(5229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5193);
				func_name();
				setState(5194);
				match(OPEN_PAREN);
				setState(5195);
				match(VARIADIC);
				setState(5196);
				expr(0);
				setState(5197);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5199);
				func_name();
				setState(5200);
				match(OPEN_PAREN);
				setState(5214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3051208608109821955L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 4537576733544546303L) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & 1262854602757L) != 0)) {
					{
					setState(5201);
					expr(0);
					setState(5206);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,618,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5202);
							match(COMMA);
							setState(5203);
							expr(0);
							}
							} 
						}
						setState(5208);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,618,_ctx);
					}
					setState(5212);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5209);
						match(COMMA);
						setState(5210);
						match(VARIADIC);
						setState(5211);
						expr(0);
						}
					}

					}
				}

				setState(5216);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5218);
				func_name();
				setState(5219);
				match(OPEN_PAREN);
				setState(5220);
				todo_fill_in();
				setState(5221);
				match(FROM);
				setState(5222);
				expr(0);
				setState(5225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5223);
					match(FOR);
					setState(5224);
					expr(0);
					}
				}

				setState(5227);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Array_cons_exprContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(PostgreSqlParser.ARRAY, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSqlParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSqlParser.CLOSE_BRACKET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Array_cons_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_cons_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterArray_cons_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitArray_cons_expr(this);
		}
	}

	public final Array_cons_exprContext array_cons_expr() throws RecognitionException {
		Array_cons_exprContext _localctx = new Array_cons_exprContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_array_cons_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5231);
			match(ARRAY);
			setState(5232);
			match(OPEN_BRACKET);
			setState(5241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3051208608109821955L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 4537576733544546303L) != 0) || ((((_la - 787)) & ~0x3f) == 0 && ((1L << (_la - 787)) & 1262854602757L) != 0)) {
				{
				setState(5233);
				expr(0);
				setState(5238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5234);
					match(COMMA);
					setState(5235);
					expr(0);
					}
					}
					setState(5240);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5243);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_itemContext extends ParserRuleContext {
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSqlParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public With_column_aliasContext with_column_alias() {
			return getRuleContext(With_column_aliasContext.class,0);
		}
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSqlParser.TABLESAMPLE, 0); }
		public List<Todo_fill_inContext> todo_fill_in() {
			return getRuleContexts(Todo_fill_inContext.class);
		}
		public Todo_fill_inContext todo_fill_in(int i) {
			return getRuleContext(Todo_fill_inContext.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public TerminalNode REPEATABLE() { return getToken(PostgreSqlParser.REPEATABLE, 0); }
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(PostgreSqlParser.LATERAL, 0); }
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Func_callContext func_call() {
			return getRuleContext(Func_callContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSqlParser.ORDINALITY, 0); }
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(PostgreSqlParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(PostgreSqlParser.NATURAL, 0); }
		public Join_clauseContext join_clause() {
			return getRuleContext(Join_clauseContext.class,0);
		}
		public From_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterFrom_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitFrom_item(this);
		}
	}

	public final From_itemContext from_item() throws RecognitionException {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_itemContext _localctx = new From_itemContext(_ctx, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 488;
		enterRecursionRule(_localctx, 488, RULE_from_item, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				setState(5247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(5246);
					match(ONLY);
					}
				}

				setState(5249);
				table_name_();
				setState(5251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
				case 1:
					{
					setState(5250);
					match(STAR);
					}
					break;
				}
				setState(5254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
				case 1:
					{
					setState(5253);
					with_column_alias();
					}
					break;
				}
				setState(5275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
				case 1:
					{
					setState(5256);
					match(TABLESAMPLE);
					setState(5257);
					todo_fill_in();
					setState(5258);
					match(OPEN_PAREN);
					setState(5259);
					expr(0);
					setState(5264);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5260);
						match(COMMA);
						setState(5261);
						expr(0);
						}
						}
						setState(5266);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5267);
					match(CLOSE_PAREN);
					setState(5273);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
					case 1:
						{
						setState(5268);
						match(REPEATABLE);
						setState(5269);
						match(OPEN_PAREN);
						setState(5270);
						todo_fill_in();
						setState(5271);
						match(CLOSE_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(5277);
					match(LATERAL);
					}
				}

				setState(5280);
				match(OPEN_PAREN);
				setState(5281);
				stmt();
				setState(5282);
				match(CLOSE_PAREN);
				setState(5284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5283);
					match(AS);
					}
				}

				setState(5286);
				alias();
				setState(5298);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
				case 1:
					{
					setState(5287);
					match(OPEN_PAREN);
					setState(5288);
					column_alias();
					setState(5293);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5289);
						match(COMMA);
						setState(5290);
						column_alias();
						}
						}
						setState(5295);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5296);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(5301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(5300);
					match(LATERAL);
					}
				}

				setState(5303);
				func_call();
				setState(5306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
				case 1:
					{
					setState(5304);
					match(WITH);
					setState(5305);
					match(ORDINALITY);
					}
					break;
				}
				setState(5309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
				case 1:
					{
					setState(5308);
					with_column_alias();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(5312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(5311);
					match(LATERAL);
					}
				}

				setState(5314);
				func_call();
				setState(5315);
				match(AS);
				setState(5316);
				match(OPEN_PAREN);
				setState(5317);
				column_definition();
				setState(5322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5318);
					match(COMMA);
					setState(5319);
					column_definition();
					}
					}
					setState(5324);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5325);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				{
				setState(5328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(5327);
					match(LATERAL);
					}
				}

				setState(5330);
				match(ROWS);
				setState(5331);
				match(FROM);
				setState(5332);
				match(OPEN_PAREN);
				setState(5333);
				func_call();
				setState(5334);
				match(CLOSE_PAREN);
				setState(5347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5335);
					match(AS);
					setState(5336);
					match(OPEN_PAREN);
					setState(5337);
					column_definition();
					setState(5342);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5338);
						match(COMMA);
						setState(5339);
						column_definition();
						}
						}
						setState(5344);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5345);
					match(CLOSE_PAREN);
					}
				}

				setState(5349);
				match(CLOSE_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5370);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,648,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new From_itemContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_from_item);
					setState(5353);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5355);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATURAL) {
						{
						setState(5354);
						match(NATURAL);
						}
					}

					setState(5357);
					join_type();
					setState(5359);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
					case 1:
						{
						setState(5358);
						match(OPEN_PAREN);
						}
						break;
					}
					setState(5361);
					from_item(0);
					setState(5363);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
					case 1:
						{
						setState(5362);
						join_clause();
						}
						break;
					}
					setState(5366);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
					case 1:
						{
						setState(5365);
						match(CLOSE_PAREN);
						}
						break;
					}
					}
					} 
				}
				setState(5372);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,648,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_column_aliasContext extends ParserRuleContext {
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSqlParser.AS, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public With_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterWith_column_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitWith_column_alias(this);
		}
	}

	public final With_column_aliasContext with_column_alias() throws RecognitionException {
		With_column_aliasContext _localctx = new With_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_with_column_alias);
		int _la;
		try {
			int _alt;
			setState(5395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5373);
					match(AS);
					}
				}

				setState(5376);
				alias();
				setState(5385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
				case 1:
					{
					setState(5377);
					column_alias();
					setState(5382);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,650,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5378);
							match(COMMA);
							setState(5379);
							column_alias();
							}
							} 
						}
						setState(5384);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,650,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5387);
					match(AS);
					}
				}

				setState(5390);
				alias();
				setState(5391);
				match(OPEN_PAREN);
				setState(5392);
				name_list();
				setState(5393);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PostgreSqlParser.JOIN, 0); }
		public TerminalNode INNER() { return getToken(PostgreSqlParser.INNER, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSqlParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(PostgreSqlParser.OUTER, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(PostgreSqlParser.FULL, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSqlParser.CROSS, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitJoin_type(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_join_type);
		int _la;
		try {
			setState(5418);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(5397);
					match(INNER);
					}
				}

				setState(5400);
				match(JOIN);
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5401);
				match(LEFT);
				setState(5403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(5402);
					match(OUTER);
					}
				}

				setState(5405);
				match(JOIN);
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5406);
				match(RIGHT);
				setState(5408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(5407);
					match(OUTER);
					}
				}

				setState(5410);
				match(JOIN);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5411);
				match(FULL);
				setState(5413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(5412);
					match(OUTER);
					}
				}

				setState(5415);
				match(JOIN);
				}
				break;
			case CROSS:
				enterOuterAlt(_localctx, 5);
				{
				setState(5416);
				match(CROSS);
				setState(5417);
				match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitJoin_clause(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_join_clause);
		int _la;
		try {
			setState(5434);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(5420);
				match(ON);
				setState(5421);
				predicate(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5422);
				match(USING);
				setState(5423);
				match(OPEN_PAREN);
				setState(5424);
				column_name();
				setState(5429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5425);
					match(COMMA);
					setState(5426);
					column_name();
					}
					}
					setState(5431);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5432);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public OperContext oper() {
			return getRuleContext(OperContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode AND() { return getToken(PostgreSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSqlParser.OR, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 496;
		enterRecursionRule(_localctx, 496, RULE_predicate, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(5437);
				expr(0);
				}
				break;
			case 2:
				{
				setState(5438);
				expr(0);
				setState(5439);
				oper();
				setState(5440);
				expr(0);
				}
				break;
			case 3:
				{
				setState(5442);
				match(OPEN_PAREN);
				setState(5443);
				predicate(0);
				setState(5444);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				{
				setState(5446);
				match(NOT);
				setState(5447);
				predicate(1);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5458);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5456);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
					case 1:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5450);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5451);
						match(AND);
						setState(5452);
						predicate(4);
						}
						break;
					case 2:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5453);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5454);
						match(OR);
						setState(5455);
						predicate(3);
						}
						break;
					}
					} 
				}
				setState(5460);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_signatureContext extends ParserRuleContext {
		public Token argmode;
		public IdentifierContext argname;
		public Data_type_listContext argtype;
		public TerminalNode STAR() { return getToken(PostgreSqlParser.STAR, 0); }
		public List<Data_type_listContext> data_type_list() {
			return getRuleContexts(Data_type_listContext.class);
		}
		public Data_type_listContext data_type_list(int i) {
			return getRuleContext(Data_type_listContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSqlParser.IN, i);
		}
		public List<TerminalNode> VARIADIC() { return getTokens(PostgreSqlParser.VARIADIC); }
		public TerminalNode VARIADIC(int i) {
			return getToken(PostgreSqlParser.VARIADIC, i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public Aggregate_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAggregate_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAggregate_signature(this);
		}
	}

	public final Aggregate_signatureContext aggregate_signature() throws RecognitionException {
		Aggregate_signatureContext _localctx = new Aggregate_signatureContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_aggregate_signature);
		int _la;
		try {
			setState(5487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5461);
				match(STAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(5462);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5466);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
				case 1:
					{
					setState(5465);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(5468);
				((Aggregate_signatureContext)_localctx).argtype = data_type_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(5470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(5469);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
				case 1:
					{
					setState(5472);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(5475);
				((Aggregate_signatureContext)_localctx).argtype = data_type_list();
				}
				setState(5477);
				match(ORDER);
				setState(5478);
				match(BY);
				setState(5480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(5479);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5483);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
				case 1:
					{
					setState(5482);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(5485);
				((Aggregate_signatureContext)_localctx).argtype = data_type_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_constraintContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSqlParser.NULL, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitColumn_constraint(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_column_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5489);
			match(NOT);
			setState(5490);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_constraintsContext extends ParserRuleContext {
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public Column_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterColumn_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitColumn_constraints(this);
		}
	}

	public final Column_constraintsContext column_constraints() throws RecognitionException {
		Column_constraintsContext _localctx = new Column_constraintsContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_column_constraints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5493); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5492);
				column_constraint();
				}
				}
				setState(5495); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NOT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_parametersContext extends ParserRuleContext {
		public IdentifierContext tablespace;
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSqlParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSqlParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterIndex_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitIndex_parameters(this);
		}
	}

	public final Index_parametersContext index_parameters() throws RecognitionException {
		Index_parametersContext _localctx = new Index_parametersContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_index_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5497);
				match(WITH);
				setState(5498);
				match(OPEN_PAREN);
				setState(5499);
				option_list();
				setState(5500);
				match(CLOSE_PAREN);
				}
			}

			setState(5508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5504);
				match(USING);
				setState(5505);
				match(INDEX);
				setState(5506);
				match(TABLESPACE);
				setState(5507);
				((Index_parametersContext)_localctx).tablespace = identifier(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exclude_elementContext extends ParserRuleContext {
		public IdentifierContext column_name_;
		public IdentifierContext opclass;
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSqlParser.OPEN_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSqlParser.CLOSE_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(PostgreSqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PostgreSqlParser.LAST, 0); }
		public Exclude_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclude_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterExclude_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitExclude_element(this);
		}
	}

	public final Exclude_elementContext exclude_element() throws RecognitionException {
		Exclude_elementContext _localctx = new Exclude_elementContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_exclude_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5515);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(5510);
				((Exclude_elementContext)_localctx).column_name_ = identifier(0);
				}
				break;
			case OPEN_PAREN:
				{
				setState(5511);
				match(OPEN_PAREN);
				setState(5512);
				expr(0);
				setState(5513);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				{
				setState(5517);
				((Exclude_elementContext)_localctx).opclass = identifier(0);
				}
				break;
			}
			setState(5521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5520);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(5523);
				match(NULLS);
				setState(5524);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_constraintContext extends ParserRuleContext {
		public Name_Context constraint_name;
		public Identifier_listContext columns;
		public Identifier_listContext operators;
		public IdentifierContext reftable;
		public IdentifierContext action;
		public TerminalNode CONSTRAINT() { return getToken(PostgreSqlParser.CONSTRAINT, 0); }
		public TerminalNode DEFERABLE() { return getToken(PostgreSqlParser.DEFERABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSqlParser.INITIALLY, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSqlParser.CHECK, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSqlParser.OPEN_PAREN, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSqlParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSqlParser.KEY, 0); }
		public Index_parametersContext index_parameters() {
			return getRuleContext(Index_parametersContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSqlParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSqlParser.REFERENCES, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSqlParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSqlParser.IMMEDIATE, 0); }
		public List<Identifier_listContext> identifier_list() {
			return getRuleContexts(Identifier_listContext.class);
		}
		public Identifier_listContext identifier_list(int i) {
			return getRuleContext(Identifier_listContext.class,i);
		}
		public TerminalNode EXCLUDE() { return getToken(PostgreSqlParser.EXCLUDE, 0); }
		public Exclude_elementContext exclude_element() {
			return getRuleContext(Exclude_elementContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSqlParser.WITH, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PostgreSqlParser.NOT, 0); }
		public TerminalNode NO() { return getToken(PostgreSqlParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSqlParser.INHERIT, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSqlParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(PostgreSqlParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSqlParser.PARTIAL, 0); }
		public TerminalNode MATCH_SIMPLE() { return getToken(PostgreSqlParser.MATCH_SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(PostgreSqlParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public TerminalNode USING() { return getToken(PostgreSqlParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitTable_constraint(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(5527);
				match(CONSTRAINT);
				setState(5528);
				((Table_constraintContext)_localctx).constraint_name = name_();
				}
			}

			setState(5596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				{
				{
				setState(5531);
				match(CHECK);
				setState(5532);
				match(OPEN_PAREN);
				setState(5533);
				expr(0);
				setState(5534);
				match(CLOSE_PAREN);
				setState(5537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(5535);
					match(NO);
					setState(5536);
					match(INHERIT);
					}
				}

				}
				}
				break;
			case UNIQUE:
				{
				{
				setState(5539);
				match(UNIQUE);
				setState(5540);
				match(OPEN_PAREN);
				setState(5541);
				((Table_constraintContext)_localctx).columns = identifier_list();
				setState(5542);
				match(CLOSE_PAREN);
				}
				}
				break;
			case PRIMARY:
				{
				{
				setState(5544);
				match(PRIMARY);
				setState(5545);
				match(KEY);
				setState(5546);
				match(OPEN_PAREN);
				setState(5547);
				((Table_constraintContext)_localctx).columns = identifier_list();
				setState(5548);
				match(CLOSE_PAREN);
				setState(5549);
				index_parameters();
				}
				}
				break;
			case EOF:
			case DEFERABLE:
			case EXCLUDE:
			case INITIALLY:
			case NOT:
			case COMMA:
			case CLOSE_PAREN:
			case SEMI:
				{
				setState(5567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCLUDE) {
					{
					setState(5551);
					match(EXCLUDE);
					setState(5554);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==USING) {
						{
						setState(5552);
						match(USING);
						setState(5553);
						index_method();
						}
					}

					setState(5556);
					match(OPEN_PAREN);
					setState(5557);
					exclude_element();
					setState(5558);
					match(WITH);
					setState(5559);
					((Table_constraintContext)_localctx).operators = identifier_list();
					setState(5560);
					match(CLOSE_PAREN);
					setState(5561);
					index_parameters();
					{
					setState(5562);
					match(WHERE);
					setState(5563);
					match(OPEN_PAREN);
					setState(5564);
					predicate(0);
					setState(5565);
					match(CLOSE_PAREN);
					}
					}
				}

				}
				break;
			case FOREIGN:
				{
				{
				setState(5569);
				match(FOREIGN);
				setState(5570);
				match(KEY);
				setState(5571);
				match(OPEN_PAREN);
				setState(5572);
				((Table_constraintContext)_localctx).columns = identifier_list();
				setState(5573);
				match(CLOSE_PAREN);
				setState(5574);
				match(REFERENCES);
				setState(5575);
				((Table_constraintContext)_localctx).reftable = identifier(0);
				setState(5577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5576);
					((Table_constraintContext)_localctx).columns = identifier_list();
					}
					break;
				}
				setState(5584);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5579);
					match(MATCH);
					setState(5580);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(5581);
					match(MATCH);
					setState(5582);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(5583);
					match(MATCH_SIMPLE);
					}
					break;
				}
				setState(5589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(5586);
					match(ON);
					setState(5587);
					match(DELETE);
					setState(5588);
					((Table_constraintContext)_localctx).action = identifier(0);
					}
					break;
				}
				setState(5594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(5591);
					match(ON);
					setState(5592);
					match(UPDATE);
					setState(5593);
					((Table_constraintContext)_localctx).action = identifier(0);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5602);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				setState(5599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5598);
					match(NOT);
					}
				}

				setState(5601);
				match(DEFERABLE);
				}
				break;
			}
			setState(5606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(5604);
				match(INITIALLY);
				setState(5605);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_nameContext extends ParserRuleContext {
		public Name_Context name;
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSqlParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSqlParser.SESSION_USER, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSqlParser.PUBLIC, 0); }
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRole_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRole_name(this);
		}
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_role_name);
		try {
			setState(5612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5608);
				((Role_nameContext)_localctx).name = name_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5609);
				match(CURRENT_USER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5610);
				match(SESSION_USER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5611);
				match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_name_listContext extends ParserRuleContext {
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSqlParser.COMMA, i);
		}
		public Role_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterRole_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitRole_name_list(this);
		}
	}

	public final Role_name_listContext role_name_list() throws RecognitionException {
		Role_name_listContext _localctx = new Role_name_listContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_role_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5614);
			role_name();
			setState(5619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5615);
				match(COMMA);
				setState(5616);
				role_name();
				}
				}
				setState(5621);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Param_valueContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PostgreSqlParser.OFF, 0); }
		public TerminalNode TRUE() { return getToken(PostgreSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSqlParser.FALSE, 0); }
		public TerminalNode YES() { return getToken(PostgreSqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(PostgreSqlParser.NO, 0); }
		public TerminalNode NONE() { return getToken(PostgreSqlParser.NONE, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.SINGLEQ_STRING_LITERAL, 0); }
		public ParameterOrNumericLiteralContext parameterOrNumericLiteral() {
			return getRuleContext(ParameterOrNumericLiteralContext.class,0);
		}
		public ParameterOrIntegerLiteralContext parameterOrIntegerLiteral() {
			return getRuleContext(ParameterOrIntegerLiteralContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Param_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterParam_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitParam_value(this);
		}
	}

	public final Param_valueContext param_value() throws RecognitionException {
		Param_valueContext _localctx = new Param_valueContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_param_value);
		try {
			setState(5633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5622);
				match(ON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5623);
				match(OFF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5624);
				match(TRUE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5625);
				match(FALSE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5626);
				match(YES);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5627);
				match(NO);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5628);
				match(NONE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5629);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5630);
				parameterOrNumericLiteral();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5631);
				parameterOrIntegerLiteral();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5632);
				identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reserved_keywordContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSqlParser.CREATE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSqlParser.DROP, 0); }
		public TerminalNode FROM() { return getToken(PostgreSqlParser.FROM, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSqlParser.GROUP, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSqlParser.LIMIT, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSqlParser.ORDER, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSqlParser.SELECT, 0); }
		public TerminalNode UNION() { return getToken(PostgreSqlParser.UNION, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterReserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitReserved_keyword(this);
		}
	}

	public final Reserved_keywordContext reserved_keyword() throws RecognitionException {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5635);
			_la = _input.LA(1);
			if ( !(_la==CREATE || _la==DROP || _la==FROM || _la==GROUP || _la==LIMIT || _la==ORDER || _la==SELECT || _la==UNION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_reserved_keywordContext extends ParserRuleContext {
		public TerminalNode A_() { return getToken(PostgreSqlParser.A_, 0); }
		public TerminalNode ABORT() { return getToken(PostgreSqlParser.ABORT, 0); }
		public TerminalNode ABS() { return getToken(PostgreSqlParser.ABS, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSqlParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSqlParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSqlParser.ACTION, 0); }
		public TerminalNode ADA() { return getToken(PostgreSqlParser.ADA, 0); }
		public TerminalNode ADD() { return getToken(PostgreSqlParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSqlParser.AGGREGATE, 0); }
		public TerminalNode ALLOCATE() { return getToken(PostgreSqlParser.ALLOCATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSqlParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSqlParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSqlParser.ALWAYS, 0); }
		public TerminalNode ANY() { return getToken(PostgreSqlParser.ANY, 0); }
		public TerminalNode ARE() { return getToken(PostgreSqlParser.ARE, 0); }
		public TerminalNode ASENSITIVE() { return getToken(PostgreSqlParser.ASENSITIVE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSqlParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSqlParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSqlParser.AT, 0); }
		public TerminalNode ATOMIC() { return getToken(PostgreSqlParser.ATOMIC, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSqlParser.ATTRIBUTE, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(PostgreSqlParser.ATTRIBUTES, 0); }
		public TerminalNode AVG() { return getToken(PostgreSqlParser.AVG, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSqlParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSqlParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(PostgreSqlParser.BEGIN, 0); }
		public TerminalNode BERNOULLI() { return getToken(PostgreSqlParser.BERNOULLI, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSqlParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSqlParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PostgreSqlParser.BIT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(PostgreSqlParser.BIT_LENGTH, 0); }
		public TerminalNode BLOB() { return getToken(PostgreSqlParser.BLOB, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSqlParser.BOOLEAN, 0); }
		public TerminalNode BREADTH() { return getToken(PostgreSqlParser.BREADTH, 0); }
		public TerminalNode BY() { return getToken(PostgreSqlParser.BY, 0); }
		public TerminalNode C_() { return getToken(PostgreSqlParser.C_, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSqlParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSqlParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSqlParser.CALLED, 0); }
		public TerminalNode CARDINALITY() { return getToken(PostgreSqlParser.CARDINALITY, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSqlParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSqlParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSqlParser.CATALOG, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(PostgreSqlParser.CATALOG_NAME, 0); }
		public TerminalNode CEIL() { return getToken(PostgreSqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(PostgreSqlParser.CEILING, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSqlParser.CHAIN, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSqlParser.CHARACTER, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSqlParser.CHARACTERISTICS, 0); }
		public TerminalNode CHARACTERS() { return getToken(PostgreSqlParser.CHARACTERS, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(PostgreSqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARACTER_SET_CATALOG() { return getToken(PostgreSqlParser.CHARACTER_SET_CATALOG, 0); }
		public TerminalNode CHARACTER_SET_NAME() { return getToken(PostgreSqlParser.CHARACTER_SET_NAME, 0); }
		public TerminalNode CHARACTER_SET_SCHEMA() { return getToken(PostgreSqlParser.CHARACTER_SET_SCHEMA, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(PostgreSqlParser.CHAR_LENGTH, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSqlParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSqlParser.CLASS, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(PostgreSqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLOB() { return getToken(PostgreSqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSqlParser.CLUSTER, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSqlParser.COALESCE, 0); }
		public TerminalNode COBOL() { return getToken(PostgreSqlParser.COBOL, 0); }
		public TerminalNode COLLATION_CATALOG() { return getToken(PostgreSqlParser.COLLATION_CATALOG, 0); }
		public TerminalNode COLLATION_NAME() { return getToken(PostgreSqlParser.COLLATION_NAME, 0); }
		public TerminalNode COLLATION_SCHEMA() { return getToken(PostgreSqlParser.COLLATION_SCHEMA, 0); }
		public TerminalNode COLLECT() { return getToken(PostgreSqlParser.COLLECT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(PostgreSqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMAND_FUNCTION() { return getToken(PostgreSqlParser.COMMAND_FUNCTION, 0); }
		public TerminalNode COMMAND_FUNCTION_CODE() { return getToken(PostgreSqlParser.COMMAND_FUNCTION_CODE, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSqlParser.COMMITTED, 0); }
		public TerminalNode CONDITION() { return getToken(PostgreSqlParser.CONDITION, 0); }
		public TerminalNode CONDITION_NUMBER() { return getToken(PostgreSqlParser.CONDITION_NUMBER, 0); }
		public TerminalNode CONNECT() { return getToken(PostgreSqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_NAME() { return getToken(PostgreSqlParser.CONNECTION_NAME, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(PostgreSqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(PostgreSqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(PostgreSqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PostgreSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTAINS() { return getToken(PostgreSqlParser.CONTAINS, 0); }
		public TerminalNode CONTINUE() { return getToken(PostgreSqlParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSqlParser.CONVERSION, 0); }
		public TerminalNode CONVERT() { return getToken(PostgreSqlParser.CONVERT, 0); }
		public TerminalNode COPY() { return getToken(PostgreSqlParser.COPY, 0); }
		public TerminalNode CORR() { return getToken(PostgreSqlParser.CORR, 0); }
		public TerminalNode CORRESPONDING() { return getToken(PostgreSqlParser.CORRESPONDING, 0); }
		public TerminalNode COUNT() { return getToken(PostgreSqlParser.COUNT, 0); }
		public TerminalNode COVAR_POP() { return getToken(PostgreSqlParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(PostgreSqlParser.COVAR_SAMP, 0); }
		public TerminalNode CSV() { return getToken(PostgreSqlParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSqlParser.CUBE, 0); }
		public TerminalNode CUME_DIST() { return getToken(PostgreSqlParser.CUME_DIST, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSqlParser.CURRENT, 0); }
		public TerminalNode CURRENT_DEFAULT_TRANSFORM_GROUP() { return getToken(PostgreSqlParser.CURRENT_DEFAULT_TRANSFORM_GROUP, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(PostgreSqlParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_TRANSFORM_GROUP_FOR_TYPE() { return getToken(PostgreSqlParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSqlParser.CURSOR, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(PostgreSqlParser.CURSOR_NAME, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PostgreSqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(PostgreSqlParser.DATE, 0); }
		public TerminalNode DATETIME_INTERVAL_CODE() { return getToken(PostgreSqlParser.DATETIME_INTERVAL_CODE, 0); }
		public TerminalNode DATETIME_INTERVAL_PRECISION() { return getToken(PostgreSqlParser.DATETIME_INTERVAL_PRECISION, 0); }
		public TerminalNode DAY() { return getToken(PostgreSqlParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSqlParser.DEALLOCATE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSqlParser.DECIMAL, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSqlParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINED() { return getToken(PostgreSqlParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSqlParser.DEFINER, 0); }
		public TerminalNode DEGREE() { return getToken(PostgreSqlParser.DEGREE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSqlParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSqlParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSqlParser.DELIMITERS, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PostgreSqlParser.DENSE_RANK, 0); }
		public TerminalNode DEPTH() { return getToken(PostgreSqlParser.DEPTH, 0); }
		public TerminalNode DEREF() { return getToken(PostgreSqlParser.DEREF, 0); }
		public TerminalNode DERIVED() { return getToken(PostgreSqlParser.DERIVED, 0); }
		public TerminalNode DESCRIBE() { return getToken(PostgreSqlParser.DESCRIBE, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(PostgreSqlParser.DESCRIPTOR, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PostgreSqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSqlParser.DICTIONARY, 0); }
		public TerminalNode DISCONNECT() { return getToken(PostgreSqlParser.DISCONNECT, 0); }
		public TerminalNode DISPATCH() { return getToken(PostgreSqlParser.DISPATCH, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSqlParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSqlParser.DOUBLE, 0); }
		public TerminalNode DYNAMIC() { return getToken(PostgreSqlParser.DYNAMIC, 0); }
		public TerminalNode DYNAMIC_FUNCTION() { return getToken(PostgreSqlParser.DYNAMIC_FUNCTION, 0); }
		public TerminalNode DYNAMIC_FUNCTION_CODE() { return getToken(PostgreSqlParser.DYNAMIC_FUNCTION_CODE, 0); }
		public TerminalNode EACH() { return getToken(PostgreSqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PostgreSqlParser.ELEMENT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSqlParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSqlParser.ENCRYPTED, 0); }
		public TerminalNode END() { return getToken(PostgreSqlParser.END, 0); }
		public TerminalNode EQUALS() { return getToken(PostgreSqlParser.EQUALS, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSqlParser.ESCAPE, 0); }
		public TerminalNode EVERY() { return getToken(PostgreSqlParser.EVERY, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSqlParser.EXCEPTION, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSqlParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSqlParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXEC() { return getToken(PostgreSqlParser.EXEC, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSqlParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSqlParser.EXISTS, 0); }
		public TerminalNode EXP() { return getToken(PostgreSqlParser.EXP, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSqlParser.EXPLAIN, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSqlParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSqlParser.EXTRACT, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSqlParser.FILTER, 0); }
		public TerminalNode FINAL() { return getToken(PostgreSqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSqlParser.FIRST, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSqlParser.FLOAT, 0); }
		public TerminalNode FLOOR() { return getToken(PostgreSqlParser.FLOOR, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSqlParser.FORCE, 0); }
		public TerminalNode FORMAT() { return getToken(PostgreSqlParser.FORMAT, 0); }
		public TerminalNode FORTRAN() { return getToken(PostgreSqlParser.FORTRAN, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSqlParser.FORWARD, 0); }
		public TerminalNode FOUND() { return getToken(PostgreSqlParser.FOUND, 0); }
		public TerminalNode FREE() { return getToken(PostgreSqlParser.FREE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSqlParser.FUNCTION, 0); }
		public TerminalNode FUSION() { return getToken(PostgreSqlParser.FUSION, 0); }
		public TerminalNode G_() { return getToken(PostgreSqlParser.G_, 0); }
		public TerminalNode GENERAL() { return getToken(PostgreSqlParser.GENERAL, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSqlParser.GENERATED, 0); }
		public TerminalNode GET() { return getToken(PostgreSqlParser.GET, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSqlParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(PostgreSqlParser.GO, 0); }
		public TerminalNode GOTO() { return getToken(PostgreSqlParser.GOTO, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSqlParser.GREATEST, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSqlParser.GRANTED, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSqlParser.GROUPING, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSqlParser.HANDLER, 0); }
		public TerminalNode HIERARCHY() { return getToken(PostgreSqlParser.HIERARCHY, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSqlParser.HOLD, 0); }
		public TerminalNode HOST() { return getToken(PostgreSqlParser.HOST, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSqlParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSqlParser.IDENTITY, 0); }
		public TerminalNode IGNORE() { return getToken(PostgreSqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSqlParser.IMMUTABLE, 0); }
		public TerminalNode IMPLEMENTATION() { return getToken(PostgreSqlParser.IMPLEMENTATION, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSqlParser.IMPLICIT, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSqlParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSqlParser.INDEX, 0); }
		public TerminalNode INDICATOR() { return getToken(PostgreSqlParser.INDICATOR, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSqlParser.INHERITS, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSqlParser.INOUT, 0); }
		public TerminalNode INPUT() { return getToken(PostgreSqlParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSqlParser.INSERT, 0); }
		public TerminalNode INSTANCE() { return getToken(PostgreSqlParser.INSTANCE, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PostgreSqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PostgreSqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSqlParser.INTEGER, 0); }
		public TerminalNode INTERSECTION() { return getToken(PostgreSqlParser.INTERSECTION, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSqlParser.INTERVAL, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSqlParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSqlParser.ISOLATION, 0); }
		public TerminalNode K_() { return getToken(PostgreSqlParser.K_, 0); }
		public TerminalNode KEY() { return getToken(PostgreSqlParser.KEY, 0); }
		public TerminalNode KEY_MEMBER() { return getToken(PostgreSqlParser.KEY_MEMBER, 0); }
		public TerminalNode KEY_TYPE() { return getToken(PostgreSqlParser.KEY_TYPE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSqlParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSqlParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(PostgreSqlParser.LAST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(PostgreSqlParser.LENGTH, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSqlParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSqlParser.LISTEN, 0); }
		public TerminalNode LN() { return getToken(PostgreSqlParser.LN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSqlParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSqlParser.LOCATION, 0); }
		public TerminalNode LOCATOR() { return getToken(PostgreSqlParser.LOCATOR, 0); }
		public TerminalNode LOCK() { return getToken(PostgreSqlParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSqlParser.LOCKED, 0); }
		public TerminalNode LOWER() { return getToken(PostgreSqlParser.LOWER, 0); }
		public TerminalNode M_() { return getToken(PostgreSqlParser.M_, 0); }
		public TerminalNode MAP() { return getToken(PostgreSqlParser.MAP, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSqlParser.MATCH, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSqlParser.MATCHED, 0); }
		public TerminalNode MAX() { return getToken(PostgreSqlParser.MAX, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSqlParser.MAXVALUE, 0); }
		public TerminalNode MEMBER() { return getToken(PostgreSqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PostgreSqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_LENGTH() { return getToken(PostgreSqlParser.MESSAGE_LENGTH, 0); }
		public TerminalNode MESSAGE_OCTET_LENGTH() { return getToken(PostgreSqlParser.MESSAGE_OCTET_LENGTH, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(PostgreSqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSqlParser.METHOD, 0); }
		public TerminalNode MIN() { return getToken(PostgreSqlParser.MIN, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSqlParser.MINVALUE, 0); }
		public TerminalNode MOD() { return getToken(PostgreSqlParser.MOD, 0); }
		public TerminalNode MODE() { return getToken(PostgreSqlParser.MODE, 0); }
		public TerminalNode MODIFIES() { return getToken(PostgreSqlParser.MODIFIES, 0); }
		public TerminalNode MODULE() { return getToken(PostgreSqlParser.MODULE, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSqlParser.MONTH, 0); }
		public TerminalNode MORE_() { return getToken(PostgreSqlParser.MORE_, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSqlParser.MOVE, 0); }
		public TerminalNode MULTISET() { return getToken(PostgreSqlParser.MULTISET, 0); }
		public TerminalNode MUMPS() { return getToken(PostgreSqlParser.MUMPS, 0); }
		public TerminalNode NAME() { return getToken(PostgreSqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSqlParser.NAMES, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSqlParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSqlParser.NCHAR, 0); }
		public TerminalNode NCLOB() { return getToken(PostgreSqlParser.NCLOB, 0); }
		public TerminalNode NESTING() { return getToken(PostgreSqlParser.NESTING, 0); }
		public TerminalNode NEW() { return getToken(PostgreSqlParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PostgreSqlParser.NO, 0); }
		public TerminalNode NONE() { return getToken(PostgreSqlParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSqlParser.NORMALIZE, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSqlParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSqlParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSqlParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSqlParser.NOWAIT, 0); }
		public TerminalNode NULLABLE() { return getToken(PostgreSqlParser.NULLABLE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSqlParser.NULLIF, 0); }
		public TerminalNode NULLS() { return getToken(PostgreSqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PostgreSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSqlParser.NUMERIC, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSqlParser.OBJECT, 0); }
		public TerminalNode OCTETS() { return getToken(PostgreSqlParser.OCTETS, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(PostgreSqlParser.OCTET_LENGTH, 0); }
		public TerminalNode OF() { return getToken(PostgreSqlParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSqlParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSqlParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSqlParser.OLD, 0); }
		public TerminalNode OPEN() { return getToken(PostgreSqlParser.OPEN, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSqlParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSqlParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSqlParser.OPTIONS, 0); }
		public TerminalNode ORDERING() { return getToken(PostgreSqlParser.ORDERING, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSqlParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSqlParser.OTHERS, 0); }
		public TerminalNode OUT() { return getToken(PostgreSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(PostgreSqlParser.OUTPUT, 0); }
		public TerminalNode OVER() { return getToken(PostgreSqlParser.OVER, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSqlParser.OVERLAY, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSqlParser.OVERRIDING, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSqlParser.OWNER, 0); }
		public TerminalNode PAD() { return getToken(PostgreSqlParser.PAD, 0); }
		public TerminalNode PARAMETER() { return getToken(PostgreSqlParser.PARAMETER, 0); }
		public TerminalNode PARAMETER_MODE() { return getToken(PostgreSqlParser.PARAMETER_MODE, 0); }
		public TerminalNode PARAMETER_NAME() { return getToken(PostgreSqlParser.PARAMETER_NAME, 0); }
		public TerminalNode PARAMETER_ORDINAL_POSITION() { return getToken(PostgreSqlParser.PARAMETER_ORDINAL_POSITION, 0); }
		public TerminalNode PARAMETER_SPECIFIC_CATALOG() { return getToken(PostgreSqlParser.PARAMETER_SPECIFIC_CATALOG, 0); }
		public TerminalNode PARAMETER_SPECIFIC_NAME() { return getToken(PostgreSqlParser.PARAMETER_SPECIFIC_NAME, 0); }
		public TerminalNode PARAMETER_SPECIFIC_SCHEMA() { return getToken(PostgreSqlParser.PARAMETER_SPECIFIC_SCHEMA, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSqlParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSqlParser.PARTITION, 0); }
		public TerminalNode PASCAL() { return getToken(PostgreSqlParser.PASCAL, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSqlParser.PASSWORD, 0); }
		public TerminalNode PATH() { return getToken(PostgreSqlParser.PATH, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PostgreSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PostgreSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PostgreSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PLAIN() { return getToken(PostgreSqlParser.PLAIN, 0); }
		public TerminalNode PLI() { return getToken(PostgreSqlParser.PLI, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSqlParser.POSITION, 0); }
		public TerminalNode POWER() { return getToken(PostgreSqlParser.POWER, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSqlParser.PRECISION, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSqlParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSqlParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSqlParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSqlParser.PROCEDURE, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSqlParser.PUBLIC, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSqlParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(PostgreSqlParser.RANK, 0); }
		public TerminalNode READ() { return getToken(PostgreSqlParser.READ, 0); }
		public TerminalNode READS() { return getToken(PostgreSqlParser.READS, 0); }
		public TerminalNode REAL() { return getToken(PostgreSqlParser.REAL, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSqlParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSqlParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSqlParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSqlParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSqlParser.REFRESH, 0); }
		public TerminalNode REGR_AVGX() { return getToken(PostgreSqlParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(PostgreSqlParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(PostgreSqlParser.REGR_COUNT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(PostgreSqlParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(PostgreSqlParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(PostgreSqlParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(PostgreSqlParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(PostgreSqlParser.REGR_SYY, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSqlParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(PostgreSqlParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSqlParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSqlParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSqlParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(PostgreSqlParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSqlParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSqlParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(PostgreSqlParser.RESULT, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSqlParser.RETURN, 0); }
		public TerminalNode RETURNED_CARDINALITY() { return getToken(PostgreSqlParser.RETURNED_CARDINALITY, 0); }
		public TerminalNode RETURNED_LENGTH() { return getToken(PostgreSqlParser.RETURNED_LENGTH, 0); }
		public TerminalNode RETURNED_OCTET_LENGTH() { return getToken(PostgreSqlParser.RETURNED_OCTET_LENGTH, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(PostgreSqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSqlParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSqlParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSqlParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSqlParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSqlParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSqlParser.ROUTINE, 0); }
		public TerminalNode ROUTINE_CATALOG() { return getToken(PostgreSqlParser.ROUTINE_CATALOG, 0); }
		public TerminalNode ROUTINE_NAME() { return getToken(PostgreSqlParser.ROUTINE_NAME, 0); }
		public TerminalNode ROUTINE_SCHEMA() { return getToken(PostgreSqlParser.ROUTINE_SCHEMA, 0); }
		public TerminalNode ROW() { return getToken(PostgreSqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSqlParser.ROWS, 0); }
		public TerminalNode ROW_COUNT() { return getToken(PostgreSqlParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PostgreSqlParser.ROW_NUMBER, 0); }
		public TerminalNode RULE() { return getToken(PostgreSqlParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCALE() { return getToken(PostgreSqlParser.SCALE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(PostgreSqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SCOPE() { return getToken(PostgreSqlParser.SCOPE, 0); }
		public TerminalNode SCOPE_CATALOG() { return getToken(PostgreSqlParser.SCOPE_CATALOG, 0); }
		public TerminalNode SCOPE_NAME() { return getToken(PostgreSqlParser.SCOPE_NAME, 0); }
		public TerminalNode SCOPE_SCHEMA() { return getToken(PostgreSqlParser.SCOPE_SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSqlParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSqlParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(PostgreSqlParser.SECOND, 0); }
		public TerminalNode SECTION() { return getToken(PostgreSqlParser.SECTION, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSqlParser.SECURITY, 0); }
		public TerminalNode SELF() { return getToken(PostgreSqlParser.SELF, 0); }
		public TerminalNode SENSITIVE() { return getToken(PostgreSqlParser.SENSITIVE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSqlParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSqlParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER_NAME() { return getToken(PostgreSqlParser.SERVER_NAME, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSqlParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSqlParser.SET, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSqlParser.SETOF, 0); }
		public TerminalNode SETS() { return getToken(PostgreSqlParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSqlParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSqlParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSqlParser.SIMPLE, 0); }
		public TerminalNode SIZE() { return getToken(PostgreSqlParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSqlParser.SMALLINT, 0); }
		public TerminalNode SOME() { return getToken(PostgreSqlParser.SOME, 0); }
		public TerminalNode SOURCE() { return getToken(PostgreSqlParser.SOURCE, 0); }
		public TerminalNode SPACE() { return getToken(PostgreSqlParser.SPACE, 0); }
		public TerminalNode SPECIFIC() { return getToken(PostgreSqlParser.SPECIFIC, 0); }
		public TerminalNode SPECIFICTYPE() { return getToken(PostgreSqlParser.SPECIFICTYPE, 0); }
		public TerminalNode SPECIFIC_NAME() { return getToken(PostgreSqlParser.SPECIFIC_NAME, 0); }
		public TerminalNode SQL() { return getToken(PostgreSqlParser.SQL, 0); }
		public TerminalNode SQLCODE() { return getToken(PostgreSqlParser.SQLCODE, 0); }
		public TerminalNode SQLERROR() { return getToken(PostgreSqlParser.SQLERROR, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(PostgreSqlParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLSTATE() { return getToken(PostgreSqlParser.SQLSTATE, 0); }
		public TerminalNode SQLWARNING() { return getToken(PostgreSqlParser.SQLWARNING, 0); }
		public TerminalNode SQRT() { return getToken(PostgreSqlParser.SQRT, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSqlParser.STABLE, 0); }
		public TerminalNode START() { return getToken(PostgreSqlParser.START, 0); }
		public TerminalNode STATE() { return getToken(PostgreSqlParser.STATE, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSqlParser.STATEMENT, 0); }
		public TerminalNode STATIC() { return getToken(PostgreSqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSqlParser.STATISTICS, 0); }
		public TerminalNode STDDEV_POP() { return getToken(PostgreSqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(PostgreSqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSqlParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSqlParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSqlParser.STORAGE, 0); }
		public TerminalNode STRICT() { return getToken(PostgreSqlParser.STRICT, 0); }
		public TerminalNode STRUCTURE() { return getToken(PostgreSqlParser.STRUCTURE, 0); }
		public TerminalNode STYLE() { return getToken(PostgreSqlParser.STYLE, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(PostgreSqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PostgreSqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSqlParser.SUBSTRING, 0); }
		public TerminalNode SUM() { return getToken(PostgreSqlParser.SUM, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSqlParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSqlParser.SYSTEM, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(PostgreSqlParser.SYSTEM_USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_NAME() { return getToken(PostgreSqlParser.TABLE_NAME, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSqlParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSqlParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSqlParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSqlParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(PostgreSqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(PostgreSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PostgreSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PostgreSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TOP_LEVEL_COUNT() { return getToken(PostgreSqlParser.TOP_LEVEL_COUNT, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS_COMMITTED() { return getToken(PostgreSqlParser.TRANSACTIONS_COMMITTED, 0); }
		public TerminalNode TRANSACTIONS_ROLLED_BACK() { return getToken(PostgreSqlParser.TRANSACTIONS_ROLLED_BACK, 0); }
		public TerminalNode TRANSACTION_ACTIVE() { return getToken(PostgreSqlParser.TRANSACTION_ACTIVE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSqlParser.TRANSFORM, 0); }
		public TerminalNode TRANSFORMS() { return getToken(PostgreSqlParser.TRANSFORMS, 0); }
		public TerminalNode TRANSLATE() { return getToken(PostgreSqlParser.TRANSLATE, 0); }
		public TerminalNode TRANSLATION() { return getToken(PostgreSqlParser.TRANSLATION, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSqlParser.TRIGGER, 0); }
		public TerminalNode TRIGGER_CATALOG() { return getToken(PostgreSqlParser.TRIGGER_CATALOG, 0); }
		public TerminalNode TRIGGER_NAME() { return getToken(PostgreSqlParser.TRIGGER_NAME, 0); }
		public TerminalNode TRIGGER_SCHEMA() { return getToken(PostgreSqlParser.TRIGGER_SCHEMA, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSqlParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(PostgreSqlParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSqlParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSqlParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSqlParser.TYPE, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSqlParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNDER() { return getToken(PostgreSqlParser.UNDER, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSqlParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSqlParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSqlParser.UNLISTEN, 0); }
		public TerminalNode UNNAMED() { return getToken(PostgreSqlParser.UNNAMED, 0); }
		public TerminalNode UNNEST() { return getToken(PostgreSqlParser.UNNEST, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSqlParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSqlParser.UPDATE, 0); }
		public TerminalNode UPPER() { return getToken(PostgreSqlParser.UPPER, 0); }
		public TerminalNode USAGE() { return getToken(PostgreSqlParser.USAGE, 0); }
		public TerminalNode USER_DEFINED_TYPE_CATALOG() { return getToken(PostgreSqlParser.USER_DEFINED_TYPE_CATALOG, 0); }
		public TerminalNode USER_DEFINED_TYPE_CODE() { return getToken(PostgreSqlParser.USER_DEFINED_TYPE_CODE, 0); }
		public TerminalNode USER_DEFINED_TYPE_NAME() { return getToken(PostgreSqlParser.USER_DEFINED_TYPE_NAME, 0); }
		public TerminalNode USER_DEFINED_TYPE_SCHEMA() { return getToken(PostgreSqlParser.USER_DEFINED_TYPE_SCHEMA, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSqlParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSqlParser.VALID, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSqlParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSqlParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSqlParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSqlParser.VARCHAR, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSqlParser.VARYING, 0); }
		public TerminalNode VAR_POP() { return getToken(PostgreSqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(PostgreSqlParser.VAR_SAMP, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSqlParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSqlParser.VOLATILE, 0); }
		public TerminalNode WHENEVER() { return getToken(PostgreSqlParser.WHENEVER, 0); }
		public TerminalNode WHITESPACE() { return getToken(PostgreSqlParser.WHITESPACE, 0); }
		public TerminalNode WIDTH_BUCKET() { return getToken(PostgreSqlParser.WIDTH_BUCKET, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSqlParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSqlParser.WRITE, 0); }
		public TerminalNode YEAR() { return getToken(PostgreSqlParser.YEAR, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSqlParser.ZONE, 0); }
		public Non_reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterNon_reserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitNon_reserved_keyword(this);
		}
	}

	public final Non_reserved_keywordContext non_reserved_keyword() throws RecognitionException {
		Non_reserved_keywordContext _localctx = new Non_reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_non_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5637);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -7662894626537209859L) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 87L) != 0) || _la==TEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public Non_reserved_keywordContext non_reserved_keyword() {
			return getRuleContext(Non_reserved_keywordContext.class,0);
		}
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSqlParser.DOUBLEQ_STRING_LITERAL, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PostgreSqlParser.IDENTIFIER, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IDENTIFIER_UNICODE() { return getToken(PostgreSqlParser.IDENTIFIER_UNICODE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(PostgreSqlParser.DOT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		return identifier(0);
	}

	private IdentifierContext identifier(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IdentifierContext _localctx = new IdentifierContext(_ctx, _parentState);
		IdentifierContext _prevctx = _localctx;
		int _startState = 520;
		enterRecursionRule(_localctx, 520, RULE_identifier, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5645);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5640);
				non_reserved_keyword();
				}
				break;
			case 2:
				{
				setState(5641);
				match(DOUBLEQ_STRING_LITERAL);
				}
				break;
			case 3:
				{
				setState(5642);
				match(IDENTIFIER);
				}
				break;
			case 4:
				{
				setState(5643);
				type_name();
				}
				break;
			case 5:
				{
				setState(5644);
				match(IDENTIFIER_UNICODE);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5652);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,694,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_identifier);
					setState(5647);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(5648);
					match(DOT);
					setState(5649);
					identifier(4);
					}
					} 
				}
				setState(5654);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,694,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Todo_fill_inContext extends ParserRuleContext {
		public Todo_fill_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_fill_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterTodo_fill_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitTodo_fill_in(this);
		}
	}

	public final Todo_fill_inContext todo_fill_in() throws RecognitionException {
		Todo_fill_inContext _localctx = new Todo_fill_inContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_todo_fill_in);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5655);
			matchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Todo_implementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Todo_implementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_implement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterTodo_implement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitTodo_implement(this);
		}
	}

	public final Todo_implementContext todo_implement() throws RecognitionException {
		Todo_implementContext _localctx = new Todo_implementContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_todo_implement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5657);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Correlation_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterCorrelation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitCorrelation_name(this);
		}
	}

	public final Correlation_nameContext correlation_name() throws RecognitionException {
		Correlation_nameContext _localctx = new Correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5659);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5661);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitAlias(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5663);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_column_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5665);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_definitionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitColumn_definition(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_column_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5667);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).enterWindow_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSqlParserListener ) ((PostgreSqlParserListener)listener).exitWindow_name(this);
		}
	}

	public final Window_nameContext window_name() throws RecognitionException {
		Window_nameContext _localctx = new Window_nameContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_window_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5669);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 216:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 220:
			return bool_expr_sempred((Bool_exprContext)_localctx, predIndex);
		case 244:
			return from_item_sempred((From_itemContext)_localctx, predIndex);
		case 248:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 260:
			return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 28);
		case 1:
			return precpred(_ctx, 27);
		case 2:
			return precpred(_ctx, 26);
		case 3:
			return precpred(_ctx, 25);
		case 4:
			return precpred(_ctx, 24);
		case 5:
			return precpred(_ctx, 23);
		case 6:
			return precpred(_ctx, 22);
		case 7:
			return precpred(_ctx, 21);
		case 8:
			return precpred(_ctx, 19);
		case 9:
			return precpred(_ctx, 34);
		case 10:
			return precpred(_ctx, 29);
		case 11:
			return precpred(_ctx, 20);
		case 12:
			return precpred(_ctx, 12);
		case 13:
			return precpred(_ctx, 11);
		case 14:
			return precpred(_ctx, 9);
		case 15:
			return precpred(_ctx, 8);
		case 16:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean bool_expr_sempred(Bool_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 2);
		case 18:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 3);
		case 21:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 3);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0344\u1628\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0005\u0000\u021e\b\u0000\n\u0000\f\u0000\u0221\t\u0000"+
		"\u0001\u0000\u0003\u0000\u0224\b\u0000\u0001\u0000\u0001\u0000\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u025c\b\u0001\u0001\u0002"+
		"\u0001\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003"+
		"\u0288\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0003\u0004\u02a8\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0003\u0005\u02c5\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006"+
		"\u02dc\b\u0006\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\t\u0001\t"+
		"\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u02ea\b\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u02fa\b\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u0303\b\t\u0001\t\u0001\t\u0003"+
		"\t\u0307\b\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0003\t\u032e\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u033c"+
		"\b\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0003\n\u0347\b\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0003\n\u0351\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0359\b\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003"+
		"\u000b\u0362\b\u000b\u0001\f\u0001\f\u0001\r\u0001\r\u0003\r\u0368\b\r"+
		"\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u036e\b\r\u0001\r\u0003\r\u0371"+
		"\b\r\u0001\r\u0001\r\u0003\r\u0375\b\r\u0001\r\u0001\r\u0003\r\u0379\b"+
		"\r\u0001\r\u0001\r\u0003\r\u037d\b\r\u0001\r\u0001\r\u0003\r\u0381\b\r"+
		"\u0001\r\u0001\r\u0001\r\u0003\r\u0386\b\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0003\r\u038c\b\r\u0001\r\u0001\r\u0003\r\u0390\b\r\u0001\r\u0001\r"+
		"\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u0399\b\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03a1\b\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03aa\b\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03b3\b\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03bd\b\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03c7\b\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03d0\b\r\u0001"+
		"\r\u0001\r\u0001\r\u0003\r\u03d5\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003"+
		"\r\u03db\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003"+
		"\r\u03e4\b\r\u0001\r\u0001\r\u0003\r\u03e8\b\r\u0001\r\u0001\r\u0001\r"+
		"\u0001\r\u0001\r\u0003\r\u03ef\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0003\r\u03f6\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003"+
		"\r\u0410\b\r\u0003\r\u0412\b\r\u0001\u000e\u0001\u000e\u0001\u000e\u0005"+
		"\u000e\u0417\b\u000e\n\u000e\f\u000e\u041a\t\u000e\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0421\b\u000f\u0001\u000f"+
		"\u0003\u000f\u0424\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0428\b"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0003\u000f\u0431\b\u000f\u0001\u000f\u0003\u000f\u0434"+
		"\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0438\b\u000f\u0001\u000f"+
		"\u0001\u000f\u0003\u000f\u043c\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0003\u000f\u0447\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0003\u000f\u0453\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0003\u000f\u045a\b\u000f\u0001\u0010\u0001\u0010\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0003\u0011\u0473\b\u0011\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0003\u0012\u0479\b\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0003\u0012\u0484\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0003\u0012\u0497\b\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0003\u0012\u04a3\b\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0003\u0012\u04b3\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0003\u0012\u04b9\b\u0012\u0003\u0012\u04bb\b\u0012\u0001\u0013\u0001"+
		"\u0013\u0003\u0013\u04bf\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u04c9"+
		"\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0003\u0013\u04d2\b\u0013\u0003\u0013\u04d4\b\u0013"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u04df\b\u0014\u0001\u0015"+
		"\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0003\u0017\u04fa\b\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0003\u0017\u0506\b\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u0019\u0003\u0019\u051a\b\u0019\u0001\u0019\u0001\u0019"+
		"\u0003\u0019\u051e\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019"+
		"\u0523\b\u0019\u0003\u0019\u0525\b\u0019\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u052d\b\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0003\u001a\u0537\b\u001a\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003"+
		"\u001a\u0541\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0003\u001a\u055b\b\u001a\u0001\u001b\u0001\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0003\u001b\u056f\b\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0003\u001b\u0576"+
		"\b\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u057c"+
		"\b\u001c\u0001\u001c\u0004\u001c\u057f\b\u001c\u000b\u001c\f\u001c\u0580"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u058e\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0593\b"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u059a\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u05a0\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05a5"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05b0\b\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05b5\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05bd"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05c2\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u05c6\b\u001c\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u05e0\b\u001e"+
		"\u0003\u001e\u05e2\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0003\u001f\u05e8\b\u001f\u0001\u001f\u0001\u001f\u0001 \u0003 \u05ed"+
		"\b \u0001 \u0001 \u0003 \u05f1\b \u0001 \u0001 \u0003 \u05f5\b \u0001"+
		" \u0001 \u0003 \u05f9\b \u0005 \u05fb\b \n \f \u05fe\t \u0001!\u0001!"+
		"\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u0607\b!\u0001!\u0001!\u0001"+
		"!\u0001!\u0001!\u0003!\u060e\b!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u061e"+
		"\b!\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003"+
		"\"\u0628\b\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001"+
		"\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"\u0638\b\"\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u064b\b#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u0657"+
		"\b#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0003#\u0679\b#\u0001$\u0001$\u0001$\u0001$\u0001$\u0001"+
		"$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u0689"+
		"\b$\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u069c\b&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u06ae\b&\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0003\'\u06eb\b\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0003\'\u070b"+
		"\b\'\u0001(\u0001(\u0001)\u0001)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0003*\u0723\b*\u0001+\u0001+\u0001+\u0001+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001+\u0003+\u0738\b+\u0001,\u0001,\u0001-\u0001-\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001/\u0001/\u00010\u00010\u00030\u074e\b0\u00010\u00010\u0001"+
		"0\u00010\u00010\u00030\u0755\b0\u00011\u00011\u00012\u00012\u00013\u0001"+
		"3\u00014\u00014\u00015\u00015\u00016\u00016\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00037\u078a\b7\u00018\u00018\u0001"+
		"8\u00018\u00018\u00018\u00018\u00018\u00018\u00019\u00019\u00019\u0001"+
		"9\u00019\u00039\u079a\b9\u00019\u00039\u079d\b9\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00039\u07ad\b9\u00019\u00019\u00019\u00019\u00039\u07b3\b9\u00019\u0001"+
		"9\u00039\u07b7\b9\u00019\u00019\u00019\u00019\u00039\u07bd\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u07c3\b9\u00019\u00019\u00019\u00019\u00039\u07c9"+
		"\b9\u00019\u00019\u00019\u00019\u00039\u07cf\b9\u00019\u00019\u00019\u0001"+
		"9\u00039\u07d5\b9\u00019\u00019\u00019\u00019\u00039\u07db\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u07e1\b9\u00019\u00019\u00019\u00019\u00039\u07e7"+
		"\b9\u00019\u00019\u00019\u00019\u00039\u07ed\b9\u00019\u00019\u00039\u07f1"+
		"\b9\u00019\u00019\u00019\u00019\u00039\u07f7\b9\u00019\u00019\u00019\u0001"+
		"9\u00039\u07fd\b9\u00019\u00019\u00019\u00019\u00039\u0803\b9\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00039\u080c\b9\u00019\u00039\u080f"+
		"\b9\u00019\u00039\u0812\b9\u00019\u00019\u00019\u00039\u0817\b9\u0001"+
		"9\u00039\u081a\b9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00039\u082a\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u0830\b9\u00019\u00019\u00039\u0834\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u083a\b9\u00019\u00019\u00019\u00019\u00039\u0840"+
		"\b9\u00019\u00019\u00039\u0844\b9\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00039\u085b\b9\u00019\u00019\u0001"+
		"9\u00019\u00039\u0861\b9\u00019\u00019\u00039\u0865\b9\u00019\u00019\u0001"+
		"9\u00019\u00039\u086b\b9\u00019\u00019\u00019\u00019\u00039\u0871\b9\u0001"+
		"9\u00019\u00019\u00019\u00039\u0877\b9\u00019\u00019\u00019\u00019\u0003"+
		"9\u087d\b9\u00019\u00019\u00019\u00019\u00039\u0883\b9\u00019\u00019\u0001"+
		"9\u00019\u00039\u0889\b9\u00019\u00019\u00019\u00019\u00039\u088f\b9\u0001"+
		"9\u00019\u00019\u00019\u00039\u0895\b9\u00019\u00019\u00019\u00019\u0003"+
		"9\u089b\b9\u00019\u00019\u00039\u089f\b9\u00019\u00019\u00019\u00019\u0003"+
		"9\u08a5\b9\u00019\u00019\u00019\u00019\u00039\u08ab\b9\u00019\u00019\u0003"+
		"9\u08af\b9\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0001:\u0001:\u0001:\u0003:\u08bf\b:\u0001:\u0001:\u0001"+
		":\u0001:\u0003:\u08c5\b:\u0001:\u0001:\u0001:\u0001:\u0003:\u08cb\b:\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u08df\b;\u0001"+
		"<\u0001<\u0001<\u0005<\u08e4\b<\n<\f<\u08e7\t<\u0001=\u0001=\u0001=\u0001"+
		"=\u0001=\u0003=\u08ee\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001"+
		"=\u0001=\u0001=\u0001=\u0003=\u08fa\b=\u0001=\u0001=\u0001=\u0001=\u0003"+
		"=\u0900\b=\u0001>\u0001>\u0003>\u0904\b>\u0001>\u0001>\u0001>\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0001?\u0001?\u0001?\u0001?\u0003?\u0913"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u0918\b?\u0001?\u0001?\u0001?\u0003?\u091d"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u0922\b?\u0001?\u0001?\u0001?\u0003?\u0927"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u092c\b?\u0001?\u0001?\u0001?\u0003?\u0931"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u0936\b?\u0001?\u0001?\u0001?\u0001?\u0003"+
		"?\u093c\b?\u0001?\u0001?\u0001?\u0003?\u0941\b?\u0001@\u0001@\u0003@\u0945"+
		"\b@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0003@\u094f"+
		"\b@\u0001A\u0001A\u0001A\u0001A\u0003A\u0955\bA\u0001A\u0001A\u0001A\u0001"+
		"A\u0001A\u0001A\u0005A\u095d\bA\nA\fA\u0960\tA\u0001B\u0001B\u0001B\u0001"+
		"B\u0001B\u0001B\u0005B\u0968\bB\nB\fB\u096b\tB\u0001B\u0001B\u0001B\u0005"+
		"B\u0970\bB\nB\fB\u0973\tB\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0003C\u097d\bC\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"D\u0001D\u0001D\u0001D\u0005D\u0989\bD\nD\fD\u098c\tD\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0005E\u0997\bE\nE\fE\u099a"+
		"\tE\u0001E\u0001E\u0001E\u0001E\u0003E\u09a0\bE\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0003E\u09a7\bE\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003"+
		"F\u09af\bF\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001"+
		"F\u0003F\u09ba\bF\u0001F\u0001F\u0003F\u09be\bF\u0001F\u0001F\u0001F\u0003"+
		"F\u09c3\bF\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F\u09cc"+
		"\bF\u0001G\u0001G\u0001G\u0003G\u09d1\bG\u0001G\u0001G\u0001G\u0001H\u0001"+
		"H\u0001H\u0001H\u0003H\u09da\bH\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0003H\u09e9\bH\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0004H\u09fe"+
		"\bH\u000bH\fH\u09ff\u0003H\u0a02\bH\u0001I\u0001I\u0003I\u0a06\bI\u0001"+
		"I\u0001I\u0003I\u0a0a\bI\u0001I\u0001I\u0001I\u0003I\u0a0f\bI\u0001I\u0003"+
		"I\u0a12\bI\u0001I\u0001I\u0001I\u0001I\u0003I\u0a18\bI\u0001I\u0001I\u0003"+
		"I\u0a1c\bI\u0001I\u0001I\u0003I\u0a20\bI\u0001J\u0001J\u0001J\u0003J\u0a25"+
		"\bJ\u0001J\u0003J\u0a28\bJ\u0001J\u0001J\u0001J\u0001J\u0001J\u0003J\u0a2f"+
		"\bJ\u0001J\u0003J\u0a32\bJ\u0001J\u0003J\u0a35\bJ\u0001J\u0001J\u0001"+
		"J\u0001J\u0001J\u0001J\u0003J\u0a3d\bJ\u0001J\u0001J\u0003J\u0a41\bJ\u0003"+
		"J\u0a43\bJ\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u0a4b\bK\u0001"+
		"K\u0001K\u0001K\u0001K\u0001K\u0003K\u0a52\bK\u0001K\u0003K\u0a55\bK\u0001"+
		"K\u0001K\u0003K\u0a59\bK\u0001K\u0001K\u0001K\u0001K\u0003K\u0a5f\bK\u0001"+
		"K\u0003K\u0a62\bK\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u0a6f\bL\u0001L\u0001L\u0001L\u0001L\u0003"+
		"L\u0a75\bL\u0001L\u0001L\u0001L\u0001L\u0003L\u0a7b\bL\u0001L\u0001L\u0001"+
		"L\u0001L\u0003L\u0a81\bL\u0001L\u0001L\u0001L\u0001L\u0003L\u0a87\bL\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u0a8d\bL\u0001L\u0001L\u0003L\u0a91\bL\u0001"+
		"L\u0001L\u0003L\u0a95\bL\u0001L\u0001L\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0003M\u0aa2\bM\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0003M\u0aaa\bM\u0001M\u0001M\u0003M\u0aae\bM\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0ab7\bM\u0001N\u0001N\u0001"+
		"N\u0001N\u0001N\u0003N\u0abe\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001"+
		"N\u0001N\u0003N\u0ac7\bN\u0001N\u0001N\u0001N\u0001N\u0005N\u0acd\bN\n"+
		"N\fN\u0ad0\tN\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001P"+
		"\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u0ae0\bP\u0001P\u0001"+
		"P\u0003P\u0ae4\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u0aeb\bP\u0001"+
		"P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u0af3\bP\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0003Q\u0af9\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0003Q\u0b0d\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0004Q\u0b22\bQ\u000bQ\fQ\u0b23\u0003Q\u0b26\bQ\u0001"+
		"R\u0001R\u0001S\u0001S\u0001S\u0003S\u0b2d\bS\u0001S\u0001S\u0001S\u0001"+
		"S\u0001S\u0001S\u0001S\u0001S\u0001S\u0003S\u0b38\bS\u0001S\u0001S\u0003"+
		"S\u0b3c\bS\u0001S\u0001S\u0003S\u0b40\bS\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0003T\u0b47\bT\u0001T\u0003T\u0b4a\bT\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0003T\u0b51\bT\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0003T\u0b5b\bT\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0003"+
		"T\u0b64\bT\u0001U\u0001U\u0003U\u0b68\bU\u0001U\u0001U\u0001U\u0001U\u0003"+
		"U\u0b6e\bU\u0001U\u0001U\u0001U\u0003U\u0b73\bU\u0001U\u0003U\u0b76\b"+
		"U\u0001U\u0001U\u0001U\u0001U\u0003U\u0b7c\bU\u0001U\u0001U\u0001U\u0001"+
		"U\u0003U\u0b82\bU\u0001U\u0001U\u0003U\u0b86\bU\u0001U\u0003U\u0b89\b"+
		"U\u0001U\u0001U\u0003U\u0b8d\bU\u0001U\u0003U\u0b90\bU\u0001U\u0003U\u0b93"+
		"\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u0b9c\bU\u0003"+
		"U\u0b9e\bU\u0001V\u0001V\u0001W\u0001W\u0001X\u0001X\u0001Y\u0001Y\u0001"+
		"Z\u0001Z\u0001[\u0001[\u0001\\\u0001\\\u0001]\u0001]\u0001^\u0001^\u0001"+
		"_\u0001_\u0001`\u0001`\u0001a\u0001a\u0001b\u0001b\u0001c\u0001c\u0001"+
		"d\u0001d\u0001e\u0001e\u0001e\u0003e\u0bc1\be\u0001e\u0003e\u0bc4\be\u0001"+
		"e\u0003e\u0bc7\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0bcf"+
		"\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0bd6\be\u0001e\u0001e\u0001"+
		"e\u0003e\u0bdb\be\u0001e\u0001e\u0003e\u0bdf\be\u0001e\u0001e\u0003e\u0be3"+
		"\be\u0001f\u0001f\u0001g\u0001g\u0001h\u0003h\u0bea\bh\u0001h\u0001h\u0001"+
		"h\u0003h\u0bef\bh\u0001h\u0001h\u0003h\u0bf3\bh\u0001h\u0003h\u0bf6\b"+
		"h\u0001h\u0003h\u0bf9\bh\u0001h\u0001h\u0003h\u0bfd\bh\u0001h\u0001h\u0001"+
		"h\u0001h\u0001h\u0003h\u0c04\bh\u0001h\u0003h\u0c07\bh\u0001i\u0001i\u0001"+
		"i\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0003j\u0c35\bj\u0001k\u0001k\u0001k\u0001k\u0001k\u0003k\u0c3c"+
		"\bk\u0001k\u0001k\u0003k\u0c40\bk\u0001l\u0001l\u0001l\u0001l\u0003l\u0c46"+
		"\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001m\u0001m\u0001m\u0001m\u0003"+
		"m\u0c51\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0c59\bm\u0001"+
		"n\u0001n\u0001n\u0001n\u0003n\u0c5f\bn\u0001n\u0001n\u0003n\u0c63\bn\u0001"+
		"o\u0001o\u0001o\u0001o\u0003o\u0c69\bo\u0001o\u0001o\u0003o\u0c6d\bo\u0001"+
		"p\u0001p\u0001p\u0001p\u0003p\u0c73\bp\u0001p\u0001p\u0001q\u0001q\u0001"+
		"q\u0001q\u0003q\u0c7b\bq\u0001q\u0001q\u0003q\u0c7f\bq\u0001r\u0001r\u0001"+
		"r\u0001r\u0001r\u0003r\u0c86\br\u0001r\u0001r\u0003r\u0c8a\br\u0001s\u0001"+
		"s\u0001s\u0001s\u0003s\u0c90\bs\u0001s\u0001s\u0003s\u0c94\bs\u0001t\u0001"+
		"t\u0001t\u0001t\u0001t\u0001t\u0003t\u0c9c\bt\u0001t\u0001t\u0003t\u0ca0"+
		"\bt\u0001u\u0001u\u0001u\u0001u\u0001u\u0003u\u0ca7\bu\u0001u\u0001u\u0003"+
		"u\u0cab\bu\u0001v\u0001v\u0001v\u0001v\u0003v\u0cb1\bv\u0001v\u0001v\u0003"+
		"v\u0cb5\bv\u0001w\u0001w\u0001w\u0001w\u0003w\u0cbb\bw\u0001w\u0001w\u0001"+
		"x\u0001x\u0001x\u0003x\u0cc2\bx\u0001x\u0001x\u0003x\u0cc6\bx\u0001x\u0001"+
		"x\u0003x\u0cca\bx\u0001y\u0001y\u0003y\u0cce\by\u0001y\u0001y\u0001y\u0003"+
		"y\u0cd3\by\u0001y\u0001y\u0003y\u0cd7\by\u0001z\u0001z\u0001z\u0001z\u0001"+
		"z\u0003z\u0cde\bz\u0001z\u0001z\u0003z\u0ce2\bz\u0001{\u0001{\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0003|\u0ceb\b|\u0001|\u0001|\u0001|\u0001|\u0003"+
		"|\u0cf1\b|\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}\u0cf8\b}\u0001}\u0001"+
		"}\u0001}\u0001}\u0003}\u0cfe\b}\u0001~\u0001~\u0001~\u0001~\u0001~\u0003"+
		"~\u0d05\b~\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u0d0b\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u0d11\b\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080"+
		"\u0d17\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0d1b\b\u0080\u0001"+
		"\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u0d21\b\u0081\u0001"+
		"\u0081\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003"+
		"\u0082\u0d29\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003"+
		"\u0082\u0d2f\b\u0082\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003"+
		"\u0083\u0d35\b\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u0d39\b\u0083"+
		"\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u0d3f\b\u0084"+
		"\u0001\u0084\u0001\u0084\u0003\u0084\u0d43\b\u0084\u0001\u0085\u0001\u0085"+
		"\u0001\u0085\u0001\u0085\u0003\u0085\u0d49\b\u0085\u0001\u0085\u0001\u0085"+
		"\u0003\u0085\u0d4d\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0003\u0086\u0d53\b\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0001\u0087\u0003\u0087\u0d5b\b\u0087\u0001\u0087\u0001\u0087"+
		"\u0003\u0087\u0d5f\b\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0003\u0088\u0d65\b\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0d69\b"+
		"\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0d6f"+
		"\b\u0089\u0001\u0089\u0001\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001"+
		"\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u0d79\b\u008a\u0001\u008a\u0001"+
		"\u008a\u0003\u008a\u0d7d\b\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001"+
		"\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0d85\b\u008b\u0001\u008b\u0001"+
		"\u008b\u0003\u008b\u0d89\b\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001"+
		"\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0d91\b\u008c\u0001\u008c\u0001"+
		"\u008c\u0003\u008c\u0d95\b\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u0d9d\b\u008d\u0001\u008d\u0001"+
		"\u008d\u0003\u008d\u0da1\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0003\u008e\u0da7\b\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0db3\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0db9\b\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0003\u0090\u0dbf\b\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u0dc3"+
		"\b\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091\u0dc9"+
		"\b\u0091\u0001\u0091\u0001\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0003\u0092\u0dd2\b\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0dda\b\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0003\u0093\u0de3\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0de7"+
		"\b\u0093\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094\u0dec\b\u0094"+
		"\u0001\u0095\u0001\u0095\u0003\u0095\u0df0\b\u0095\u0001\u0095\u0003\u0095"+
		"\u0df3\b\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0005\u0095\u0dfa\b\u0095\n\u0095\f\u0095\u0dfd\t\u0095\u0001\u0095\u0001"+
		"\u0095\u0003\u0095\u0e01\b\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001"+
		"\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0003"+
		"\u0095\u0e0c\b\u0095\u0001\u0096\u0001\u0096\u0001\u0097\u0001\u0097\u0001"+
		"\u0098\u0001\u0098\u0001\u0099\u0003\u0099\u0e15\b\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0e1c\b\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0e22\b\u0099\u0001"+
		"\u0099\u0001\u0099\u0003\u0099\u0e26\b\u0099\u0001\u0099\u0003\u0099\u0e29"+
		"\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0e2f"+
		"\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0003\u0099\u0e37\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003"+
		"\u0099\u0e3c\b\u0099\u0001\u0099\u0003\u0099\u0e3f\b\u0099\u0001\u0099"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099"+
		"\u0003\u0099\u0e48\b\u0099\u0003\u0099\u0e4a\b\u0099\u0003\u0099\u0e4c"+
		"\b\u0099\u0001\u0099\u0003\u0099\u0e4f\b\u0099\u0001\u009a\u0001\u009a"+
		"\u0001\u009a\u0001\u009b\u0001\u009b\u0001\u009c\u0001\u009c\u0003\u009c"+
		"\u0e58\b\u009c\u0001\u009c\u0003\u009c\u0e5b\b\u009c\u0001\u009c\u0001"+
		"\u009c\u0003\u009c\u0e5f\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0003\u009c\u0e72\b\u009c\u0001\u009c\u0003\u009c\u0e75"+
		"\b\u009c\u0001\u009c\u0003\u009c\u0e78\b\u009c\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0003\u009d\u0e88\b\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d"+
		"\u0e8d\b\u009d\u0003\u009d\u0e8f\b\u009d\u0001\u009d\u0003\u009d\u0e92"+
		"\b\u009d\u0003\u009d\u0e94\b\u009d\u0001\u009d\u0001\u009d\u0001\u009e"+
		"\u0001\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u0e9c\b\u009e\u0001\u009f"+
		"\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0003\u009f"+
		"\u0ea4\b\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f"+
		"\u0001\u009f\u0003\u009f\u0eac\b\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0003\u00a1\u0eb8\b\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0003\u00a1\u0ebe\b\u00a1\u0005\u00a1\u0ec0\b\u00a1\n\u00a1"+
		"\f\u00a1\u0ec3\t\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0003\u00a1\u0ec9\b\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0001\u00a3\u0003\u00a3\u0ed1\b\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0001\u00a4\u0001\u00a4\u0003\u00a4\u0ed8\b\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0edf\b\u00a5"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0003\u00a7\u0ee5\b\u00a7"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a9\u0001\u00a9"+
		"\u0003\u00a9\u0eed\b\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0ef1\b"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0efc\b\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0f21"+
		"\b\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0003\u00ab\u0f35\b\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ac\u0003\u00ac\u0f3b\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003"+
		"\u00ac\u0f40\b\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac\u0f44\b\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0003\u00ac\u0f48\b\u00ac\u0001\u00ac\u0004\u00ac"+
		"\u0f4b\b\u00ac\u000b\u00ac\f\u00ac\u0f4c\u0001\u00ac\u0001\u00ac\u0004"+
		"\u00ac\u0f51\b\u00ac\u000b\u00ac\f\u00ac\u0f52\u0001\u00ac\u0001\u00ac"+
		"\u0003\u00ac\u0f57\b\u00ac\u0001\u00ac\u0003\u00ac\u0f5a\b\u00ac\u0001"+
		"\u00ac\u0003\u00ac\u0f5d\b\u00ac\u0001\u00ac\u0003\u00ac\u0f60\b\u00ac"+
		"\u0001\u00ac\u0003\u00ac\u0f63\b\u00ac\u0001\u00ac\u0003\u00ac\u0f66\b"+
		"\u00ac\u0001\u00ac\u0003\u00ac\u0f69\b\u00ac\u0001\u00ac\u0003\u00ac\u0f6c"+
		"\b\u00ac\u0001\u00ac\u0003\u00ac\u0f6f\b\u00ac\u0001\u00ac\u0003\u00ac"+
		"\u0f72\b\u00ac\u0001\u00ac\u0003\u00ac\u0f75\b\u00ac\u0001\u00ad\u0003"+
		"\u00ad\u0f78\b\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003"+
		"\u00ad\u0f7e\b\u00ad\u0001\u00ad\u0003\u00ad\u0f81\b\u00ad\u0001\u00ad"+
		"\u0001\u00ad\u0003\u00ad\u0f85\b\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad"+
		"\u0f89\b\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0f8d\b\u00ad\u0001"+
		"\u00ad\u0004\u00ad\u0f90\b\u00ad\u000b\u00ad\f\u00ad\u0f91\u0001\u00ad"+
		"\u0001\u00ad\u0004\u00ad\u0f96\b\u00ad\u000b\u00ad\f\u00ad\u0f97\u0001"+
		"\u00ad\u0001\u00ad\u0003\u00ad\u0f9c\b\u00ad\u0001\u00ad\u0003\u00ad\u0f9f"+
		"\b\u00ad\u0001\u00ad\u0003\u00ad\u0fa2\b\u00ad\u0001\u00ad\u0003\u00ad"+
		"\u0fa5\b\u00ad\u0001\u00ad\u0003\u00ad\u0fa8\b\u00ad\u0001\u00ad\u0003"+
		"\u00ad\u0fab\b\u00ad\u0001\u00ad\u0003\u00ad\u0fae\b\u00ad\u0001\u00ad"+
		"\u0003\u00ad\u0fb1\b\u00ad\u0001\u00ad\u0003\u00ad\u0fb4\b\u00ad\u0001"+
		"\u00ad\u0003\u00ad\u0fb7\b\u00ad\u0001\u00ad\u0003\u00ad\u0fba\b\u00ad"+
		"\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0fbe\b\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0001\u00ae\u0005\u00ae\u0fc3\b\u00ae\n\u00ae\f\u00ae\u0fc6\t\u00ae\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u0fcd"+
		"\b\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001"+
		"\u00af\u0001\u00af\u0003\u00af\u0fd6\b\u00af\u0001\u00af\u0001\u00af\u0001"+
		"\u00b0\u0001\u00b0\u0003\u00b0\u0fdc\b\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0003\u00b0\u0fe2\b\u00b0\u0001\u00b0\u0001\u00b0\u0003"+
		"\u00b0\u0fe6\b\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0003\u00b0\u0fed\b\u00b0\u0003\u00b0\u0fef\b\u00b0\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0003\u00b1\u0ff5\b\u00b1\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b2\u0001\u00b2\u0003\u00b2\u0ffb\b\u00b2\u0001\u00b2"+
		"\u0001\u00b2\u0001\u00b2\u0003\u00b2\u1000\b\u00b2\u0001\u00b2\u0001\u00b2"+
		"\u0003\u00b2\u1004\b\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0003\u00b4\u1011\b\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0003\u00b4\u1018\b\u00b4\u0001\u00b4\u0003\u00b4"+
		"\u101b\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0005\u00b5\u1020\b"+
		"\u00b5\n\u00b5\f\u00b5\u1023\t\u00b5\u0001\u00b6\u0001\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003\u00b6\u1032\b\u00b6"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0003\u00b7"+
		"\u1039\b\u00b7\u0001\u00b8\u0001\u00b8\u0003\u00b8\u103d\b\u00b8\u0001"+
		"\u00b8\u0003\u00b8\u1040\b\u00b8\u0001\u00b8\u0001\u00b8\u0003\u00b8\u1044"+
		"\b\u00b8\u0001\u00b8\u0001\u00b8\u0003\u00b8\u1048\b\u00b8\u0001\u00b8"+
		"\u0003\u00b8\u104b\b\u00b8\u0001\u00b8\u0001\u00b8\u0003\u00b8\u104f\b"+
		"\u00b8\u0001\u00b8\u0003\u00b8\u1052\b\u00b8\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0003\u00b9\u1057\b\u00b9\u0001\u00ba\u0003\u00ba\u105a\b\u00ba"+
		"\u0001\u00ba\u0001\u00ba\u0003\u00ba\u105e\b\u00ba\u0001\u00ba\u0001\u00ba"+
		"\u0003\u00ba\u1062\b\u00ba\u0001\u00ba\u0003\u00ba\u1065\b\u00ba\u0001"+
		"\u00ba\u0003\u00ba\u1068\b\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0003"+
		"\u00ba\u106d\b\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001"+
		"\u00ba\u0003\u00ba\u1074\b\u00ba\u0001\u00ba\u0003\u00ba\u1077\b\u00ba"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0005\u00bc"+
		"\u107e\b\u00bc\n\u00bc\f\u00bc\u1081\t\u00bc\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u1088\b\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u108f\b\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u1093\b\u00bd\u0001\u00bd\u0003\u00bd\u1096"+
		"\b\u00bd\u0001\u00bd\u0003\u00bd\u1099\b\u00bd\u0001\u00bd\u0003\u00bd"+
		"\u109c\b\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u10a0\b\u00bd\u0001"+
		"\u00bd\u0003\u00bd\u10a3\b\u00bd\u0001\u00bd\u0003\u00bd\u10a6\b\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0003\u00bd\u10ae\b\u00bd\u0003\u00bd\u10b0\b\u00bd\u0003\u00bd\u10b2"+
		"\b\u00bd\u0001\u00be\u0003\u00be\u10b5\b\u00be\u0001\u00be\u0001\u00be"+
		"\u0001\u00be\u0004\u00be\u10ba\b\u00be\u000b\u00be\f\u00be\u10bb\u0001"+
		"\u00be\u0001\u00be\u0004\u00be\u10c0\b\u00be\u000b\u00be\f\u00be\u10c1"+
		"\u0001\u00be\u0001\u00be\u0003\u00be\u10c6\b\u00be\u0001\u00be\u0003\u00be"+
		"\u10c9\b\u00be\u0001\u00be\u0003\u00be\u10cc\b\u00be\u0001\u00be\u0003"+
		"\u00be\u10cf\b\u00be\u0001\u00be\u0003\u00be\u10d2\b\u00be\u0001\u00be"+
		"\u0003\u00be\u10d5\b\u00be\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf"+
		"\u0003\u00bf\u10db\b\u00bf\u0003\u00bf\u10dd\b\u00bf\u0001\u00bf\u0001"+
		"\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0005\u00c0\u10e5"+
		"\b\u00c0\n\u00c0\f\u00c0\u10e8\t\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0005\u00c2"+
		"\u10f2\b\u00c2\n\u00c2\f\u00c2\u10f5\t\u00c2\u0001\u00c3\u0001\u00c3\u0001"+
		"\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0003"+
		"\u00c3\u10ff\b\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0003\u00c3\u1104"+
		"\b\u00c3\u0005\u00c3\u1106\b\u00c3\n\u00c3\f\u00c3\u1109\t\u00c3\u0001"+
		"\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0003\u00c3\u1110"+
		"\b\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c4\u0005\u00c4\u1116"+
		"\b\u00c4\n\u00c4\f\u00c4\u1119\t\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c5"+
		"\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0005\u00c5\u1121\b\u00c5\n\u00c5"+
		"\f\u00c5\u1124\t\u00c5\u0001\u00c6\u0001\u00c6\u0003\u00c6\u1128\b\u00c6"+
		"\u0001\u00c6\u0003\u00c6\u112b\b\u00c6\u0001\u00c6\u0003\u00c6\u112e\b"+
		"\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6\u1133\b\u00c6\u0001"+
		"\u00c6\u0003\u00c6\u1136\b\u00c6\u0001\u00c6\u0003\u00c6\u1139\b\u00c6"+
		"\u0005\u00c6\u113b\b\u00c6\n\u00c6\f\u00c6\u113e\t\u00c6\u0001\u00c7\u0001"+
		"\u00c7\u0003\u00c7\u1142\b\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7\u1146"+
		"\b\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0003\u00c8\u1154\b\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0001\u00cb\u0003\u00cb\u1162\b\u00cb\u0001\u00cc\u0001"+
		"\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005\u00cc\u116a"+
		"\b\u00cc\n\u00cc\f\u00cc\u116d\t\u00cc\u0001\u00cc\u0003\u00cc\u1170\b"+
		"\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001"+
		"\u00cd\u0001\u00cd\u0001\u00ce\u0001\u00ce\u0003\u00ce\u117b\b\u00ce\u0001"+
		"\u00ce\u0005\u00ce\u117e\b\u00ce\n\u00ce\f\u00ce\u1181\t\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0003\u00ce\u1185\b\u00ce\u0001\u00ce\u0005\u00ce\u1188\b"+
		"\u00ce\n\u00ce\f\u00ce\u118b\t\u00ce\u0001\u00ce\u0003\u00ce\u118e\b\u00ce"+
		"\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf"+
		"\u1195\b\u00cf\n\u00cf\f\u00cf\u1198\t\u00cf\u0001\u00d0\u0001\u00d0\u0003"+
		"\u00d0\u119c\b\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003"+
		"\u00d0\u11a2\b\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0001\u00d0\u0005\u00d0\u11aa\b\u00d0\n\u00d0\f\u00d0\u11ad\t\u00d0"+
		"\u0003\u00d0\u11af\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0003\u00d1\u11b5\b\u00d1\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2"+
		"\u11ba\b\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u11bf\b"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d4\u0001\u00d4\u0001"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003"+
		"\u00d4\u11cc\b\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0005"+
		"\u00d4\u11d2\b\u00d4\n\u00d4\f\u00d4\u11d5\t\u00d4\u0003\u00d4\u11d7\b"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0005\u00d4\u11dc\b\u00d4\n"+
		"\u00d4\f\u00d4\u11df\t\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0005"+
		"\u00d5\u11e4\b\u00d5\n\u00d5\f\u00d5\u11e7\t\u00d5\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0003\u00d6"+
		"\u11f0\b\u00d6\u0003\u00d6\u11f2\b\u00d6\u0001\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0004\u00d8\u1207"+
		"\b\u00d8\u000b\u00d8\f\u00d8\u1208\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0004\u00d8\u120f\b\u00d8\u000b\u00d8\f\u00d8\u1210\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u1242"+
		"\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u1254"+
		"\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u1259\b\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0003\u00d8\u1269\b\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0003\u00d8\u127b\b\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0003\u00d8\u1280\b\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8"+
		"\u1284\b\u00d8\u0001\u00d8\u0004\u00d8\u1287\b\u00d8\u000b\u00d8\f\u00d8"+
		"\u1288\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0004\u00d8\u128e\b\u00d8\u000b"+
		"\u00d8\f\u00d8\u128f\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0003\u00d8\u129d\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0005\u00d8\u12a5\b\u00d8\n\u00d8\f\u00d8"+
		"\u12a8\t\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0003\u00d9\u12b6\b\u00d9\u0003\u00d9\u12b8\b\u00d9\u0001"+
		"\u00da\u0001\u00da\u0003\u00da\u12bc\b\u00da\u0001\u00db\u0001\u00db\u0003"+
		"\u00db\u12c0\b\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0003\u00dc\u12c7\b\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dc\u0001\u00dc\u0001\u00dc\u0005\u00dc\u12cf\b\u00dc\n\u00dc\f\u00dc"+
		"\u12d2\t\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0001\u00dd\u0004\u00dd\u12db\b\u00dd\u000b\u00dd\f\u00dd"+
		"\u12dc\u0001\u00dd\u0001\u00dd\u0003\u00dd\u12e1\b\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0004\u00dd\u12eb\b\u00dd\u000b\u00dd\f\u00dd\u12ec\u0001\u00dd"+
		"\u0001\u00dd\u0003\u00dd\u12f1\b\u00dd\u0001\u00dd\u0001\u00dd\u0003\u00dd"+
		"\u12f5\b\u00dd\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de\u0005\u00de"+
		"\u12fb\b\u00de\n\u00de\f\u00de\u12fe\t\u00de\u0001\u00de\u0001\u00de\u0001"+
		"\u00df\u0003\u00df\u1303\b\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0005"+
		"\u00df\u1308\b\u00df\n\u00df\f\u00df\u130b\t\u00df\u0001\u00df\u0003\u00df"+
		"\u130e\b\u00df\u0001\u00e0\u0003\u00e0\u1311\b\u00e0\u0001\u00e0\u0003"+
		"\u00e0\u1314\b\u00e0\u0001\u00e0\u0003\u00e0\u1317\b\u00e0\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0005\u00e1\u131c\b\u00e1\n\u00e1\f\u00e1\u131f"+
		"\t\u00e1\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003"+
		"\u00e2\u1326\b\u00e2\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0005\u00e3\u132b"+
		"\b\u00e3\n\u00e3\f\u00e3\u132e\t\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4"+
		"\u1338\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4"+
		"\u133e\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1348\b\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u134e\b\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1354\b\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0003\u00e4\u135f\b\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u136d\b\u00e4"+
		"\u0001\u00e4\u0003\u00e4\u1370\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u137f\b\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1391\b\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1396\b\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u139c\b\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0003\u00e4\u13a1\b\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0003\u00e4\u13a7\b\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0003\u00e4\u13ad\b\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0003\u00e4\u13b7\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0003\u00e4\u13bd\b\u00e4\u0001\u00e4\u0003\u00e4\u13c0\b\u00e4\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0003"+
		"\u00e6\u13c8\b\u00e6\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u13cd"+
		"\b\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0005\u00e7\u13d2\b\u00e7"+
		"\n\u00e7\f\u00e7\u13d5\t\u00e7\u0001\u00e7\u0003\u00e7\u13d8\b\u00e7\u0001"+
		"\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0003\u00e7\u13e1\b\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0003\u00e7\u13ed\b\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0001\u00e7\u0005\u00e7\u13f4\b\u00e7\n\u00e7\f\u00e7\u13f7\t\u00e7"+
		"\u0003\u00e7\u13f9\b\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7"+
		"\u0001\u00e7\u0001\u00e7\u0003\u00e7\u1407\b\u00e7\u0003\u00e7\u1409\b"+
		"\u00e7\u0001\u00e8\u0001\u00e8\u0003\u00e8\u140d\b\u00e8\u0001\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0005\u00e9\u1412\b\u00e9\n\u00e9\f\u00e9\u1415\t\u00e9"+
		"\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0005\u00ea\u141a\b\u00ea\n\u00ea"+
		"\f\u00ea\u141d\t\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0003\u00eb"+
		"\u1422\b\u00eb\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0005\u00ec\u1427\b"+
		"\u00ec\n\u00ec\f\u00ec\u142a\t\u00ec\u0001\u00ed\u0001\u00ed\u0001\u00ee"+
		"\u0001\u00ee\u0003\u00ee\u1430\b\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee"+
		"\u1434\b\u00ee\u0001\u00ee\u0005\u00ee\u1437\b\u00ee\n\u00ee\f\u00ee\u143a"+
		"\t\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0005\u00ef\u143f\b\u00ef"+
		"\n\u00ef\f\u00ef\u1442\t\u00ef\u0001\u00f0\u0001\u00f0\u0003\u00f0\u1446"+
		"\b\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0005\u00f2\u1455\b\u00f2\n\u00f2\f\u00f2\u1458\t\u00f2"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0003\u00f2\u145d\b\u00f2\u0003\u00f2"+
		"\u145f\b\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0003\u00f2\u146a\b\u00f2"+
		"\u0001\u00f2\u0001\u00f2\u0003\u00f2\u146e\b\u00f2\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0005\u00f3\u1475\b\u00f3\n\u00f3"+
		"\f\u00f3\u1478\t\u00f3\u0003\u00f3\u147a\b\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f4\u0001\u00f4\u0003\u00f4\u1480\b\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0003\u00f4\u1484\b\u00f4\u0001\u00f4\u0003\u00f4\u1487\b\u00f4\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0005"+
		"\u00f4\u148f\b\u00f4\n\u00f4\f\u00f4\u1492\t\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u149a\b\u00f4"+
		"\u0003\u00f4\u149c\b\u00f4\u0001\u00f4\u0003\u00f4\u149f\b\u00f4\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u14a5\b\u00f4\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0005\u00f4\u14ac"+
		"\b\u00f4\n\u00f4\f\u00f4\u14af\t\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4"+
		"\u14b3\b\u00f4\u0001\u00f4\u0003\u00f4\u14b6\b\u00f4\u0001\u00f4\u0001"+
		"\u00f4\u0001\u00f4\u0003\u00f4\u14bb\b\u00f4\u0001\u00f4\u0003\u00f4\u14be"+
		"\b\u00f4\u0001\u00f4\u0003\u00f4\u14c1\b\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0005\u00f4\u14c9\b\u00f4"+
		"\n\u00f4\f\u00f4\u14cc\t\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0003"+
		"\u00f4\u14d1\b\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0005"+
		"\u00f4\u14dd\b\u00f4\n\u00f4\f\u00f4\u14e0\t\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0003\u00f4\u14e4\b\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u14e8\b"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u14ec\b\u00f4\u0001\u00f4\u0001"+
		"\u00f4\u0003\u00f4\u14f0\b\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u14f4"+
		"\b\u00f4\u0001\u00f4\u0003\u00f4\u14f7\b\u00f4\u0005\u00f4\u14f9\b\u00f4"+
		"\n\u00f4\f\u00f4\u14fc\t\u00f4\u0001\u00f5\u0003\u00f5\u14ff\b\u00f5\u0001"+
		"\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0005\u00f5\u1505\b\u00f5\n"+
		"\u00f5\f\u00f5\u1508\t\u00f5\u0003\u00f5\u150a\b\u00f5\u0001\u00f5\u0003"+
		"\u00f5\u150d\b\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001"+
		"\u00f5\u0003\u00f5\u1514\b\u00f5\u0001\u00f6\u0003\u00f6\u1517\b\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u151c\b\u00f6\u0001\u00f6"+
		"\u0001\u00f6\u0001\u00f6\u0003\u00f6\u1521\b\u00f6\u0001\u00f6\u0001\u00f6"+
		"\u0001\u00f6\u0003\u00f6\u1526\b\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6"+
		"\u0003\u00f6\u152b\b\u00f6\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0005\u00f7\u1534\b\u00f7\n\u00f7"+
		"\f\u00f7\u1537\t\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u153b\b\u00f7"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0003\u00f8\u1549\b\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f8\u0001\u00f8\u0005\u00f8\u1551\b\u00f8\n\u00f8\f\u00f8\u1554"+
		"\t\u00f8\u0001\u00f9\u0001\u00f9\u0003\u00f9\u1558\b\u00f9\u0001\u00f9"+
		"\u0003\u00f9\u155b\b\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u155f\b"+
		"\u00f9\u0001\u00f9\u0003\u00f9\u1562\b\u00f9\u0001\u00f9\u0001\u00f9\u0001"+
		"\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u1569\b\u00f9\u0001\u00f9\u0003"+
		"\u00f9\u156c\b\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u1570\b\u00f9"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fb\u0004\u00fb\u1576\b\u00fb"+
		"\u000b\u00fb\f\u00fb\u1577\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0003\u00fc\u157f\b\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0003\u00fc\u1585\b\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0003\u00fd\u158c\b\u00fd\u0001\u00fd\u0003\u00fd"+
		"\u158f\b\u00fd\u0001\u00fd\u0003\u00fd\u1592\b\u00fd\u0001\u00fd\u0001"+
		"\u00fd\u0003\u00fd\u1596\b\u00fd\u0001\u00fe\u0001\u00fe\u0003\u00fe\u159a"+
		"\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0003\u00fe\u15a2\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003"+
		"\u00fe\u15b3\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0003\u00fe\u15c0\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u15ca"+
		"\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003"+
		"\u00fe\u15d1\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u15d6"+
		"\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u15db\b\u00fe"+
		"\u0003\u00fe\u15dd\b\u00fe\u0001\u00fe\u0003\u00fe\u15e0\b\u00fe\u0001"+
		"\u00fe\u0003\u00fe\u15e3\b\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u15e7"+
		"\b\u00fe\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0003\u00ff\u15ed"+
		"\b\u00ff\u0001\u0100\u0001\u0100\u0001\u0100\u0005\u0100\u15f2\b\u0100"+
		"\n\u0100\f\u0100\u15f5\t\u0100\u0001\u0101\u0001\u0101\u0001\u0101\u0001"+
		"\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001"+
		"\u0101\u0001\u0101\u0003\u0101\u1602\b\u0101\u0001\u0102\u0001\u0102\u0001"+
		"\u0103\u0001\u0103\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001"+
		"\u0104\u0001\u0104\u0003\u0104\u160e\b\u0104\u0001\u0104\u0001\u0104\u0001"+
		"\u0104\u0005\u0104\u1613\b\u0104\n\u0104\f\u0104\u1616\t\u0104\u0001\u0105"+
		"\u0001\u0105\u0001\u0106\u0001\u0106\u0001\u0107\u0001\u0107\u0001\u0108"+
		"\u0001\u0108\u0001\u0109\u0001\u0109\u0001\u010a\u0001\u010a\u0001\u010b"+
		"\u0001\u010b\u0001\u010c\u0001\u010c\u0001\u010c\u0000\u0005\u01b0\u01b8"+
		"\u01e8\u01f0\u0208\u010d\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012"+
		"\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\"+
		"^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090"+
		"\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8"+
		"\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0"+
		"\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8"+
		"\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0"+
		"\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108"+
		"\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120"+
		"\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138"+
		"\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150"+
		"\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168"+
		"\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180"+
		"\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198"+
		"\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0"+
		"\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8"+
		"\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0"+
		"\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8"+
		"\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210"+
		"\u0212\u0214\u0216\u0218\u00002\u0002\u0000\u00bc\u00bc\u0207\u0207\u0002"+
		"\u0000<<\u01da\u01da\u0002\u0000\u0014\u0014\u01d7\u01d7\u0004\u0000\u00d6"+
		"\u00d6\u00d8\u00d8\u0143\u0143\u01a7\u01a7\u0003\u0000\u000b\u000b\u00bc"+
		"\u00bc\u0207\u0207\u0002\u0000\u0247\u0247\u0318\u0318\u0002\u0000\u0109"+
		"\u0109\u027d\u027d\u0001\u0000\u02af\u02b1\u0002\u0000\u00c5\u00c5\u0261"+
		"\u0261\u0002\u0000\u0172\u0172\u0309\u0309\u0005\u0000\u0010\u0010\u00a3"+
		"\u00a3\u0116\u0116\u01fe\u01fe\u026a\u026a\u0004\u0000\u00a3\u00a3\u0116"+
		"\u0116\u01fe\u01fe\u026a\u026a\u0002\u0000\u0012\u0012\u0119\u0119\u0002"+
		"\u0000\u023b\u023b\u023d\u023d\u0002\u0000==\u013a\u013a\u0005\u0000\u0010"+
		"\u0010\u01a8\u01a8\u0202\u0202\u023b\u023b\u023d\u023d\u0002\u0000\u0235"+
		"\u0235\u026d\u026d\u0002\u0000\u00ec\u00ec\u0109\u0109\u0005\u0000\u0092"+
		"\u0092\u010c\u010c\u01f3\u01f3\u0235\u0235\u0237\u0237\u0002\u0000\u024b"+
		"\u024b\u028a\u028a\u0003\u0000\u023b\u023b\u023d\u023d\u0266\u0266\u0002"+
		"\u0000\u013a\u013a\u0205\u0205\u0002\u0000\u009f\u009f\u0105\u0105\u0002"+
		"\u0000tt\u01d9\u01d9\u0005\u0000\u0016\u0016\u00b4\u00b4\u00eb\u00eb\u00ed"+
		"\u00ed\u027f\u027f\u0002\u0000\u0083\u0083\u01e7\u01e7\u0005\u0000\u0016"+
		"\u001655zz\u0246\u0246\u027f\u027f\u0004\u0000\u028c\u028c\u02df\u02df"+
		"\u02f0\u02f0\u02f8\u02f8\u0002\u0000\u01bc\u01bc\u01ef\u01ef\u0003\u0000"+
		"\u00cb\u00cb\u011c\u011c\u0262\u0262\u0002\u0000\u0010\u0010\u00b8\u00b8"+
		"\u0002\u0000\u00df\u00df\u012d\u012d\u0002\u0000\u01ec\u01ec\u01ef\u01ef"+
		"\u0002\u0000\u00df\u00df\u0166\u0166\u0001\u0000\u02fc\u02fc\u0004\u0000"+
		"\u0313\u0313\u0315\u0315\u032e\u032e\u0334\u0334\u0002\u0000\u0338\u0338"+
		"\u033b\u033b\u0002\u0000\u0010\u0010\u016d\u016d\u0002\u0000\u0317\u0317"+
		"\u0332\u0333\u0003\u0000\u02fe\u02fe\u032f\u032f\u033a\u033a\u0002\u0000"+
		"\u032e\u032e\u0334\u0334\f\u0000\u0017\u0017\u016d\u016d\u0187\u0187\u030e"+
		"\u0312\u0319\u0319\u031c\u0324\u0327\u0328\u032a\u032d\u0330\u0331\u0335"+
		"\u0337\u0339\u0339\u033b\u0342\u0005\u0000\u0316\u0316\u0318\u0318\u031a"+
		"\u031b\u0325\u0326\u0329\u0329\u0004\u0000\u0109\u0109\u0113\u0113\u018c"+
		"\u018c\u027d\u027d\u0002\u0000\u0287\u0287\u0289\u0289\u0002\u0000\u0305"+
		"\u0306\u0309\u030a\u0001\u0000\u02be\u02c3\u0002\u0000\u001c\u001c\u00ab"+
		"\u00ab\b\u0000~~\u00bc\u00bc\u00ec\u00ec\u00fa\u00fa\u0136\u0136\u0188"+
		"\u0188\u01fe\u01fe\u0262\u0262n\u0000\u0001\u0001\u0004\u000e\u0011\u0014"+
		"\u0018\u0019\u001d\u001f!$&,./12446=@MPWZ]_dfgjlny{}\u0082\u0085\u0087"+
		"\u0088\u008c\u008c\u008e\u009a\u009c\u009c\u009f\u00a6\u00a8\u00aa\u00ac"+
		"\u00ad\u00b0\u00b2\u00b6\u00b7\u00ba\u00bb\u00bd\u00c1\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00d1\u00d3\u00d5\u00d7\u00d9\u00dd\u00e2\u00e4\u00e4\u00e6"+
		"\u00ea\u00ee\u00f6\u00f8\u00f9\u00fb\u00fc\u00fe\u0103\u0105\u0108\u010a"+
		"\u010d\u010f\u010f\u0113\u011b\u011d\u011e\u0120\u0120\u0122\u0122\u0125"+
		"\u0128\u012b\u012d\u0130\u0132\u0134\u0134\u0137\u013a\u013d\u0142\u0144"+
		"\u0144\u0146\u0146\u0148\u0156\u0158\u0160\u0162\u0167\u016a\u016c\u016e"+
		"\u016f\u0171\u0171\u0173\u017c\u017e\u017f\u0182\u0182\u0184\u0186\u0189"+
		"\u018c\u018e\u018f\u0191\u019b\u019e\u01a5\u01a7\u01a7\u01a9\u01aa\u01ac"+
		"\u01ae\u01b1\u01b1\u01b3\u01b3\u01b5\u01b9\u01bb\u01c0\u01c2\u01c4\u01c6"+
		"\u01cb\u01cd\u01d6\u01d8\u01e0\u01e2\u01fd\u01ff\u0205\u0207\u020b\u020d"+
		"\u020e\u0210\u0210\u0212\u022d\u022f\u022f\u0231\u0232\u0234\u0236\u0238"+
		"\u0238\u023a\u023d\u0241\u0245\u0249\u0249\u024b\u0261\u0264\u0265\u0267"+
		"\u026c\u026e\u0271\u0273\u0274\u0276\u027b\u027e\u027e\u0280\u0281\u0283"+
		"\u0283\u0285\u0285\u0288\u028b\u028d\u028d\u028f\u028f\u02f0\u02f0\u19e4"+
		"\u0000\u021a\u0001\u0000\u0000\u0000\u0002\u025b\u0001\u0000\u0000\u0000"+
		"\u0004\u025d\u0001\u0000\u0000\u0000\u0006\u0287\u0001\u0000\u0000\u0000"+
		"\b\u02a7\u0001\u0000\u0000\u0000\n\u02c4\u0001\u0000\u0000\u0000\f\u02db"+
		"\u0001\u0000\u0000\u0000\u000e\u02dd\u0001\u0000\u0000\u0000\u0010\u02df"+
		"\u0001\u0000\u0000\u0000\u0012\u032d\u0001\u0000\u0000\u0000\u0014\u0350"+
		"\u0001\u0000\u0000\u0000\u0016\u0361\u0001\u0000\u0000\u0000\u0018\u0363"+
		"\u0001\u0000\u0000\u0000\u001a\u0411\u0001\u0000\u0000\u0000\u001c\u0413"+
		"\u0001\u0000\u0000\u0000\u001e\u0459\u0001\u0000\u0000\u0000 \u045b\u0001"+
		"\u0000\u0000\u0000\"\u0472\u0001\u0000\u0000\u0000$\u04ba\u0001\u0000"+
		"\u0000\u0000&\u04d3\u0001\u0000\u0000\u0000(\u04d5\u0001\u0000\u0000\u0000"+
		"*\u04e0\u0001\u0000\u0000\u0000,\u04e2\u0001\u0000\u0000\u0000.\u0505"+
		"\u0001\u0000\u0000\u00000\u0507\u0001\u0000\u0000\u00002\u0524\u0001\u0000"+
		"\u0000\u00004\u055a\u0001\u0000\u0000\u00006\u0575\u0001\u0000\u0000\u0000"+
		"8\u05c5\u0001\u0000\u0000\u0000:\u05c7\u0001\u0000\u0000\u0000<\u05e1"+
		"\u0001\u0000\u0000\u0000>\u05e3\u0001\u0000\u0000\u0000@\u05ec\u0001\u0000"+
		"\u0000\u0000B\u061d\u0001\u0000\u0000\u0000D\u0637\u0001\u0000\u0000\u0000"+
		"F\u0678\u0001\u0000\u0000\u0000H\u0688\u0001\u0000\u0000\u0000J\u068a"+
		"\u0001\u0000\u0000\u0000L\u06ad\u0001\u0000\u0000\u0000N\u070a\u0001\u0000"+
		"\u0000\u0000P\u070c\u0001\u0000\u0000\u0000R\u070e\u0001\u0000\u0000\u0000"+
		"T\u0722\u0001\u0000\u0000\u0000V\u0737\u0001\u0000\u0000\u0000X\u0739"+
		"\u0001\u0000\u0000\u0000Z\u073b\u0001\u0000\u0000\u0000\\\u073d\u0001"+
		"\u0000\u0000\u0000^\u0749\u0001\u0000\u0000\u0000`\u074b\u0001\u0000\u0000"+
		"\u0000b\u0756\u0001\u0000\u0000\u0000d\u0758\u0001\u0000\u0000\u0000f"+
		"\u075a\u0001\u0000\u0000\u0000h\u075c\u0001\u0000\u0000\u0000j\u075e\u0001"+
		"\u0000\u0000\u0000l\u0760\u0001\u0000\u0000\u0000n\u0789\u0001\u0000\u0000"+
		"\u0000p\u078b\u0001\u0000\u0000\u0000r\u08ae\u0001\u0000\u0000\u0000t"+
		"\u08b0\u0001\u0000\u0000\u0000v\u08de\u0001\u0000\u0000\u0000x\u08e0\u0001"+
		"\u0000\u0000\u0000z\u08ff\u0001\u0000\u0000\u0000|\u0901\u0001\u0000\u0000"+
		"\u0000~\u090e\u0001\u0000\u0000\u0000\u0080\u0944\u0001\u0000\u0000\u0000"+
		"\u0082\u0950\u0001\u0000\u0000\u0000\u0084\u0961\u0001\u0000\u0000\u0000"+
		"\u0086\u0974\u0001\u0000\u0000\u0000\u0088\u0984\u0001\u0000\u0000\u0000"+
		"\u008a\u098d\u0001\u0000\u0000\u0000\u008c\u09a8\u0001\u0000\u0000\u0000"+
		"\u008e\u09cd\u0001\u0000\u0000\u0000\u0090\u09d5\u0001\u0000\u0000\u0000"+
		"\u0092\u0a03\u0001\u0000\u0000\u0000\u0094\u0a42\u0001\u0000\u0000\u0000"+
		"\u0096\u0a44\u0001\u0000\u0000\u0000\u0098\u0a63\u0001\u0000\u0000\u0000"+
		"\u009a\u0ab6\u0001\u0000\u0000\u0000\u009c\u0ab8\u0001\u0000\u0000\u0000"+
		"\u009e\u0ad1\u0001\u0000\u0000\u0000\u00a0\u0ad8\u0001\u0000\u0000\u0000"+
		"\u00a2\u0af4\u0001\u0000\u0000\u0000\u00a4\u0b27\u0001\u0000\u0000\u0000"+
		"\u00a6\u0b29\u0001\u0000\u0000\u0000\u00a8\u0b63\u0001\u0000\u0000\u0000"+
		"\u00aa\u0b65\u0001\u0000\u0000\u0000\u00ac\u0b9f\u0001\u0000\u0000\u0000"+
		"\u00ae\u0ba1\u0001\u0000\u0000\u0000\u00b0\u0ba3\u0001\u0000\u0000\u0000"+
		"\u00b2\u0ba5\u0001\u0000\u0000\u0000\u00b4\u0ba7\u0001\u0000\u0000\u0000"+
		"\u00b6\u0ba9\u0001\u0000\u0000\u0000\u00b8\u0bab\u0001\u0000\u0000\u0000"+
		"\u00ba\u0bad\u0001\u0000\u0000\u0000\u00bc\u0baf\u0001\u0000\u0000\u0000"+
		"\u00be\u0bb1\u0001\u0000\u0000\u0000\u00c0\u0bb3\u0001\u0000\u0000\u0000"+
		"\u00c2\u0bb5\u0001\u0000\u0000\u0000\u00c4\u0bb7\u0001\u0000\u0000\u0000"+
		"\u00c6\u0bb9\u0001\u0000\u0000\u0000\u00c8\u0bbb\u0001\u0000\u0000\u0000"+
		"\u00ca\u0bbd\u0001\u0000\u0000\u0000\u00cc\u0be4\u0001\u0000\u0000\u0000"+
		"\u00ce\u0be6\u0001\u0000\u0000\u0000\u00d0\u0be9\u0001\u0000\u0000\u0000"+
		"\u00d2\u0c08\u0001\u0000\u0000\u0000\u00d4\u0c34\u0001\u0000\u0000\u0000"+
		"\u00d6\u0c36\u0001\u0000\u0000\u0000\u00d8\u0c41\u0001\u0000\u0000\u0000"+
		"\u00da\u0c4c\u0001\u0000\u0000\u0000\u00dc\u0c5a\u0001\u0000\u0000\u0000"+
		"\u00de\u0c64\u0001\u0000\u0000\u0000\u00e0\u0c6e\u0001\u0000\u0000\u0000"+
		"\u00e2\u0c76\u0001\u0000\u0000\u0000\u00e4\u0c80\u0001\u0000\u0000\u0000"+
		"\u00e6\u0c8b\u0001\u0000\u0000\u0000\u00e8\u0c95\u0001\u0000\u0000\u0000"+
		"\u00ea\u0ca1\u0001\u0000\u0000\u0000\u00ec\u0cac\u0001\u0000\u0000\u0000"+
		"\u00ee\u0cb6\u0001\u0000\u0000\u0000\u00f0\u0cbe\u0001\u0000\u0000\u0000"+
		"\u00f2\u0ccb\u0001\u0000\u0000\u0000\u00f4\u0cd8\u0001\u0000\u0000\u0000"+
		"\u00f6\u0ce3\u0001\u0000\u0000\u0000\u00f8\u0ce5\u0001\u0000\u0000\u0000"+
		"\u00fa\u0cf2\u0001\u0000\u0000\u0000\u00fc\u0cff\u0001\u0000\u0000\u0000"+
		"\u00fe\u0d06\u0001\u0000\u0000\u0000\u0100\u0d12\u0001\u0000\u0000\u0000"+
		"\u0102\u0d1c\u0001\u0000\u0000\u0000\u0104\u0d24\u0001\u0000\u0000\u0000"+
		"\u0106\u0d30\u0001\u0000\u0000\u0000\u0108\u0d3a\u0001\u0000\u0000\u0000"+
		"\u010a\u0d44\u0001\u0000\u0000\u0000\u010c\u0d4e\u0001\u0000\u0000\u0000"+
		"\u010e\u0d56\u0001\u0000\u0000\u0000\u0110\u0d60\u0001\u0000\u0000\u0000"+
		"\u0112\u0d6a\u0001\u0000\u0000\u0000\u0114\u0d72\u0001\u0000\u0000\u0000"+
		"\u0116\u0d7e\u0001\u0000\u0000\u0000\u0118\u0d8a\u0001\u0000\u0000\u0000"+
		"\u011a\u0d96\u0001\u0000\u0000\u0000\u011c\u0da2\u0001\u0000\u0000\u0000"+
		"\u011e\u0dae\u0001\u0000\u0000\u0000\u0120\u0dba\u0001\u0000\u0000\u0000"+
		"\u0122\u0dc4\u0001\u0000\u0000\u0000\u0124\u0dcc\u0001\u0000\u0000\u0000"+
		"\u0126\u0dde\u0001\u0000\u0000\u0000\u0128\u0de8\u0001\u0000\u0000\u0000"+
		"\u012a\u0e00\u0001\u0000\u0000\u0000\u012c\u0e0d\u0001\u0000\u0000\u0000"+
		"\u012e\u0e0f\u0001\u0000\u0000\u0000\u0130\u0e11\u0001\u0000\u0000\u0000"+
		"\u0132\u0e14\u0001\u0000\u0000\u0000\u0134\u0e50\u0001\u0000\u0000\u0000"+
		"\u0136\u0e53\u0001\u0000\u0000\u0000\u0138\u0e55\u0001\u0000\u0000\u0000"+
		"\u013a\u0e79\u0001\u0000\u0000\u0000\u013c\u0e97\u0001\u0000\u0000\u0000"+
		"\u013e\u0e9d\u0001\u0000\u0000\u0000\u0140\u0ead\u0001\u0000\u0000\u0000"+
		"\u0142\u0eb1\u0001\u0000\u0000\u0000\u0144\u0eca\u0001\u0000\u0000\u0000"+
		"\u0146\u0ecc\u0001\u0000\u0000\u0000\u0148\u0ed5\u0001\u0000\u0000\u0000"+
		"\u014a\u0edb\u0001\u0000\u0000\u0000\u014c\u0ee0\u0001\u0000\u0000\u0000"+
		"\u014e\u0ee2\u0001\u0000\u0000\u0000\u0150\u0ee6\u0001\u0000\u0000\u0000"+
		"\u0152\u0eea\u0001\u0000\u0000\u0000\u0154\u0ef4\u0001\u0000\u0000\u0000"+
		"\u0156\u0ef7\u0001\u0000\u0000\u0000\u0158\u0f3a\u0001\u0000\u0000\u0000"+
		"\u015a\u0f77\u0001\u0000\u0000\u0000\u015c\u0fbb\u0001\u0000\u0000\u0000"+
		"\u015e\u0fc7\u0001\u0000\u0000\u0000\u0160\u0fee\u0001\u0000\u0000\u0000"+
		"\u0162\u0ff0\u0001\u0000\u0000\u0000\u0164\u1003\u0001\u0000\u0000\u0000"+
		"\u0166\u1005\u0001\u0000\u0000\u0000\u0168\u101a\u0001\u0000\u0000\u0000"+
		"\u016a\u101c\u0001\u0000\u0000\u0000\u016c\u1031\u0001\u0000\u0000\u0000"+
		"\u016e\u1033\u0001\u0000\u0000\u0000\u0170\u103a\u0001\u0000\u0000\u0000"+
		"\u0172\u1053\u0001\u0000\u0000\u0000\u0174\u1059\u0001\u0000\u0000\u0000"+
		"\u0176\u1078\u0001\u0000\u0000\u0000\u0178\u107a\u0001\u0000\u0000\u0000"+
		"\u017a\u10b1\u0001\u0000\u0000\u0000\u017c\u10b4\u0001\u0000\u0000\u0000"+
		"\u017e\u10dc\u0001\u0000\u0000\u0000\u0180\u10e0\u0001\u0000\u0000\u0000"+
		"\u0182\u10e9\u0001\u0000\u0000\u0000\u0184\u10ec\u0001\u0000\u0000\u0000"+
		"\u0186\u110f\u0001\u0000\u0000\u0000\u0188\u1111\u0001\u0000\u0000\u0000"+
		"\u018a\u111c\u0001\u0000\u0000\u0000\u018c\u112d\u0001\u0000\u0000\u0000"+
		"\u018e\u1145\u0001\u0000\u0000\u0000\u0190\u1153\u0001\u0000\u0000\u0000"+
		"\u0192\u1155\u0001\u0000\u0000\u0000\u0194\u1157\u0001\u0000\u0000\u0000"+
		"\u0196\u1161\u0001\u0000\u0000\u0000\u0198\u116f\u0001\u0000\u0000\u0000"+
		"\u019a\u1171\u0001\u0000\u0000\u0000\u019c\u1178\u0001\u0000\u0000\u0000"+
		"\u019e\u118f\u0001\u0000\u0000\u0000\u01a0\u119b\u0001\u0000\u0000\u0000"+
		"\u01a2\u11b0\u0001\u0000\u0000\u0000\u01a4\u11b6\u0001\u0000\u0000\u0000"+
		"\u01a6\u11bb\u0001\u0000\u0000\u0000\u01a8\u11c3\u0001\u0000\u0000\u0000"+
		"\u01aa\u11e0\u0001\u0000\u0000\u0000\u01ac\u11f1\u0001\u0000\u0000\u0000"+
		"\u01ae\u11f3\u0001\u0000\u0000\u0000\u01b0\u1241\u0001\u0000\u0000\u0000"+
		"\u01b2\u12b7\u0001\u0000\u0000\u0000\u01b4\u12bb\u0001\u0000\u0000\u0000"+
		"\u01b6\u12bf\u0001\u0000\u0000\u0000\u01b8\u12c6\u0001\u0000\u0000\u0000"+
		"\u01ba\u12f4\u0001\u0000\u0000\u0000\u01bc\u12f6\u0001\u0000\u0000\u0000"+
		"\u01be\u1302\u0001\u0000\u0000\u0000\u01c0\u1316\u0001\u0000\u0000\u0000"+
		"\u01c2\u1318\u0001\u0000\u0000\u0000\u01c4\u1320\u0001\u0000\u0000\u0000"+
		"\u01c6\u1327\u0001\u0000\u0000\u0000\u01c8\u13bf\u0001\u0000\u0000\u0000"+
		"\u01ca\u13c1\u0001\u0000\u0000\u0000\u01cc\u13c7\u0001\u0000\u0000\u0000"+
		"\u01ce\u1408\u0001\u0000\u0000\u0000\u01d0\u140c\u0001\u0000\u0000\u0000"+
		"\u01d2\u140e\u0001\u0000\u0000\u0000\u01d4\u1416\u0001\u0000\u0000\u0000"+
		"\u01d6\u141e\u0001\u0000\u0000\u0000\u01d8\u1423\u0001\u0000\u0000\u0000"+
		"\u01da\u142b\u0001\u0000\u0000\u0000\u01dc\u142f\u0001\u0000\u0000\u0000"+
		"\u01de\u143b\u0001\u0000\u0000\u0000\u01e0\u1445\u0001\u0000\u0000\u0000"+
		"\u01e2\u1447\u0001\u0000\u0000\u0000\u01e4\u146d\u0001\u0000\u0000\u0000"+
		"\u01e6\u146f\u0001\u0000\u0000\u0000\u01e8\u14e7\u0001\u0000\u0000\u0000"+
		"\u01ea\u1513\u0001\u0000\u0000\u0000\u01ec\u152a\u0001\u0000\u0000\u0000"+
		"\u01ee\u153a\u0001\u0000\u0000\u0000\u01f0\u1548\u0001\u0000\u0000\u0000"+
		"\u01f2\u156f\u0001\u0000\u0000\u0000\u01f4\u1571\u0001\u0000\u0000\u0000"+
		"\u01f6\u1575\u0001\u0000\u0000\u0000\u01f8\u157e\u0001\u0000\u0000\u0000"+
		"\u01fa\u158b\u0001\u0000\u0000\u0000\u01fc\u1599\u0001\u0000\u0000\u0000"+
		"\u01fe\u15ec\u0001\u0000\u0000\u0000\u0200\u15ee\u0001\u0000\u0000\u0000"+
		"\u0202\u1601\u0001\u0000\u0000\u0000\u0204\u1603\u0001\u0000\u0000\u0000"+
		"\u0206\u1605\u0001\u0000\u0000\u0000\u0208\u160d\u0001\u0000\u0000\u0000"+
		"\u020a\u1617\u0001\u0000\u0000\u0000\u020c\u1619\u0001\u0000\u0000\u0000"+
		"\u020e\u161b\u0001\u0000\u0000\u0000\u0210\u161d\u0001\u0000\u0000\u0000"+
		"\u0212\u161f\u0001\u0000\u0000\u0000\u0214\u1621\u0001\u0000\u0000\u0000"+
		"\u0216\u1623\u0001\u0000\u0000\u0000\u0218\u1625\u0001\u0000\u0000\u0000"+
		"\u021a\u0223\u0003\u0002\u0001\u0000\u021b\u021c\u0005\u0343\u0000\u0000"+
		"\u021c\u021e\u0003\u0002\u0001\u0000\u021d\u021b\u0001\u0000\u0000\u0000"+
		"\u021e\u0221\u0001\u0000\u0000\u0000\u021f\u021d\u0001\u0000\u0000\u0000"+
		"\u021f\u0220\u0001\u0000\u0000\u0000\u0220\u0222\u0001\u0000\u0000\u0000"+
		"\u0221\u021f\u0001\u0000\u0000\u0000\u0222\u0224\u0005\u0343\u0000\u0000"+
		"\u0223\u021f\u0001\u0000\u0000\u0000\u0223\u0224\u0001\u0000\u0000\u0000"+
		"\u0224\u0225\u0001\u0000\u0000\u0000\u0225\u0226\u0005\u0000\u0000\u0001"+
		"\u0226\u0001\u0001\u0000\u0000\u0000\u0227\u025c\u0003\u0004\u0002\u0000"+
		"\u0228\u025c\u0003\u0006\u0003\u0000\u0229\u025c\u0003`0\u0000\u022a\u025c"+
		"\u0003n7\u0000\u022b\u025c\u0003b1\u0000\u022c\u025c\u0003d2\u0000\u022d"+
		"\u025c\u0003f3\u0000\u022e\u025c\u0003h4\u0000\u022f\u025c\u0003j5\u0000"+
		"\u0230\u025c\u0003l6\u0000\u0231\u025c\u0003\u00ccf\u0000\u0232\u025c"+
		"\u0003\u00ceg\u0000\u0233\u025c\u0003\u00d0h\u0000\u0234\u025c\u0003\u00d2"+
		"i\u0000\u0235\u025c\u0003\u00d4j\u0000\u0236\u025c\u0003\u0128\u0094\u0000"+
		"\u0237\u025c\u0003\u012a\u0095\u0000\u0238\u025c\u0003\u012c\u0096\u0000"+
		"\u0239\u025c\u0003\u012e\u0097\u0000\u023a\u025c\u0003\u0130\u0098\u0000"+
		"\u023b\u025c\u0003\u0132\u0099\u0000\u023c\u025c\u0003\u0134\u009a\u0000"+
		"\u023d\u025c\u0003\u0136\u009b\u0000\u023e\u025c\u0003\u0138\u009c\u0000"+
		"\u023f\u025c\u0003\u013a\u009d\u0000\u0240\u025c\u0003\u013c\u009e\u0000"+
		"\u0241\u025c\u0003\u013e\u009f\u0000\u0242\u025c\u0003\u0140\u00a0\u0000"+
		"\u0243\u025c\u0003\u0142\u00a1\u0000\u0244\u025c\u0003\u0144\u00a2\u0000"+
		"\u0245\u025c\u0003\u0146\u00a3\u0000\u0246\u025c\u0003\u0148\u00a4\u0000"+
		"\u0247\u025c\u0003\u014a\u00a5\u0000\u0248\u025c\u0003\u014c\u00a6\u0000"+
		"\u0249\u025c\u0003\u014e\u00a7\u0000\u024a\u025c\u0003\u0150\u00a8\u0000"+
		"\u024b\u025c\u0003\u0152\u00a9\u0000\u024c\u025c\u0003\u0154\u00aa\u0000"+
		"\u024d\u025c\u0003\u0156\u00ab\u0000\u024e\u025c\u0003\u0158\u00ac\u0000"+
		"\u024f\u025c\u0003\u015a\u00ad\u0000\u0250\u025c\u0003\u0160\u00b0\u0000"+
		"\u0251\u025c\u0003\u0162\u00b1\u0000\u0252\u025c\u0003\u0164\u00b2\u0000"+
		"\u0253\u025c\u0003\u0166\u00b3\u0000\u0254\u025c\u0003\u016c\u00b6\u0000"+
		"\u0255\u025c\u0003\u016e\u00b7\u0000\u0256\u025c\u0003\u0170\u00b8\u0000"+
		"\u0257\u025c\u0003\u0172\u00b9\u0000\u0258\u025c\u0003\u0174\u00ba\u0000"+
		"\u0259\u025c\u0003\u017a\u00bd\u0000\u025a\u025c\u0003\u017c\u00be\u0000"+
		"\u025b\u0227\u0001\u0000\u0000\u0000\u025b\u0228\u0001\u0000\u0000\u0000"+
		"\u025b\u0229\u0001\u0000\u0000\u0000\u025b\u022a\u0001\u0000\u0000\u0000"+
		"\u025b\u022b\u0001\u0000\u0000\u0000\u025b\u022c\u0001\u0000\u0000\u0000"+
		"\u025b\u022d\u0001\u0000\u0000\u0000\u025b\u022e\u0001\u0000\u0000\u0000"+
		"\u025b\u022f\u0001\u0000\u0000\u0000\u025b\u0230\u0001\u0000\u0000\u0000"+
		"\u025b\u0231\u0001\u0000\u0000\u0000\u025b\u0232\u0001\u0000\u0000\u0000"+
		"\u025b\u0233\u0001\u0000\u0000\u0000\u025b\u0234\u0001\u0000\u0000\u0000"+
		"\u025b\u0235\u0001\u0000\u0000\u0000\u025b\u0236\u0001\u0000\u0000\u0000"+
		"\u025b\u0237\u0001\u0000\u0000\u0000\u025b\u0238\u0001\u0000\u0000\u0000"+
		"\u025b\u0239\u0001\u0000\u0000\u0000\u025b\u023a\u0001\u0000\u0000\u0000"+
		"\u025b\u023b\u0001\u0000\u0000\u0000\u025b\u023c\u0001\u0000\u0000\u0000"+
		"\u025b\u023d\u0001\u0000\u0000\u0000\u025b\u023e\u0001\u0000\u0000\u0000"+
		"\u025b\u023f\u0001\u0000\u0000\u0000\u025b\u0240\u0001\u0000\u0000\u0000"+
		"\u025b\u0241\u0001\u0000\u0000\u0000\u025b\u0242\u0001\u0000\u0000\u0000"+
		"\u025b\u0243\u0001\u0000\u0000\u0000\u025b\u0244\u0001\u0000\u0000\u0000"+
		"\u025b\u0245\u0001\u0000\u0000\u0000\u025b\u0246\u0001\u0000\u0000\u0000"+
		"\u025b\u0247\u0001\u0000\u0000\u0000\u025b\u0248\u0001\u0000\u0000\u0000"+
		"\u025b\u0249\u0001\u0000\u0000\u0000\u025b\u024a\u0001\u0000\u0000\u0000"+
		"\u025b\u024b\u0001\u0000\u0000\u0000\u025b\u024c\u0001\u0000\u0000\u0000"+
		"\u025b\u024d\u0001\u0000\u0000\u0000\u025b\u024e\u0001\u0000\u0000\u0000"+
		"\u025b\u024f\u0001\u0000\u0000\u0000\u025b\u0250\u0001\u0000\u0000\u0000"+
		"\u025b\u0251\u0001\u0000\u0000\u0000\u025b\u0252\u0001\u0000\u0000\u0000"+
		"\u025b\u0253\u0001\u0000\u0000\u0000\u025b\u0254\u0001\u0000\u0000\u0000"+
		"\u025b\u0255\u0001\u0000\u0000\u0000\u025b\u0256\u0001\u0000\u0000\u0000"+
		"\u025b\u0257\u0001\u0000\u0000\u0000\u025b\u0258\u0001\u0000\u0000\u0000"+
		"\u025b\u0259\u0001\u0000\u0000\u0000\u025b\u025a\u0001\u0000\u0000\u0000"+
		"\u025c\u0003\u0001\u0000\u0000\u0000\u025d\u025e\u0003\u0208\u0104\u0000"+
		"\u025e\u0005\u0001\u0000\u0000\u0000\u025f\u0288\u0003\b\u0004\u0000\u0260"+
		"\u0288\u0003\n\u0005\u0000\u0261\u0288\u0003\f\u0006\u0000\u0262\u0288"+
		"\u0003\u000e\u0007\u0000\u0263\u0288\u0003\u0010\b\u0000\u0264\u0288\u0003"+
		"\u0012\t\u0000\u0265\u0288\u0003\u0014\n\u0000\u0266\u0288\u0003\u0016"+
		"\u000b\u0000\u0267\u0288\u0003\u0018\f\u0000\u0268\u0288\u0003\u001e\u000f"+
		"\u0000\u0269\u0288\u0003 \u0010\u0000\u026a\u0288\u0003\"\u0011\u0000"+
		"\u026b\u0288\u0003$\u0012\u0000\u026c\u0288\u0003&\u0013\u0000\u026d\u0288"+
		"\u0003(\u0014\u0000\u026e\u0288\u0003*\u0015\u0000\u026f\u0288\u0003,"+
		"\u0016\u0000\u0270\u0288\u0003.\u0017\u0000\u0271\u0288\u00030\u0018\u0000"+
		"\u0272\u0288\u00032\u0019\u0000\u0273\u0288\u00034\u001a\u0000\u0274\u0288"+
		"\u00038\u001c\u0000\u0275\u0288\u0003:\u001d\u0000\u0276\u0288\u0003<"+
		"\u001e\u0000\u0277\u0288\u0003>\u001f\u0000\u0278\u0288\u0003B!\u0000"+
		"\u0279\u0288\u0003D\"\u0000\u027a\u0288\u0003F#\u0000\u027b\u0288\u0003"+
		"H$\u0000\u027c\u0288\u0003J%\u0000\u027d\u0288\u0003L&\u0000\u027e\u0288"+
		"\u0003N\'\u0000\u027f\u0288\u0003P(\u0000\u0280\u0288\u0003R)\u0000\u0281"+
		"\u0288\u0003T*\u0000\u0282\u0288\u0003V+\u0000\u0283\u0288\u0003X,\u0000"+
		"\u0284\u0288\u0003Z-\u0000\u0285\u0288\u0003\\.\u0000\u0286\u0288\u0003"+
		"^/\u0000\u0287\u025f\u0001\u0000\u0000\u0000\u0287\u0260\u0001\u0000\u0000"+
		"\u0000\u0287\u0261\u0001\u0000\u0000\u0000\u0287\u0262\u0001\u0000\u0000"+
		"\u0000\u0287\u0263\u0001\u0000\u0000\u0000\u0287\u0264\u0001\u0000\u0000"+
		"\u0000\u0287\u0265\u0001\u0000\u0000\u0000\u0287\u0266\u0001\u0000\u0000"+
		"\u0000\u0287\u0267\u0001\u0000\u0000\u0000\u0287\u0268\u0001\u0000\u0000"+
		"\u0000\u0287\u0269\u0001\u0000\u0000\u0000\u0287\u026a\u0001\u0000\u0000"+
		"\u0000\u0287\u026b\u0001\u0000\u0000\u0000\u0287\u026c\u0001\u0000\u0000"+
		"\u0000\u0287\u026d\u0001\u0000\u0000\u0000\u0287\u026e\u0001\u0000\u0000"+
		"\u0000\u0287\u026f\u0001\u0000\u0000\u0000\u0287\u0270\u0001\u0000\u0000"+
		"\u0000\u0287\u0271\u0001\u0000\u0000\u0000\u0287\u0272\u0001\u0000\u0000"+
		"\u0000\u0287\u0273\u0001\u0000\u0000\u0000\u0287\u0274\u0001\u0000\u0000"+
		"\u0000\u0287\u0275\u0001\u0000\u0000\u0000\u0287\u0276\u0001\u0000\u0000"+
		"\u0000\u0287\u0277\u0001\u0000\u0000\u0000\u0287\u0278\u0001\u0000\u0000"+
		"\u0000\u0287\u0279\u0001\u0000\u0000\u0000\u0287\u027a\u0001\u0000\u0000"+
		"\u0000\u0287\u027b\u0001\u0000\u0000\u0000\u0287\u027c\u0001\u0000\u0000"+
		"\u0000\u0287\u027d\u0001\u0000\u0000\u0000\u0287\u027e\u0001\u0000\u0000"+
		"\u0000\u0287\u027f\u0001\u0000\u0000\u0000\u0287\u0280\u0001\u0000\u0000"+
		"\u0000\u0287\u0281\u0001\u0000\u0000\u0000\u0287\u0282\u0001\u0000\u0000"+
		"\u0000\u0287\u0283\u0001\u0000\u0000\u0000\u0287\u0284\u0001\u0000\u0000"+
		"\u0000\u0287\u0285\u0001\u0000\u0000\u0000\u0287\u0286\u0001\u0000\u0000"+
		"\u0000\u0288\u0007\u0001\u0000\u0000\u0000\u0289\u028a\u0005\u0013\u0000"+
		"\u0000\u028a\u028b\u0005\u000e\u0000\u0000\u028b\u028c\u0003\u0208\u0104"+
		"\u0000\u028c\u028d\u0005\u02ff\u0000\u0000\u028d\u028e\u0003\u01f2\u00f9"+
		"\u0000\u028e\u028f\u0005\u0300\u0000\u0000\u028f\u0290\u0005\u01d4\u0000"+
		"\u0000\u0290\u0291\u0005\u0247\u0000\u0000\u0291\u0292\u0003\u0208\u0104"+
		"\u0000\u0292\u02a8\u0001\u0000\u0000\u0000\u0293\u0294\u0005\u0013\u0000"+
		"\u0000\u0294\u0295\u0005\u000e\u0000\u0000\u0295\u0296\u0003\u0208\u0104"+
		"\u0000\u0296\u0297\u0005\u02ff\u0000\u0000\u0297\u0298\u0003\u01f2\u00f9"+
		"\u0000\u0298\u0299\u0005\u0300\u0000\u0000\u0299\u029a\u0005\u0193\u0000"+
		"\u0000\u029a\u029b\u0005\u0247\u0000\u0000\u029b\u029c\u0003\u01fe\u00ff"+
		"\u0000\u029c\u02a8\u0001\u0000\u0000\u0000\u029d\u029e\u0005\u0013\u0000"+
		"\u0000\u029e\u029f\u0005\u000e\u0000\u0000\u029f\u02a0\u0003\u0208\u0104"+
		"\u0000\u02a0\u02a1\u0005\u02ff\u0000\u0000\u02a1\u02a2\u0003\u01f2\u00f9"+
		"\u0000\u02a2\u02a3\u0005\u0300\u0000\u0000\u02a3\u02a4\u0005\u0207\u0000"+
		"\u0000\u02a4\u02a5\u0005\u01f3\u0000\u0000\u02a5\u02a6\u0003\u0208\u0104"+
		"\u0000\u02a6\u02a8\u0001\u0000\u0000\u0000\u02a7\u0289\u0001\u0000\u0000"+
		"\u0000\u02a7\u0293\u0001\u0000\u0000\u0000\u02a7\u029d\u0001\u0000\u0000"+
		"\u0000\u02a8\t\u0001\u0000\u0000\u0000\u02a9\u02aa\u0005\u0013\u0000\u0000"+
		"\u02aa\u02ab\u0005Y\u0000\u0000\u02ab\u02ac\u0003\u01d0\u00e8\u0000\u02ac"+
		"\u02ad\u0005\u01c7\u0000\u0000\u02ad\u02ae\u0005\u02b8\u0000\u0000\u02ae"+
		"\u02c5\u0001\u0000\u0000\u0000\u02af\u02b0\u0005\u0013\u0000\u0000\u02b0"+
		"\u02b1\u0005Y\u0000\u0000\u02b1\u02b2\u0003\u01d0\u00e8\u0000\u02b2\u02b3"+
		"\u0005\u01d4\u0000\u0000\u02b3\u02b4\u0005\u0247\u0000\u0000\u02b4\u02b5"+
		"\u0003\u0208\u0104\u0000\u02b5\u02c5\u0001\u0000\u0000\u0000\u02b6\u02b7"+
		"\u0005\u0013\u0000\u0000\u02b7\u02b8\u0005Y\u0000\u0000\u02b8\u02b9\u0003"+
		"\u01d0\u00e8\u0000\u02b9\u02ba\u0005\u0193\u0000\u0000\u02ba\u02bb\u0005"+
		"\u0247\u0000\u0000\u02bb\u02bc\u0003\u01fe\u00ff\u0000\u02bc\u02c5\u0001"+
		"\u0000\u0000\u0000\u02bd\u02be\u0005\u0013\u0000\u0000\u02be\u02bf\u0005"+
		"Y\u0000\u0000\u02bf\u02c0\u0003\u01d0\u00e8\u0000\u02c0\u02c1\u0005\u0207"+
		"\u0000\u0000\u02c1\u02c2\u0005\u01f3\u0000\u0000\u02c2\u02c3\u0003\u0208"+
		"\u0104\u0000\u02c3\u02c5\u0001\u0000\u0000\u0000\u02c4\u02a9\u0001\u0000"+
		"\u0000\u0000\u02c4\u02af\u0001\u0000\u0000\u0000\u02c4\u02b6\u0001\u0000"+
		"\u0000\u0000\u02c4\u02bd\u0001\u0000\u0000\u0000\u02c5\u000b\u0001\u0000"+
		"\u0000\u0000\u02c6\u02c7\u0005\u0013\u0000\u0000\u02c7\u02c8\u0005u\u0000"+
		"\u0000\u02c8\u02c9\u0003\u0208\u0104\u0000\u02c9\u02ca\u0005\u01d4\u0000"+
		"\u0000\u02ca\u02cb\u0005\u0247\u0000\u0000\u02cb\u02cc\u0003\u0208\u0104"+
		"\u0000\u02cc\u02dc\u0001\u0000\u0000\u0000\u02cd\u02ce\u0005\u0013\u0000"+
		"\u0000\u02ce\u02cf\u0005u\u0000\u0000\u02cf\u02d0\u0003\u0208\u0104\u0000"+
		"\u02d0\u02d1\u0005\u0193\u0000\u0000\u02d1\u02d2\u0005\u0247\u0000\u0000"+
		"\u02d2\u02d3\u0003\u01fe\u00ff\u0000\u02d3\u02dc\u0001\u0000\u0000\u0000"+
		"\u02d4\u02d5\u0005\u0013\u0000\u0000\u02d5\u02d6\u0005u\u0000\u0000\u02d6"+
		"\u02d7\u0003\u0208\u0104\u0000\u02d7\u02d8\u0005\u0207\u0000\u0000\u02d8"+
		"\u02d9\u0005\u01f3\u0000\u0000\u02d9\u02da\u0003\u0208\u0104\u0000\u02da"+
		"\u02dc\u0001\u0000\u0000\u0000\u02db\u02c6\u0001\u0000\u0000\u0000\u02db"+
		"\u02cd\u0001\u0000\u0000\u0000\u02db\u02d4\u0001\u0000\u0000\u0000\u02dc"+
		"\r\u0001\u0000\u0000\u0000\u02dd\u02de\u0003\u020c\u0106\u0000\u02de\u000f"+
		"\u0001\u0000\u0000\u0000\u02df\u02e0\u0003\u020c\u0106\u0000\u02e0\u0011"+
		"\u0001\u0000\u0000\u0000\u02e1\u02e2\u0005\u0013\u0000\u0000\u02e2\u02e3"+
		"\u0005\u00ba\u0000\u0000\u02e3\u02e9\u0003\u0208\u0104\u0000\u02e4\u02e5"+
		"\u0005\u0207\u0000\u0000\u02e5\u02e6\u0005\u009b\u0000\u0000\u02e6\u02ea"+
		"\u0003\u01b0\u00d8\u0000\u02e7\u02e8\u0005\u00bc\u0000\u0000\u02e8\u02ea"+
		"\u0005\u009b\u0000\u0000\u02e9\u02e4\u0001\u0000\u0000\u0000\u02e9\u02e7"+
		"\u0001\u0000\u0000\u0000\u02ea\u032e\u0001\u0000\u0000\u0000\u02eb\u02ec"+
		"\u0005\u0013\u0000\u0000\u02ec\u02ed\u0005\u00ba\u0000\u0000\u02ed\u02ee"+
		"\u0003\u0208\u0104\u0000\u02ee\u02ef\u0007\u0000\u0000\u0000\u02ef\u02f0"+
		"\u0005\u016d\u0000\u0000\u02f0\u02f1\u0005\u0172\u0000\u0000\u02f1\u032e"+
		"\u0001\u0000\u0000\u0000\u02f2\u02f3\u0005\u0013\u0000\u0000\u02f3\u02f4"+
		"\u0005\u00ba\u0000\u0000\u02f4\u02f5\u0003\u0208\u0104\u0000\u02f5\u02f6"+
		"\u0005\u000b\u0000\u0000\u02f6\u02f9\u0003\u0080@\u0000\u02f7\u02f8\u0005"+
		"\u016d\u0000\u0000\u02f8\u02fa\u0005\u0274\u0000\u0000\u02f9\u02f7\u0001"+
		"\u0000\u0000\u0000\u02f9\u02fa\u0001\u0000\u0000\u0000\u02fa\u032e\u0001"+
		"\u0000\u0000\u0000\u02fb\u02fc\u0005\u0013\u0000\u0000\u02fc\u02fd\u0005"+
		"\u00ba\u0000\u0000\u02fd\u02fe\u0003\u0208\u0104\u0000\u02fe\u02ff\u0005"+
		"\u00bc\u0000\u0000\u02ff\u0302\u0005m\u0000\u0000\u0300\u0301\u0005\u02b3"+
		"\u0000\u0000\u0301\u0303\u0005\u00d3\u0000\u0000\u0302\u0300\u0001\u0000"+
		"\u0000\u0000\u0302\u0303\u0001\u0000\u0000\u0000\u0303\u0304\u0001\u0000"+
		"\u0000\u0000\u0304\u0306\u0003\u0208\u0104\u0000\u0305\u0307\u0007\u0001"+
		"\u0000\u0000\u0306\u0305\u0001\u0000\u0000\u0000\u0306\u0307\u0001\u0000"+
		"\u0000\u0000\u0307\u032e\u0001\u0000\u0000\u0000\u0308\u0309\u0005\u0013"+
		"\u0000\u0000\u0309\u030a\u0005\u00ba\u0000\u0000\u030a\u030b\u0003\u0208"+
		"\u0104\u0000\u030b\u030c\u0005\u01d4\u0000\u0000\u030c\u030d\u0005m\u0000"+
		"\u0000\u030d\u030e\u0003\u0208\u0104\u0000\u030e\u030f\u0005\u0247\u0000"+
		"\u0000\u030f\u0310\u0003\u0208\u0104\u0000\u0310\u032e\u0001\u0000\u0000"+
		"\u0000\u0311\u0312\u0005\u0013\u0000\u0000\u0312\u0313\u0005\u00ba\u0000"+
		"\u0000\u0313\u0314\u0003\u0208\u0104\u0000\u0314\u0315\u0005\u0275\u0000"+
		"\u0000\u0315\u0316\u0005m\u0000\u0000\u0316\u0317\u0003\u0208\u0104\u0000"+
		"\u0317\u032e\u0001\u0000\u0000\u0000\u0318\u0319\u0005\u0013\u0000\u0000"+
		"\u0319\u031a\u0005\u00ba\u0000\u0000\u031a\u031b\u0003\u0208\u0104\u0000"+
		"\u031b\u031c\u0005\u0193\u0000\u0000\u031c\u031d\u0005\u0247\u0000\u0000"+
		"\u031d\u031e\u0003\u01fe\u00ff\u0000\u031e\u032e\u0001\u0000\u0000\u0000"+
		"\u031f\u0320\u0005\u0013\u0000\u0000\u0320\u0321\u0005\u00ba\u0000\u0000"+
		"\u0321\u0322\u0003\u0208\u0104\u0000\u0322\u0323\u0005\u01d4\u0000\u0000"+
		"\u0323\u0324\u0005\u0247\u0000\u0000\u0324\u0325\u0003\u0208\u0104\u0000"+
		"\u0325\u032e\u0001\u0000\u0000\u0000\u0326\u0327\u0005\u0013\u0000\u0000"+
		"\u0327\u0328\u0005\u00ba\u0000\u0000\u0328\u0329\u0003\u0208\u0104\u0000"+
		"\u0329\u032a\u0005\u0207\u0000\u0000\u032a\u032b\u0005\u01f3\u0000\u0000"+
		"\u032b\u032c\u0003\u0208\u0104\u0000\u032c\u032e\u0001\u0000\u0000\u0000"+
		"\u032d\u02e1\u0001\u0000\u0000\u0000\u032d\u02eb\u0001\u0000\u0000\u0000"+
		"\u032d\u02f2\u0001\u0000\u0000\u0000\u032d\u02fb\u0001\u0000\u0000\u0000"+
		"\u032d\u0308\u0001\u0000\u0000\u0000\u032d\u0311\u0001\u0000\u0000\u0000"+
		"\u032d\u0318\u0001\u0000\u0000\u0000\u032d\u031f\u0001\u0000\u0000\u0000"+
		"\u032d\u0326\u0001\u0000\u0000\u0000\u032e\u0013\u0001\u0000\u0000\u0000"+
		"\u032f\u0330\u0005\u0013\u0000\u0000\u0330\u0331\u0005\u02bb\u0000\u0000"+
		"\u0331\u0332\u0005\u0254\u0000\u0000\u0332\u0333\u0003\u0208\u0104\u0000"+
		"\u0333\u0334\u0005\u00b3\u0000\u0000\u0334\u0351\u0001\u0000\u0000\u0000"+
		"\u0335\u0336\u0005\u0013\u0000\u0000\u0336\u0337\u0005\u02bb\u0000\u0000"+
		"\u0337\u0338\u0005\u0254\u0000\u0000\u0338\u0339\u0003\u0208\u0104\u0000"+
		"\u0339\u033b\u0005\u00c3\u0000\u0000\u033a\u033c\u0007\u0002\u0000\u0000"+
		"\u033b\u033a\u0001\u0000\u0000\u0000\u033b\u033c\u0001\u0000\u0000\u0000"+
		"\u033c\u0351\u0001\u0000\u0000\u0000\u033d\u033e\u0005\u0013\u0000\u0000"+
		"\u033e\u033f\u0005\u02bb\u0000\u0000\u033f\u0340\u0005\u0254\u0000\u0000"+
		"\u0340\u0341\u0003\u0208\u0104\u0000\u0341\u0342\u0005\u0193\u0000\u0000"+
		"\u0342\u0346\u0005\u0247\u0000\u0000\u0343\u0347\u0003\u0208\u0104\u0000"+
		"\u0344\u0347\u0005\u008d\u0000\u0000\u0345\u0347\u0005\u0206\u0000\u0000"+
		"\u0346\u0343\u0001\u0000\u0000\u0000\u0346\u0344\u0001\u0000\u0000\u0000"+
		"\u0346\u0345\u0001\u0000\u0000\u0000\u0347\u0351\u0001\u0000\u0000\u0000"+
		"\u0348\u0349\u0005\u0013\u0000\u0000\u0349\u034a\u0005\u02bb\u0000\u0000"+
		"\u034a\u034b\u0005\u0254\u0000\u0000\u034b\u034c\u0003\u0208\u0104\u0000"+
		"\u034c\u034d\u0005\u01d4\u0000\u0000\u034d\u034e\u0005\u0247\u0000\u0000"+
		"\u034e\u034f\u0003\u0208\u0104\u0000\u034f\u0351\u0001\u0000\u0000\u0000"+
		"\u0350\u032f\u0001\u0000\u0000\u0000\u0350\u0335\u0001\u0000\u0000\u0000"+
		"\u0350\u033d\u0001\u0000\u0000\u0000\u0350\u0348\u0001\u0000\u0000\u0000"+
		"\u0351\u0015\u0001\u0000\u0000\u0000\u0352\u0353\u0005\u0013\u0000\u0000"+
		"\u0353\u0354\u0005\u00d7\u0000\u0000\u0354\u0355\u0003\u0208\u0104\u0000"+
		"\u0355\u0358\u0005\u026a\u0000\u0000\u0356\u0357\u0005\u0247\u0000\u0000"+
		"\u0357\u0359\u0003\u0208\u0104\u0000\u0358\u0356\u0001\u0000\u0000\u0000"+
		"\u0358\u0359\u0001\u0000\u0000\u0000\u0359\u0362\u0001\u0000\u0000\u0000"+
		"\u035a\u035b\u0005\u0013\u0000\u0000\u035b\u035c\u0005\u00d7\u0000\u0000"+
		"\u035c\u035d\u0003\u0208\u0104\u0000\u035d\u035e\u0005\u0207\u0000\u0000"+
		"\u035e\u035f\u0005\u01f3\u0000\u0000\u035f\u0360\u0003\u0208\u0104\u0000"+
		"\u0360\u0362\u0001\u0000\u0000\u0000\u0361\u0352\u0001\u0000\u0000\u0000"+
		"\u0361\u035a\u0001\u0000\u0000\u0000\u0362\u0017\u0001\u0000\u0000\u0000"+
		"\u0363\u0364\u0003\u020c\u0106\u0000\u0364\u0019\u0001\u0000\u0000\u0000"+
		"\u0365\u0367\u0005\u000b\u0000\u0000\u0366\u0368\u0005^\u0000\u0000\u0367"+
		"\u0366\u0001\u0000\u0000\u0000\u0367\u0368\u0001\u0000\u0000\u0000\u0368"+
		"\u0369\u0001\u0000\u0000\u0000\u0369\u036a\u0003\u0210\u0108\u0000\u036a"+
		"\u036d\u0003\u01dc\u00ee\u0000\u036b\u036c\u0005X\u0000\u0000\u036c\u036e"+
		"\u0003\u0208\u0104\u0000\u036d\u036b\u0001\u0000\u0000\u0000\u036d\u036e"+
		"\u0001\u0000\u0000\u0000\u036e\u0370\u0001\u0000\u0000\u0000\u036f\u0371"+
		"\u0003\u01f6\u00fb\u0000\u0370\u036f\u0001\u0000\u0000\u0000\u0370\u0371"+
		"\u0001\u0000\u0000\u0000\u0371\u0412\u0001\u0000\u0000\u0000\u0372\u0374"+
		"\u0005\u00bc\u0000\u0000\u0373\u0375\u0005^\u0000\u0000\u0374\u0373\u0001"+
		"\u0000\u0000\u0000\u0374\u0375\u0001\u0000\u0000\u0000\u0375\u0378\u0001"+
		"\u0000\u0000\u0000\u0376\u0377\u0005\u02b3\u0000\u0000\u0377\u0379\u0005"+
		"\u00d3\u0000\u0000\u0378\u0376\u0001\u0000\u0000\u0000\u0378\u0379\u0001"+
		"\u0000\u0000\u0000\u0379\u037a\u0001\u0000\u0000\u0000\u037a\u037c\u0003"+
		"\u0210\u0108\u0000\u037b\u037d\u0007\u0001\u0000\u0000\u037c\u037b\u0001"+
		"\u0000\u0000\u0000\u037c\u037d\u0001\u0000\u0000\u0000\u037d\u0412\u0001"+
		"\u0000\u0000\u0000\u037e\u0380\u0005\u0013\u0000\u0000\u037f\u0381\u0005"+
		"^\u0000\u0000\u0380\u037f\u0001\u0000\u0000\u0000\u0380\u0381\u0001\u0000"+
		"\u0000\u0000\u0381\u0382\u0001\u0000\u0000\u0000\u0382\u0385\u0003\u0210"+
		"\u0108\u0000\u0383\u0384\u0005\u0207\u0000\u0000\u0384\u0386\u0005\u0091"+
		"\u0000\u0000\u0385\u0383\u0001\u0000\u0000\u0000\u0385\u0386\u0001\u0000"+
		"\u0000\u0000\u0386\u0387\u0001\u0000\u0000\u0000\u0387\u0388\u0005\u025c"+
		"\u0000\u0000\u0388\u038b\u0003\u01dc\u00ee\u0000\u0389\u038a\u0005X\u0000"+
		"\u0000\u038a\u038c\u0003\u0208\u0104\u0000\u038b\u0389\u0001\u0000\u0000"+
		"\u0000\u038b\u038c\u0001\u0000\u0000\u0000\u038c\u0412\u0001\u0000\u0000"+
		"\u0000\u038d\u038f\u0005\u0013\u0000\u0000\u038e\u0390\u0005^\u0000\u0000"+
		"\u038f\u038e\u0001\u0000\u0000\u0000\u038f\u0390\u0001\u0000\u0000\u0000"+
		"\u0390\u0391\u0001\u0000\u0000\u0000\u0391\u0392\u0003\u0210\u0108\u0000"+
		"\u0392\u0393\u0005\u0207\u0000\u0000\u0393\u0394\u0005\u009b\u0000\u0000"+
		"\u0394\u0395\u0003\u01b0\u00d8\u0000\u0395\u0412\u0001\u0000\u0000\u0000"+
		"\u0396\u0398\u0005\u0013\u0000\u0000\u0397\u0399\u0005^\u0000\u0000\u0398"+
		"\u0397\u0001\u0000\u0000\u0000\u0398\u0399\u0001\u0000\u0000\u0000\u0399"+
		"\u039a\u0001\u0000\u0000\u0000\u039a\u039b\u0003\u0210\u0108\u0000\u039b"+
		"\u039c\u0005\u00bc\u0000\u0000\u039c\u039d\u0005\u009b\u0000\u0000\u039d"+
		"\u0412\u0001\u0000\u0000\u0000\u039e\u03a0\u0005\u0013\u0000\u0000\u039f"+
		"\u03a1\u0005^\u0000\u0000\u03a0\u039f\u0001\u0000\u0000\u0000\u03a0\u03a1"+
		"\u0001\u0000\u0000\u0000\u03a1\u03a2\u0001\u0000\u0000\u0000\u03a2\u03a3"+
		"\u0003\u0210\u0108\u0000\u03a3\u03a4\u0007\u0000\u0000\u0000\u03a4\u03a5"+
		"\u0005\u016d\u0000\u0000\u03a5\u03a6\u0005\u0172\u0000\u0000\u03a6\u0412"+
		"\u0001\u0000\u0000\u0000\u03a7\u03a9\u0005\u0013\u0000\u0000\u03a8\u03aa"+
		"\u0005^\u0000\u0000\u03a9\u03a8\u0001\u0000\u0000\u0000\u03a9\u03aa\u0001"+
		"\u0000\u0000\u0000\u03aa\u03ab\u0001\u0000\u0000\u0000\u03ab\u03ac\u0003"+
		"\u0210\u0108\u0000\u03ac\u03ad\u0005\u0207\u0000\u0000\u03ad\u03ae\u0005"+
		"\u0224\u0000\u0000\u03ae\u03af\u0005\u011b\u0000\u0000\u03af\u0412\u0001"+
		"\u0000\u0000\u0000\u03b0\u03b2\u0005\u0013\u0000\u0000\u03b1\u03b3\u0005"+
		"^\u0000\u0000\u03b2\u03b1\u0001\u0000\u0000\u0000\u03b2\u03b3\u0001\u0000"+
		"\u0000\u0000\u03b3\u03b4\u0001\u0000\u0000\u0000\u03b4\u03b5\u0003\u0210"+
		"\u0108\u0000\u03b5\u03b6\u0005\u0207\u0000\u0000\u03b6\u03b7\u0005\u02ff"+
		"\u0000\u0000\u03b7\u03b8\u0003\u01d8\u00ec\u0000\u03b8\u03b9\u0005\u0300"+
		"\u0000\u0000\u03b9\u0412\u0001\u0000\u0000\u0000\u03ba\u03bc\u0005\u0013"+
		"\u0000\u0000\u03bb\u03bd\u0005^\u0000\u0000\u03bc\u03bb\u0001\u0000\u0000"+
		"\u0000\u03bc\u03bd\u0001\u0000\u0000\u0000\u03bd\u03be\u0001\u0000\u0000"+
		"\u0000\u03be\u03bf\u0003\u0210\u0108\u0000\u03bf\u03c0\u0005\u01d8\u0000"+
		"\u0000\u03c0\u03c1\u0005\u02ff\u0000\u0000\u03c1\u03c2\u0003\u01d4\u00ea"+
		"\u0000\u03c2\u03c3\u0005\u0300\u0000\u0000\u03c3\u0412\u0001\u0000\u0000"+
		"\u0000\u03c4\u03c6\u0005\u0013\u0000\u0000\u03c5\u03c7\u0005^\u0000\u0000"+
		"\u03c6\u03c5\u0001\u0000\u0000\u0000\u03c6\u03c7\u0001\u0000\u0000\u0000"+
		"\u03c7\u03c8\u0001\u0000\u0000\u0000\u03c8\u03c9\u0003\u0210\u0108\u0000"+
		"\u03c9\u03ca\u0005\u0207\u0000\u0000\u03ca\u03cb\u0005\u0229\u0000\u0000"+
		"\u03cb\u03cc\u0007\u0003\u0000\u0000\u03cc\u0412\u0001\u0000\u0000\u0000"+
		"\u03cd\u03cf\u0005\u0013\u0000\u0000\u03ce\u03d0\u0005^\u0000\u0000\u03cf"+
		"\u03ce\u0001\u0000\u0000\u0000\u03cf\u03d0\u0001\u0000\u0000\u0000\u03d0"+
		"\u03d1\u0001\u0000\u0000\u0000\u03d1\u03d2\u0003\u0210\u0108\u0000\u03d2"+
		"\u03d4\u0005\u0186\u0000\u0000\u03d3\u03d5\u0007\u0004\u0000\u0000\u03d4"+
		"\u03d3\u0001\u0000\u0000\u0000\u03d4\u03d5\u0001\u0000\u0000\u0000\u03d5"+
		"\u0412\u0001\u0000\u0000\u0000\u03d6\u03d7\u0005\u000b\u0000\u0000\u03d7"+
		"\u03da\u0003\u01fc\u00fe\u0000\u03d8\u03d9\u0005\u016d\u0000\u0000\u03d9"+
		"\u03db\u0005\u0274\u0000\u0000\u03da\u03d8\u0001\u0000\u0000\u0000\u03da"+
		"\u03db\u0001\u0000\u0000\u0000\u03db\u0412\u0001\u0000\u0000\u0000\u03dc"+
		"\u03dd\u0005\u0275\u0000\u0000\u03dd\u03de\u0005m\u0000\u0000\u03de\u0412"+
		"\u0003\u020a\u0105\u0000\u03df\u03e0\u0005\u00bc\u0000\u0000\u03e0\u03e3"+
		"\u0005m\u0000\u0000\u03e1\u03e2\u0005\u02b3\u0000\u0000\u03e2\u03e4\u0005"+
		"\u00d3\u0000\u0000\u03e3\u03e1\u0001\u0000\u0000\u0000\u03e3\u03e4\u0001"+
		"\u0000\u0000\u0000\u03e4\u03e5\u0001\u0000\u0000\u0000\u03e5\u03e7\u0003"+
		"\u020a\u0105\u0000\u03e6\u03e8\u0007\u0001\u0000\u0000\u03e7\u03e6\u0001"+
		"\u0000\u0000\u0000\u03e7\u03e8\u0001\u0000\u0000\u0000\u03e8\u0412\u0001"+
		"\u0000\u0000\u0000\u03e9\u03ea\u0005\u00b3\u0000\u0000\u03ea\u03ee\u0005"+
		"\u0254\u0000\u0000\u03eb\u03ef\u0003\u020a\u0105\u0000\u03ec\u03ef\u0005"+
		"\u0010\u0000\u0000\u03ed\u03ef\u0005\u026d\u0000\u0000\u03ee\u03eb\u0001"+
		"\u0000\u0000\u0000\u03ee\u03ec\u0001\u0000\u0000\u0000\u03ee\u03ed\u0001"+
		"\u0000\u0000\u0000\u03ee\u03ef\u0001\u0000\u0000\u0000\u03ef\u0412\u0001"+
		"\u0000\u0000\u0000\u03f0\u03f1\u0005\u00c3\u0000\u0000\u03f1\u03f5\u0005"+
		"\u0254\u0000\u0000\u03f2\u03f6\u0003\u020a\u0105\u0000\u03f3\u03f6\u0005"+
		"\u0010\u0000\u0000\u03f4\u03f6\u0005\u026d\u0000\u0000\u03f5\u03f2\u0001"+
		"\u0000\u0000\u0000\u03f5\u03f3\u0001\u0000\u0000\u0000\u03f5\u03f4\u0001"+
		"\u0000\u0000\u0000\u03f5\u03f6\u0001\u0000\u0000\u0000\u03f6\u0412\u0001"+
		"\u0000\u0000\u0000\u03f7\u03f8\u0005\u00c3\u0000\u0000\u03f8\u03f9\u0005"+
		"\u01d7\u0000\u0000\u03f9\u03fa\u0005\u0254\u0000\u0000\u03fa\u0412\u0003"+
		"\u020a\u0105\u0000\u03fb\u03fc\u0005\u00c3\u0000\u0000\u03fc\u03fd\u0005"+
		"\u0014\u0000\u0000\u03fd\u03fe\u0005\u0254\u0000\u0000\u03fe\u0412\u0003"+
		"\u020a\u0105\u0000\u03ff\u0400\u0005\u0207\u0000\u0000\u0400\u0401\u0005"+
		"\u0287\u0000\u0000\u0401\u0412\u0005\u017e\u0000\u0000\u0402\u0403\u0005"+
		"\u0207\u0000\u0000\u0403\u0404\u0005\u0289\u0000\u0000\u0404\u0412\u0005"+
		"\u017e\u0000\u0000\u0405\u0406\u0005\u0294\u0000\u0000\u0406\u0412\u0003"+
		"\u0208\u0104\u0000\u0407\u0408\u0005\u0167\u0000\u0000\u0408\u0409\u0005"+
		"\u0294\u0000\u0000\u0409\u0412\u0003\u0208\u0104\u0000\u040a\u040b\u0005"+
		"\u0193\u0000\u0000\u040b\u040c\u0005\u0247\u0000\u0000\u040c\u0412\u0003"+
		"\u01fe\u00ff\u0000\u040d\u040f\u0005\u0186\u0000\u0000\u040e\u0410\u0007"+
		"\u0004\u0000\u0000\u040f\u040e\u0001\u0000\u0000\u0000\u040f\u0410\u0001"+
		"\u0000\u0000\u0000\u0410\u0412\u0001\u0000\u0000\u0000\u0411\u0365\u0001"+
		"\u0000\u0000\u0000\u0411\u0372\u0001\u0000\u0000\u0000\u0411\u037e\u0001"+
		"\u0000\u0000\u0000\u0411\u038d\u0001\u0000\u0000\u0000\u0411\u0396\u0001"+
		"\u0000\u0000\u0000\u0411\u039e\u0001\u0000\u0000\u0000\u0411\u03a7\u0001"+
		"\u0000\u0000\u0000\u0411\u03b0\u0001\u0000\u0000\u0000\u0411\u03ba\u0001"+
		"\u0000\u0000\u0000\u0411\u03c4\u0001\u0000\u0000\u0000\u0411\u03cd\u0001"+
		"\u0000\u0000\u0000\u0411\u03d6\u0001\u0000\u0000\u0000\u0411\u03dc\u0001"+
		"\u0000\u0000\u0000\u0411\u03df\u0001\u0000\u0000\u0000\u0411\u03e9\u0001"+
		"\u0000\u0000\u0000\u0411\u03f0\u0001\u0000\u0000\u0000\u0411\u03f7\u0001"+
		"\u0000\u0000\u0000\u0411\u03fb\u0001\u0000\u0000\u0000\u0411\u03ff\u0001"+
		"\u0000\u0000\u0000\u0411\u0402\u0001\u0000\u0000\u0000\u0411\u0405\u0001"+
		"\u0000\u0000\u0000\u0411\u0407\u0001\u0000\u0000\u0000\u0411\u040a\u0001"+
		"\u0000\u0000\u0000\u0411\u040d\u0001\u0000\u0000\u0000\u0412\u001b\u0001"+
		"\u0000\u0000\u0000\u0413\u0418\u0003\u001a\r\u0000\u0414\u0415\u0005\u02f9"+
		"\u0000\u0000\u0415\u0417\u0003\u001a\r\u0000\u0416\u0414\u0001\u0000\u0000"+
		"\u0000\u0417\u041a\u0001\u0000\u0000\u0000\u0418\u0416\u0001\u0000\u0000"+
		"\u0000\u0418\u0419\u0001\u0000\u0000\u0000\u0419\u001d\u0001\u0000\u0000"+
		"\u0000\u041a\u0418\u0001\u0000\u0000\u0000\u041b\u041c\u0005\u0013\u0000"+
		"\u0000\u041c\u041d\u0005\u00e5\u0000\u0000\u041d\u0420\u0005\u0237\u0000"+
		"\u0000\u041e\u041f\u0005\u02b3\u0000\u0000\u041f\u0421\u0005\u00d3\u0000"+
		"\u0000\u0420\u041e\u0001\u0000\u0000\u0000\u0420\u0421\u0001\u0000\u0000"+
		"\u0000\u0421\u0423\u0001\u0000\u0000\u0000\u0422\u0424\u0005\u0181\u0000"+
		"\u0000\u0423\u0422\u0001\u0000\u0000\u0000\u0423\u0424\u0001\u0000\u0000"+
		"\u0000\u0424\u0425\u0001\u0000\u0000\u0000\u0425\u0427\u0003\u0208\u0104"+
		"\u0000\u0426\u0428\u0005\u02fe\u0000\u0000\u0427\u0426\u0001\u0000\u0000"+
		"\u0000\u0427\u0428\u0001\u0000\u0000\u0000\u0428\u0429\u0001\u0000\u0000"+
		"\u0000\u0429\u042a\u0003\u001c\u000e\u0000\u042a\u045a\u0001\u0000\u0000"+
		"\u0000\u042b\u042c\u0005\u0013\u0000\u0000\u042c\u042d\u0005\u00e5\u0000"+
		"\u0000\u042d\u0430\u0005\u0237\u0000\u0000\u042e\u042f\u0005\u02b3\u0000"+
		"\u0000\u042f\u0431\u0005\u00d3\u0000\u0000\u0430\u042e\u0001\u0000\u0000"+
		"\u0000\u0430\u0431\u0001\u0000\u0000\u0000\u0431\u0433\u0001\u0000\u0000"+
		"\u0000\u0432\u0434\u0005\u0181\u0000\u0000\u0433\u0432\u0001\u0000\u0000"+
		"\u0000\u0433\u0434\u0001\u0000\u0000\u0000\u0434\u0435\u0001\u0000\u0000"+
		"\u0000\u0435\u0437\u0003\u0208\u0104\u0000\u0436\u0438\u0005\u02fe\u0000"+
		"\u0000\u0437\u0436\u0001\u0000\u0000\u0000\u0437\u0438\u0001\u0000\u0000"+
		"\u0000\u0438\u0439\u0001\u0000\u0000\u0000\u0439\u043b\u0005\u01d4\u0000"+
		"\u0000\u043a\u043c\u0005^\u0000\u0000\u043b\u043a\u0001\u0000\u0000\u0000"+
		"\u043b\u043c\u0001\u0000\u0000\u0000\u043c\u043d\u0001\u0000\u0000\u0000"+
		"\u043d\u043e\u0003\u0210\u0108\u0000\u043e\u043f\u0005\u0247\u0000\u0000"+
		"\u043f\u0440\u0003\u0208\u0104\u0000\u0440\u045a\u0001\u0000\u0000\u0000"+
		"\u0441\u0442\u0005\u0013\u0000\u0000\u0442\u0443\u0005\u00e5\u0000\u0000"+
		"\u0443\u0446\u0005\u0237\u0000\u0000\u0444\u0445\u0005\u02b3\u0000\u0000"+
		"\u0445\u0447\u0005\u00d3\u0000\u0000\u0446\u0444\u0001\u0000\u0000\u0000"+
		"\u0446\u0447\u0001\u0000\u0000\u0000\u0447\u0448\u0001\u0000\u0000\u0000"+
		"\u0448\u0449\u0003\u0208\u0104\u0000\u0449\u044a\u0005\u01d4\u0000\u0000"+
		"\u044a\u044b\u0005\u0247\u0000\u0000\u044b\u044c\u0003\u0208\u0104\u0000"+
		"\u044c\u045a\u0001\u0000\u0000\u0000\u044d\u044e\u0005\u0013\u0000\u0000"+
		"\u044e\u044f\u0005\u00e5\u0000\u0000\u044f\u0452\u0005\u0237\u0000\u0000"+
		"\u0450\u0451\u0005\u02b3\u0000\u0000\u0451\u0453\u0005\u00d3\u0000\u0000"+
		"\u0452\u0450\u0001\u0000\u0000\u0000\u0452\u0453\u0001\u0000\u0000\u0000"+
		"\u0453\u0454\u0001\u0000\u0000\u0000\u0454\u0455\u0003\u0208\u0104\u0000"+
		"\u0455\u0456\u0005\u0207\u0000\u0000\u0456\u0457\u0005\u01f3\u0000\u0000"+
		"\u0457\u0458\u0003\u0208\u0104\u0000\u0458\u045a\u0001\u0000\u0000\u0000"+
		"\u0459\u041b\u0001\u0000\u0000\u0000\u0459\u042b\u0001\u0000\u0000\u0000"+
		"\u0459\u0441\u0001\u0000\u0000\u0000\u0459\u044d\u0001\u0000\u0000\u0000"+
		"\u045a\u001f\u0001\u0000\u0000\u0000\u045b\u045c\u0003\u020c\u0106\u0000"+
		"\u045c!\u0001\u0000\u0000\u0000\u045d\u045e\u0005\u0013\u0000\u0000\u045e"+
		"\u045f\u0005\u00fa\u0000\u0000\u045f\u0460\u0003\u01fe\u00ff\u0000\u0460"+
		"\u0461\u0005\u000b\u0000\u0000\u0461\u0462\u0005\u026d\u0000\u0000\u0462"+
		"\u0463\u0003\u01d4\u00ea\u0000\u0463\u0473\u0001\u0000\u0000\u0000\u0464"+
		"\u0465\u0005\u0013\u0000\u0000\u0465\u0466\u0005\u00fa\u0000\u0000\u0466"+
		"\u0467\u0003\u01fe\u00ff\u0000\u0467\u0468\u0005\u00bc\u0000\u0000\u0468"+
		"\u0469\u0005\u026d\u0000\u0000\u0469\u046a\u0003\u01d4\u00ea\u0000\u046a"+
		"\u0473\u0001\u0000\u0000\u0000\u046b\u046c\u0005\u0013\u0000\u0000\u046c"+
		"\u046d\u0005\u00fa\u0000\u0000\u046d\u046e\u0003\u0208\u0104\u0000\u046e"+
		"\u046f\u0005\u01d4\u0000\u0000\u046f\u0470\u0005\u0247\u0000\u0000\u0470"+
		"\u0471\u0003\u0208\u0104\u0000\u0471\u0473\u0001\u0000\u0000\u0000\u0472"+
		"\u045d\u0001\u0000\u0000\u0000\u0472\u0464\u0001\u0000\u0000\u0000\u0472"+
		"\u046b\u0001\u0000\u0000\u0000\u0473#\u0001\u0000\u0000\u0000\u0474\u0475"+
		"\u0005\u0013\u0000\u0000\u0475\u0478\u0005\u010c\u0000\u0000\u0476\u0477"+
		"\u0005\u02b3\u0000\u0000\u0477\u0479\u0005\u00d3\u0000\u0000\u0478\u0476"+
		"\u0001\u0000\u0000\u0000\u0478\u0479\u0001\u0000\u0000\u0000\u0479\u047a"+
		"\u0001\u0000\u0000\u0000\u047a\u047b\u0003\u0208\u0104\u0000\u047b\u047c"+
		"\u0005\u01d4\u0000\u0000\u047c\u047d\u0005\u0247\u0000\u0000\u047d\u047e"+
		"\u0003\u0208\u0104\u0000\u047e\u04bb\u0001\u0000\u0000\u0000\u047f\u0480"+
		"\u0005\u0013\u0000\u0000\u0480\u0483\u0005\u010c\u0000\u0000\u0481\u0482"+
		"\u0005\u02b3\u0000\u0000\u0482\u0484\u0005\u00d3\u0000\u0000\u0483\u0481"+
		"\u0001\u0000\u0000\u0000\u0483\u0484\u0001\u0000\u0000\u0000\u0484\u0485"+
		"\u0001\u0000\u0000\u0000\u0485\u0486\u0003\u0208\u0104\u0000\u0486\u0487"+
		"\u0005\u0207\u0000\u0000\u0487\u0488\u0005\u023a\u0000\u0000\u0488\u0489"+
		"\u0003\u0208\u0104\u0000\u0489\u04bb\u0001\u0000\u0000\u0000\u048a\u048b"+
		"\u0005\u0013\u0000\u0000\u048b\u048c\u0005\u010c\u0000\u0000\u048c\u048d"+
		"\u0003\u0208\u0104\u0000\u048d\u048e\u0005\u00a7\u0000\u0000\u048e\u048f"+
		"\u0005\u0180\u0000\u0000\u048f\u0490\u0005\u00d7\u0000\u0000\u0490\u0491"+
		"\u0003\u0208\u0104\u0000\u0491\u04bb\u0001\u0000\u0000\u0000\u0492\u0493"+
		"\u0005\u0013\u0000\u0000\u0493\u0496\u0005\u010c\u0000\u0000\u0494\u0495"+
		"\u0005\u02b3\u0000\u0000\u0495\u0497\u0005\u00d3\u0000\u0000\u0496\u0494"+
		"\u0001\u0000\u0000\u0000\u0496\u0497\u0001\u0000\u0000\u0000\u0497\u0498"+
		"\u0001\u0000\u0000\u0000\u0498\u0499\u0003\u0208\u0104\u0000\u0499\u049a"+
		"\u0005\u0207\u0000\u0000\u049a\u049b\u0005\u02ff\u0000\u0000\u049b\u049c"+
		"\u0003\u01d8\u00ec\u0000\u049c\u049d\u0005\u0300\u0000\u0000\u049d\u04bb"+
		"\u0001\u0000\u0000\u0000\u049e\u049f\u0005\u0013\u0000\u0000\u049f\u04a2"+
		"\u0005\u010c\u0000\u0000\u04a0\u04a1\u0005\u02b3\u0000\u0000\u04a1\u04a3"+
		"\u0005\u00d3\u0000\u0000\u04a2\u04a0\u0001\u0000\u0000\u0000\u04a2\u04a3"+
		"\u0001\u0000\u0000\u0000\u04a3\u04a4\u0001\u0000\u0000\u0000\u04a4\u04a5"+
		"\u0005\u01d8\u0000\u0000\u04a5\u04a6\u0005\u02ff\u0000\u0000\u04a6\u04a7"+
		"\u0003\u01d4\u00ea\u0000\u04a7\u04a8\u0005\u0300\u0000\u0000\u04a8\u04bb"+
		"\u0001\u0000\u0000\u0000\u04a9\u04aa\u0005\u0013\u0000\u0000\u04aa\u04ab"+
		"\u0005\u010c\u0000\u0000\u04ab\u04ac\u0005\u0010\u0000\u0000\u04ac\u04ad"+
		"\u0005\u0109\u0000\u0000\u04ad\u04ae\u0005\u023a\u0000\u0000\u04ae\u04b2"+
		"\u0003\u0208\u0104\u0000\u04af\u04b0\u0005\u02cf\u0000\u0000\u04b0\u04b1"+
		"\u00056\u0000\u0000\u04b1\u04b3\u0003\u01d4\u00ea\u0000\u04b2\u04af\u0001"+
		"\u0000\u0000\u0000\u04b2\u04b3\u0001\u0000\u0000\u0000\u04b3\u04b4\u0001"+
		"\u0000\u0000\u0000\u04b4\u04b5\u0005\u0207\u0000\u0000\u04b5\u04b6\u0005"+
		"\u023a\u0000\u0000\u04b6\u04b8\u0003\u0208\u0104\u0000\u04b7\u04b9\u0005"+
		"\u0171\u0000\u0000\u04b8\u04b7\u0001\u0000\u0000\u0000\u04b8\u04b9\u0001"+
		"\u0000\u0000\u0000\u04b9\u04bb\u0001\u0000\u0000\u0000\u04ba\u0474\u0001"+
		"\u0000\u0000\u0000\u04ba\u047f\u0001\u0000\u0000\u0000\u04ba\u048a\u0001"+
		"\u0000\u0000\u0000\u04ba\u0492\u0001\u0000\u0000\u0000\u04ba\u049e\u0001"+
		"\u0000\u0000\u0000\u04ba\u04a9\u0001\u0000\u0000\u0000\u04bb%\u0001\u0000"+
		"\u0000\u0000\u04bc\u04be\u0005\u0013\u0000\u0000\u04bd\u04bf\u0005\u01b7"+
		"\u0000\u0000\u04be\u04bd\u0001\u0000\u0000\u0000\u04be\u04bf\u0001\u0000"+
		"\u0000\u0000\u04bf\u04c0\u0001\u0000\u0000\u0000\u04c0\u04c1\u0005\u012b"+
		"\u0000\u0000\u04c1\u04c2\u0003\u0208\u0104\u0000\u04c2\u04c3\u0005\u01d4"+
		"\u0000\u0000\u04c3\u04c4\u0005\u0247\u0000\u0000\u04c4\u04c5\u0003\u0208"+
		"\u0104\u0000\u04c5\u04d4\u0001\u0000\u0000\u0000\u04c6\u04c8\u0005\u0013"+
		"\u0000\u0000\u04c7\u04c9\u0005\u01b7\u0000\u0000\u04c8\u04c7\u0001\u0000"+
		"\u0000\u0000\u04c8\u04c9\u0001\u0000\u0000\u0000\u04c9\u04ca\u0001\u0000"+
		"\u0000\u0000\u04ca\u04cb\u0005\u012b\u0000\u0000\u04cb\u04cc\u0003\u0208"+
		"\u0104\u0000\u04cc\u04cd\u0005\u0193\u0000\u0000\u04cd\u04d1\u0005\u0247"+
		"\u0000\u0000\u04ce\u04d2\u0003\u0208\u0104\u0000\u04cf\u04d2\u0005\u008d"+
		"\u0000\u0000\u04d0\u04d2\u0005\u0206\u0000\u0000\u04d1\u04ce\u0001\u0000"+
		"\u0000\u0000\u04d1\u04cf\u0001\u0000\u0000\u0000\u04d1\u04d0\u0001\u0000"+
		"\u0000\u0000\u04d2\u04d4\u0001\u0000\u0000\u0000\u04d3\u04bc\u0001\u0000"+
		"\u0000\u0000\u04d3\u04c6\u0001\u0000\u0000\u0000\u04d4\'\u0001\u0000\u0000"+
		"\u0000\u04d5\u04d6\u0005\u0013\u0000\u0000\u04d6\u04d7\u0005\u012c\u0000"+
		"\u0000\u04d7\u04d8\u0005\u0178\u0000\u0000\u04d8\u04d9\u0005\u0306\u0000"+
		"\u0000\u04d9\u04da\u0005\u0193\u0000\u0000\u04da\u04de\u0005\u0247\u0000"+
		"\u0000\u04db\u04df\u0003\u0208\u0104\u0000\u04dc\u04df\u0005\u008d\u0000"+
		"\u0000\u04dd\u04df\u0005\u0206\u0000\u0000\u04de\u04db\u0001\u0000\u0000"+
		"\u0000\u04de\u04dc\u0001\u0000\u0000\u0000\u04de\u04dd\u0001\u0000\u0000"+
		"\u0000\u04df)\u0001\u0000\u0000\u0000\u04e0\u04e1\u0003\u020c\u0106\u0000"+
		"\u04e1+\u0001\u0000\u0000\u0000\u04e2\u04e3\u0003\u020c\u0106\u0000\u04e3"+
		"-\u0001\u0000\u0000\u0000\u04e4\u04e5\u0005\u0013\u0000\u0000\u04e5\u04e6"+
		"\u0005\u0184\u0000\u0000\u04e6\u04e7\u0005Q\u0000\u0000\u04e7\u04e8\u0003"+
		"\u0208\u0104\u0000\u04e8\u04e9\u0005\u0272\u0000\u0000\u04e9\u04ea\u0003"+
		"\u01e0\u00f0\u0000\u04ea\u04eb\u0005\u01d4\u0000\u0000\u04eb\u04ec\u0005"+
		"\u0247\u0000\u0000\u04ec\u04ed\u0003\u0208\u0104\u0000\u04ed\u0506\u0001"+
		"\u0000\u0000\u0000\u04ee\u04ef\u0005\u0013\u0000\u0000\u04ef\u04f0\u0005"+
		"\u0184\u0000\u0000\u04f0\u04f1\u0005Q\u0000\u0000\u04f1\u04f2\u0003\u0208"+
		"\u0104\u0000\u04f2\u04f3\u0005\u0272\u0000\u0000\u04f3\u04f4\u0003\u01e0"+
		"\u00f0\u0000\u04f4\u04f5\u0005\u0193\u0000\u0000\u04f5\u04f9\u0005\u0247"+
		"\u0000\u0000\u04f6\u04fa\u0003\u0208\u0104\u0000\u04f7\u04fa\u0005\u008d"+
		"\u0000\u0000\u04f8\u04fa\u0005\u0206\u0000\u0000\u04f9\u04f6\u0001\u0000"+
		"\u0000\u0000\u04f9\u04f7\u0001\u0000\u0000\u0000\u04f9\u04f8\u0001\u0000"+
		"\u0000\u0000\u04fa\u0506\u0001\u0000\u0000\u0000\u04fb\u04fc\u0005\u0013"+
		"\u0000\u0000\u04fc\u04fd\u0005\u0184\u0000\u0000\u04fd\u04fe\u0005Q\u0000"+
		"\u0000\u04fe\u04ff\u0003\u0208\u0104\u0000\u04ff\u0500\u0005\u0272\u0000"+
		"\u0000\u0500\u0501\u0003\u01e0\u00f0\u0000\u0501\u0502\u0005\u0207\u0000"+
		"\u0000\u0502\u0503\u0005\u01f3\u0000\u0000\u0503\u0504\u0003\u0208\u0104"+
		"\u0000\u0504\u0506\u0001\u0000\u0000\u0000\u0505\u04e4\u0001\u0000\u0000"+
		"\u0000\u0505\u04ee\u0001\u0000\u0000\u0000\u0505\u04fb\u0001\u0000\u0000"+
		"\u0000\u0506/\u0001\u0000\u0000\u0000\u0507\u0508\u0003\u020c\u0106\u0000"+
		"\u05081\u0001\u0000\u0000\u0000\u0509\u050a\u0005\u0013\u0000\u0000\u050a"+
		"\u050b\u0005\u02ce\u0000\u0000\u050b\u050c\u0003\u0208\u0104\u0000\u050c"+
		"\u050d\u0005\u0180\u0000\u0000\u050d\u050e\u0003\u0208\u0104\u0000\u050e"+
		"\u050f\u0005\u01d4\u0000\u0000\u050f\u0510\u0005\u0247\u0000\u0000\u0510"+
		"\u0511\u0003\u0208\u0104\u0000\u0511\u0525\u0001\u0000\u0000\u0000\u0512"+
		"\u0513\u0005\u0013\u0000\u0000\u0513\u0514\u0005\u02ce\u0000\u0000\u0514"+
		"\u0515\u0003\u0208\u0104\u0000\u0515\u0516\u0005\u0180\u0000\u0000\u0516"+
		"\u0519\u0003\u0208\u0104\u0000\u0517\u0518\u0005\u0247\u0000\u0000\u0518"+
		"\u051a\u0003\u0200\u0100\u0000\u0519\u0517\u0001\u0000\u0000\u0000\u0519"+
		"\u051a\u0001\u0000\u0000\u0000\u051a\u051d\u0001\u0000\u0000\u0000\u051b"+
		"\u051c\u0005\u0272\u0000\u0000\u051c\u051e\u0003\u01f0\u00f8\u0000\u051d"+
		"\u051b\u0001\u0000\u0000\u0000\u051d\u051e\u0001\u0000\u0000\u0000\u051e"+
		"\u0522\u0001\u0000\u0000\u0000\u051f\u0520\u0005\u0287\u0000\u0000\u0520"+
		"\u0521\u0005N\u0000\u0000\u0521\u0523\u0003\u01f0\u00f8\u0000\u0522\u051f"+
		"\u0001\u0000\u0000\u0000\u0522\u0523\u0001\u0000\u0000\u0000\u0523\u0525"+
		"\u0001\u0000\u0000\u0000\u0524\u0509\u0001\u0000\u0000\u0000\u0524\u0512"+
		"\u0001\u0000\u0000\u0000\u05253\u0001\u0000\u0000\u0000\u0526\u0527\u0005"+
		"\u0013\u0000\u0000\u0527\u0528\u0005\u01ba\u0000\u0000\u0528\u0529\u0003"+
		"\u0208\u0104\u0000\u0529\u052a\u0005\u000b\u0000\u0000\u052a\u052c\u0005"+
		"\u0237\u0000\u0000\u052b\u052d\u0005\u0181\u0000\u0000\u052c\u052b\u0001"+
		"\u0000\u0000\u0000\u052c\u052d\u0001\u0000\u0000\u0000\u052d\u052e\u0001"+
		"\u0000\u0000\u0000\u052e\u052f\u0003\u01d4\u00ea\u0000\u052f\u055b\u0001"+
		"\u0000\u0000\u0000\u0530\u0531\u0005\u0013\u0000\u0000\u0531\u0532\u0005"+
		"\u01ba\u0000\u0000\u0532\u0533\u0003\u0208\u0104\u0000\u0533\u0534\u0005"+
		"\u0207\u0000\u0000\u0534\u0536\u0005\u0237\u0000\u0000\u0535\u0537\u0005"+
		"\u0181\u0000\u0000\u0536\u0535\u0001\u0000\u0000\u0000\u0536\u0537\u0001"+
		"\u0000\u0000\u0000\u0537\u0538\u0001\u0000\u0000\u0000\u0538\u0539\u0003"+
		"\u01d4\u00ea\u0000\u0539\u055b\u0001\u0000\u0000\u0000\u053a\u053b\u0005"+
		"\u0013\u0000\u0000\u053b\u053c\u0005\u01ba\u0000\u0000\u053c\u053d\u0003"+
		"\u0208\u0104\u0000\u053d\u053e\u0005\u00bc\u0000\u0000\u053e\u0540\u0005"+
		"\u0237\u0000\u0000\u053f\u0541\u0005\u0181\u0000\u0000\u0540\u053f\u0001"+
		"\u0000\u0000\u0000\u0540\u0541\u0001\u0000\u0000\u0000\u0541\u0542\u0001"+
		"\u0000\u0000\u0000\u0542\u0543\u0003\u01d4\u00ea\u0000\u0543\u055b\u0001"+
		"\u0000\u0000\u0000\u0544\u0545\u0005\u0013\u0000\u0000\u0545\u0546\u0005"+
		"\u01ba\u0000\u0000\u0546\u0547\u0003\u0208\u0104\u0000\u0547\u0548\u0005"+
		"\u0207\u0000\u0000\u0548\u0549\u0005\u02ff\u0000\u0000\u0549\u054a\u0003"+
		"\u01d8\u00ec\u0000\u054a\u054b\u0005\u0300\u0000\u0000\u054b\u055b\u0001"+
		"\u0000\u0000\u0000\u054c\u054d\u0005\u0013\u0000\u0000\u054d\u054e\u0005"+
		"\u01ba\u0000\u0000\u054e\u054f\u0003\u0208\u0104\u0000\u054f\u0550\u0005"+
		"\u0193\u0000\u0000\u0550\u0551\u0005\u0247\u0000\u0000\u0551\u0552\u0003"+
		"\u01fe\u00ff\u0000\u0552\u055b\u0001\u0000\u0000\u0000\u0553\u0554\u0005"+
		"\u0013\u0000\u0000\u0554\u0555\u0005\u01ba\u0000\u0000\u0555\u0556\u0003"+
		"\u0208\u0104\u0000\u0556\u0557\u0005\u01d4\u0000\u0000\u0557\u0558\u0005"+
		"\u0247\u0000\u0000\u0558\u0559\u0003\u01d0\u00e8\u0000\u0559\u055b\u0001"+
		"\u0000\u0000\u0000\u055a\u0526\u0001\u0000\u0000\u0000\u055a\u0530\u0001"+
		"\u0000\u0000\u0000\u055a\u053a\u0001\u0000\u0000\u0000\u055a\u0544\u0001"+
		"\u0000\u0000\u0000\u055a\u054c\u0001\u0000\u0000\u0000\u055a\u0553\u0001"+
		"\u0000\u0000\u0000\u055b5\u0001\u0000\u0000\u0000\u055c\u0576\u0005\u0290"+
		"\u0000\u0000\u055d\u0576\u0005\u0291\u0000\u0000\u055e\u0576\u0005\u007f"+
		"\u0000\u0000\u055f\u0576\u0005\u0168\u0000\u0000\u0560\u0576\u0005\u0292"+
		"\u0000\u0000\u0561\u0576\u0005\u0293\u0000\u0000\u0562\u0576\u0005\u0294"+
		"\u0000\u0000\u0563\u0576\u0005\u0295\u0000\u0000\u0564\u0576\u0005\u0296"+
		"\u0000\u0000\u0565\u0576\u0005\u0297\u0000\u0000\u0566\u0576\u0005\u0298"+
		"\u0000\u0000\u0567\u0576\u0005\u0299\u0000\u0000\u0568\u0576\u0005\u029a"+
		"\u0000\u0000\u0569\u0576\u0005\u029b\u0000\u0000\u056a\u056b\u0005k\u0000"+
		"\u0000\u056b\u056c\u0005\u0136\u0000\u0000\u056c\u0576\u0005\u011b\u0000"+
		"\u0000\u056d\u056f\u0005\u00c5\u0000\u0000\u056e\u056d\u0001\u0000\u0000"+
		"\u0000\u056e\u056f\u0001\u0000\u0000\u0000\u056f\u0570\u0001\u0000\u0000"+
		"\u0000\u0570\u0571\u0005\u01a1\u0000\u0000\u0571\u0576\u0005\u0309\u0000"+
		"\u0000\u0572\u0573\u0005\u0274\u0000\u0000\u0573\u0574\u0005\u0269\u0000"+
		"\u0000\u0574\u0576\u0005\u0309\u0000\u0000\u0575\u055c\u0001\u0000\u0000"+
		"\u0000\u0575\u055d\u0001\u0000\u0000\u0000\u0575\u055e\u0001\u0000\u0000"+
		"\u0000\u0575\u055f\u0001\u0000\u0000\u0000\u0575\u0560\u0001\u0000\u0000"+
		"\u0000\u0575\u0561\u0001\u0000\u0000\u0000\u0575\u0562\u0001\u0000\u0000"+
		"\u0000\u0575\u0563\u0001\u0000\u0000\u0000\u0575\u0564\u0001\u0000\u0000"+
		"\u0000\u0575\u0565\u0001\u0000\u0000\u0000\u0575\u0566\u0001\u0000\u0000"+
		"\u0000\u0575\u0567\u0001\u0000\u0000\u0000\u0575\u0568\u0001\u0000\u0000"+
		"\u0000\u0575\u0569\u0001\u0000\u0000\u0000\u0575\u056a\u0001\u0000\u0000"+
		"\u0000\u0575\u056e\u0001\u0000\u0000\u0000\u0575\u0572\u0001\u0000\u0000"+
		"\u0000\u05767\u0001\u0000\u0000\u0000\u0577\u0578\u0005\u0013\u0000\u0000"+
		"\u0578\u0579\u0005\u01e5\u0000\u0000\u0579\u057b\u0003\u01fe\u00ff\u0000"+
		"\u057a\u057c\u0005\u0287\u0000\u0000\u057b\u057a\u0001\u0000\u0000\u0000"+
		"\u057b\u057c\u0001\u0000\u0000\u0000\u057c\u057e\u0001\u0000\u0000\u0000"+
		"\u057d\u057f\u00036\u001b\u0000\u057e\u057d\u0001\u0000\u0000\u0000\u057f"+
		"\u0580\u0001\u0000\u0000\u0000\u0580\u057e\u0001\u0000\u0000\u0000\u0580"+
		"\u0581\u0001\u0000\u0000\u0000\u0581\u05c6\u0001\u0000\u0000\u0000\u0582"+
		"\u0583\u0005\u0013\u0000\u0000\u0583\u0584\u0005\u01e5\u0000\u0000\u0584"+
		"\u0585\u0003\u01d0\u00e8\u0000\u0585\u0586\u0005\u01d4\u0000\u0000\u0586"+
		"\u0587\u0005\u0247\u0000\u0000\u0587\u0588\u0003\u01d0\u00e8\u0000\u0588"+
		"\u05c6\u0001\u0000\u0000\u0000\u0589\u058a\u0005\u0013\u0000\u0000\u058a"+
		"\u058d\u0005\u01e5\u0000\u0000\u058b\u058e\u0003\u01fe\u00ff\u0000\u058c"+
		"\u058e\u0005\u0010\u0000\u0000\u058d\u058b\u0001\u0000\u0000\u0000\u058d"+
		"\u058c\u0001\u0000\u0000\u0000\u058e\u0592\u0001\u0000\u0000\u0000\u058f"+
		"\u0590\u0005\u0109\u0000\u0000\u0590\u0591\u0005\u0092\u0000\u0000\u0591"+
		"\u0593\u0003\u01d0\u00e8\u0000\u0592\u058f\u0001\u0000\u0000\u0000\u0592"+
		"\u0593\u0001\u0000\u0000\u0000\u0593\u0594\u0001\u0000\u0000\u0000\u0594"+
		"\u0595\u0005\u0207\u0000\u0000\u0595\u0596\u0003\u0208\u0104\u0000\u0596"+
		"\u0599\u0007\u0005\u0000\u0000\u0597\u059a\u0003\u0202\u0101\u0000\u0598"+
		"\u059a\u0005\u009b\u0000\u0000\u0599\u0597\u0001\u0000\u0000\u0000\u0599"+
		"\u0598\u0001\u0000\u0000\u0000\u059a\u05c6\u0001\u0000\u0000\u0000\u059b"+
		"\u059c\u0005\u0013\u0000\u0000\u059c\u059f\u0005\u01e5\u0000\u0000\u059d"+
		"\u05a0\u0003\u01fe\u00ff\u0000\u059e\u05a0\u0005\u0010\u0000\u0000\u059f"+
		"\u059d\u0001\u0000\u0000\u0000\u059f\u059e\u0001\u0000\u0000\u0000\u05a0"+
		"\u05a4\u0001\u0000\u0000\u0000\u05a1\u05a2\u0005\u0109\u0000\u0000\u05a2"+
		"\u05a3\u0005\u0092\u0000\u0000\u05a3\u05a5\u0003\u01d0\u00e8\u0000\u05a4"+
		"\u05a1\u0001\u0000\u0000\u0000\u05a4\u05a5\u0001\u0000\u0000\u0000\u05a5"+
		"\u05a6\u0001\u0000\u0000\u0000\u05a6\u05a7\u0005\u0207\u0000\u0000\u05a7"+
		"\u05a8\u0003\u0208\u0104\u0000\u05a8\u05a9\u0005\u00ec\u0000\u0000\u05a9"+
		"\u05aa\u0005\u0085\u0000\u0000\u05aa\u05c6\u0001\u0000\u0000\u0000\u05ab"+
		"\u05ac\u0005\u0013\u0000\u0000\u05ac\u05af\u0005\u01e5\u0000\u0000\u05ad"+
		"\u05b0\u0003\u01fe\u00ff\u0000\u05ae\u05b0\u0005\u0010\u0000\u0000\u05af"+
		"\u05ad\u0001\u0000\u0000\u0000\u05af\u05ae\u0001\u0000\u0000\u0000\u05b0"+
		"\u05b4\u0001\u0000\u0000\u0000\u05b1\u05b2\u0005\u0109\u0000\u0000\u05b2"+
		"\u05b3\u0005\u0092\u0000\u0000\u05b3\u05b5\u0003\u01d0\u00e8\u0000\u05b4"+
		"\u05b1\u0001\u0000\u0000\u0000\u05b4\u05b5\u0001\u0000\u0000\u0000\u05b5"+
		"\u05b6\u0001\u0000\u0000\u0000\u05b6\u05b7\u0005\u01d8\u0000\u0000\u05b7"+
		"\u05c6\u0003\u0208\u0104\u0000\u05b8\u05b9\u0005\u0013\u0000\u0000\u05b9"+
		"\u05bc\u0005\u01e5\u0000\u0000\u05ba\u05bd\u0003\u01fe\u00ff\u0000\u05bb"+
		"\u05bd\u0005\u0010\u0000\u0000\u05bc\u05ba\u0001\u0000\u0000\u0000\u05bc"+
		"\u05bb\u0001\u0000\u0000\u0000\u05bd\u05c1\u0001\u0000\u0000\u0000\u05be"+
		"\u05bf\u0005\u0109\u0000\u0000\u05bf\u05c0\u0005\u0092\u0000\u0000\u05c0"+
		"\u05c2\u0003\u01d0\u00e8\u0000\u05c1\u05be\u0001\u0000\u0000\u0000\u05c1"+
		"\u05c2\u0001\u0000\u0000\u0000\u05c2\u05c3\u0001\u0000\u0000\u0000\u05c3"+
		"\u05c4\u0005\u01d8\u0000\u0000\u05c4\u05c6\u0005\u0010\u0000\u0000\u05c5"+
		"\u0577\u0001\u0000\u0000\u0000\u05c5\u0582\u0001\u0000\u0000\u0000\u05c5"+
		"\u0589\u0001\u0000\u0000\u0000\u05c5\u059b\u0001\u0000\u0000\u0000\u05c5"+
		"\u05ab\u0001\u0000\u0000\u0000\u05c5\u05b8\u0001\u0000\u0000\u0000\u05c6"+
		"9\u0001\u0000\u0000\u0000\u05c7\u05c8\u0005\u0013\u0000\u0000\u05c8\u05c9"+
		"\u0005\u01f0\u0000\u0000\u05c9\u05ca\u0003\u01d0\u00e8\u0000\u05ca\u05cb"+
		"\u0005\u0180\u0000\u0000\u05cb\u05cc\u0003\u0208\u0104\u0000\u05cc\u05cd"+
		"\u0005\u01d4\u0000\u0000\u05cd\u05ce\u0005\u0247\u0000\u0000\u05ce\u05cf"+
		"\u0003\u01d0\u00e8\u0000\u05cf;\u0001\u0000\u0000\u0000\u05d0\u05d1\u0005"+
		"\u0013\u0000\u0000\u05d1\u05d2\u0005\u01f3\u0000\u0000\u05d2\u05d3\u0003"+
		"\u0208\u0104\u0000\u05d3\u05d4\u0005\u01d4\u0000\u0000\u05d4\u05d5\u0005"+
		"\u0247";
	private static final String _serializedATNSegment1 =
		"\u0000\u0000\u05d5\u05d6\u0003\u0208\u0104\u0000\u05d6\u05e2\u0001\u0000"+
		"\u0000\u0000\u05d7\u05d8\u0005\u0013\u0000\u0000\u05d8\u05d9\u0005\u01f3"+
		"\u0000\u0000\u05d9\u05da\u0003\u0208\u0104\u0000\u05da\u05db\u0005\u0193"+
		"\u0000\u0000\u05db\u05df\u0005\u0247\u0000\u0000\u05dc\u05e0\u0003\u0208"+
		"\u0104\u0000\u05dd\u05e0\u0005\u008d\u0000\u0000\u05de\u05e0\u0005\u0206"+
		"\u0000\u0000\u05df\u05dc\u0001\u0000\u0000\u0000\u05df\u05dd\u0001\u0000"+
		"\u0000\u0000\u05df\u05de\u0001\u0000\u0000\u0000\u05e0\u05e2\u0001\u0000"+
		"\u0000\u0000\u05e1\u05d0\u0001\u0000\u0000\u0000\u05e1\u05d7\u0001\u0000"+
		"\u0000\u0000\u05e2=\u0001\u0000\u0000\u0000\u05e3\u05e4\u0005\u0013\u0000"+
		"\u0000\u05e4\u05e7\u0005\u0201\u0000\u0000\u05e5\u05e6\u0005\u02b3\u0000"+
		"\u0000\u05e6\u05e8\u0005\u00d3\u0000\u0000\u05e7\u05e5\u0001\u0000\u0000"+
		"\u0000\u05e7\u05e8\u0001\u0000\u0000\u0000\u05e8\u05e9\u0001\u0000\u0000"+
		"\u0000\u05e9\u05ea\u0003\u01d0\u00e8\u0000\u05ea?\u0001\u0000\u0000\u0000"+
		"\u05eb\u05ed\u0007\u0004\u0000\u0000\u05ec\u05eb\u0001\u0000\u0000\u0000"+
		"\u05ec\u05ed\u0001\u0000\u0000\u0000\u05ed\u05ee\u0001\u0000\u0000\u0000"+
		"\u05ee\u05f0\u0003\u0208\u0104\u0000\u05ef\u05f1\u0003\u0202\u0101\u0000"+
		"\u05f0\u05ef\u0001\u0000\u0000\u0000\u05f0\u05f1\u0001\u0000\u0000\u0000"+
		"\u05f1\u05fc\u0001\u0000\u0000\u0000\u05f2\u05f4\u0005\u02f9\u0000\u0000"+
		"\u05f3\u05f5\u0007\u0004\u0000\u0000\u05f4\u05f3\u0001\u0000\u0000\u0000"+
		"\u05f4\u05f5\u0001\u0000\u0000\u0000\u05f5\u05f6\u0001\u0000\u0000\u0000"+
		"\u05f6\u05f8\u0003\u0208\u0104\u0000\u05f7\u05f9\u0003\u0202\u0101\u0000"+
		"\u05f8\u05f7\u0001\u0000\u0000\u0000\u05f8\u05f9\u0001\u0000\u0000\u0000"+
		"\u05f9\u05fb\u0001\u0000\u0000\u0000\u05fa\u05f2\u0001\u0000\u0000\u0000"+
		"\u05fb\u05fe\u0001\u0000\u0000\u0000\u05fc\u05fa\u0001\u0000\u0000\u0000"+
		"\u05fc\u05fd\u0001\u0000\u0000\u0000\u05fdA\u0001\u0000\u0000\u0000\u05fe"+
		"\u05fc\u0001\u0000\u0000\u0000\u05ff\u0600\u0005\u0013\u0000\u0000\u0600"+
		"\u0601\u0005\u02bd\u0000\u0000\u0601\u060d\u0003\u0208\u0104\u0000\u0602"+
		"\u0603\u0005\u02b8\u0000\u0000\u0603\u060e\u0005\u0309\u0000\u0000\u0604"+
		"\u0605\u0005\u02b8\u0000\u0000\u0605\u0607\u0005\u0309\u0000\u0000\u0606"+
		"\u0604\u0001\u0000\u0000\u0000\u0606\u0607\u0001\u0000\u0000\u0000\u0607"+
		"\u0608\u0001\u0000\u0000\u0000\u0608\u0609\u0005\u0186\u0000\u0000\u0609"+
		"\u060a\u0005\u02ff\u0000\u0000\u060a\u060b\u0003@ \u0000\u060b\u060c\u0005"+
		"\u0300\u0000\u0000\u060c\u060e\u0001\u0000\u0000\u0000\u060d\u0602\u0001"+
		"\u0000\u0000\u0000\u060d\u0606\u0001\u0000\u0000\u0000\u060e\u061e\u0001"+
		"\u0000\u0000\u0000\u060f\u0610\u0005\u0013\u0000\u0000\u0610\u0611\u0005"+
		"\u02bd\u0000\u0000\u0611\u0612\u0003\u0208\u0104\u0000\u0612\u0613\u0005"+
		"\u0193\u0000\u0000\u0613\u0614\u0005\u0247\u0000\u0000\u0614\u0615\u0003"+
		"\u01fe\u00ff\u0000\u0615\u061e\u0001\u0000\u0000\u0000\u0616\u0617\u0005"+
		"\u0013\u0000\u0000\u0617\u0618\u0005\u02bd\u0000\u0000\u0618\u0619\u0003"+
		"\u0208\u0104\u0000\u0619\u061a\u0005\u01d4\u0000\u0000\u061a\u061b\u0005"+
		"\u0247\u0000\u0000\u061b\u061c\u0003\u01d0\u00e8\u0000\u061c\u061e\u0001"+
		"\u0000\u0000\u0000\u061d\u05ff\u0001\u0000\u0000\u0000\u061d\u060f\u0001"+
		"\u0000\u0000\u0000\u061d\u0616\u0001\u0000\u0000\u0000\u061eC\u0001\u0000"+
		"\u0000\u0000\u061f\u0620\u0005\u0013\u0000\u0000\u0620\u0621\u0005\u0224"+
		"\u0000\u0000\u0621\u0622\u0003\u0208\u0104\u0000\u0622\u0623\u0005\u0193"+
		"\u0000\u0000\u0623\u0627\u0005\u0247\u0000\u0000\u0624\u0628\u0003\u0208"+
		"\u0104\u0000\u0625\u0628\u0005\u008d\u0000\u0000\u0626\u0628\u0005\u0206"+
		"\u0000\u0000\u0627\u0624\u0001\u0000\u0000\u0000\u0627\u0625\u0001\u0000"+
		"\u0000\u0000\u0627\u0626\u0001\u0000\u0000\u0000\u0628\u0638\u0001\u0000"+
		"\u0000\u0000\u0629\u062a\u0005\u0013\u0000\u0000\u062a\u062b\u0005\u0224"+
		"\u0000\u0000\u062b\u062c\u0003\u0208\u0104\u0000\u062c\u062d\u0005\u01d4"+
		"\u0000\u0000\u062d\u062e\u0005\u0247\u0000\u0000\u062e\u062f\u0003\u0208"+
		"\u0104\u0000\u062f\u0638\u0001\u0000\u0000\u0000\u0630\u0631\u0005\u0013"+
		"\u0000\u0000\u0631\u0632\u0005\u0224\u0000\u0000\u0632\u0633\u0003\u0208"+
		"\u0104\u0000\u0633\u0634\u0005\u0207\u0000\u0000\u0634\u0635\u0005\u01f3"+
		"\u0000\u0000\u0635\u0636\u0003\u0208\u0104\u0000\u0636\u0638\u0001\u0000"+
		"\u0000\u0000\u0637\u061f\u0001\u0000\u0000\u0000\u0637\u0629\u0001\u0000"+
		"\u0000\u0000\u0637\u0630\u0001\u0000\u0000\u0000\u0638E\u0001\u0000\u0000"+
		"\u0000\u0639\u063a\u0005\u0013\u0000\u0000\u063a\u063b\u0005\u0230\u0000"+
		"\u0000\u063b\u063c\u0003\u0208\u0104\u0000\u063c\u063d\u0005k\u0000\u0000"+
		"\u063d\u063e\u0003\u0202\u0101\u0000\u063e\u0679\u0001\u0000\u0000\u0000"+
		"\u063f\u0640\u0005\u0013\u0000\u0000\u0640\u0641\u0005\u0230\u0000\u0000"+
		"\u0641\u0642\u0003\u0208\u0104\u0000\u0642\u0643\u0005\u0207\u0000\u0000"+
		"\u0643\u0644\u0005\u01ba\u0000\u0000\u0644\u064a\u0003\u01d2\u00e9\u0000"+
		"\u0645\u0646\u0005\u0287\u0000\u0000\u0646\u0647\u0005\u02ff\u0000\u0000"+
		"\u0647\u0648\u0003\u01d8\u00ec\u0000\u0648\u0649\u0005\u0300\u0000\u0000"+
		"\u0649\u064b\u0001\u0000\u0000\u0000\u064a\u0645\u0001\u0000\u0000\u0000"+
		"\u064a\u064b\u0001\u0000\u0000\u0000\u064b\u0679\u0001\u0000\u0000\u0000"+
		"\u064c\u064d\u0005\u0013\u0000\u0000\u064d\u064e\u0005\u0230\u0000\u0000"+
		"\u064e\u064f\u0003\u0208\u0104\u0000\u064f\u0650\u0005\u01c7\u0000\u0000"+
		"\u0650\u0656\u0005\u01ba\u0000\u0000\u0651\u0652\u0005\u0287\u0000\u0000"+
		"\u0652\u0653\u0005\u02ff\u0000\u0000\u0653\u0654\u0003\u01d8\u00ec\u0000"+
		"\u0654\u0655\u0005\u0300\u0000\u0000\u0655\u0657\u0001\u0000\u0000\u0000"+
		"\u0656\u0651\u0001\u0000\u0000\u0000\u0656\u0657\u0001\u0000\u0000\u0000"+
		"\u0657\u0679\u0001\u0000\u0000\u0000\u0658\u0659\u0005\u0013\u0000\u0000"+
		"\u0659\u065a\u0005\u0230\u0000\u0000\u065a\u065b\u0003\u0208\u0104\u0000"+
		"\u065b\u065c\u0005\u00c3\u0000\u0000\u065c\u0679\u0001\u0000\u0000\u0000"+
		"\u065d\u065e\u0005\u0013\u0000\u0000\u065e\u065f\u0005\u0230\u0000\u0000"+
		"\u065f\u0660\u0003\u0208\u0104\u0000\u0660\u0661\u0005\u00b3\u0000\u0000"+
		"\u0661\u0679\u0001\u0000\u0000\u0000\u0662\u0663\u0005\u0013\u0000\u0000"+
		"\u0663\u0664\u0005\u0230\u0000\u0000\u0664\u0665\u0003\u0208\u0104\u0000"+
		"\u0665\u0666\u0005\u0207\u0000\u0000\u0666\u0667\u0005\u02ff\u0000\u0000"+
		"\u0667\u0668\u0003\u01d8\u00ec\u0000\u0668\u0669\u0005\u0300\u0000\u0000"+
		"\u0669\u0679\u0001\u0000\u0000\u0000\u066a\u066b\u0005\u0013\u0000\u0000"+
		"\u066b\u066c\u0005\u0230\u0000\u0000\u066c\u066d\u0003\u0208\u0104\u0000"+
		"\u066d\u066e\u0005\u0193\u0000\u0000\u066e\u066f\u0005\u0247\u0000\u0000"+
		"\u066f\u0670\u0003\u01fe\u00ff\u0000\u0670\u0679\u0001\u0000\u0000\u0000"+
		"\u0671\u0672\u0005\u0013\u0000\u0000\u0672\u0673\u0005\u0230\u0000\u0000"+
		"\u0673\u0674\u0003\u0208\u0104\u0000\u0674\u0675\u0005\u01d4\u0000\u0000"+
		"\u0675\u0676\u0005\u0247\u0000\u0000\u0676\u0677\u0003\u0208\u0104\u0000"+
		"\u0677\u0679\u0001\u0000\u0000\u0000\u0678\u0639\u0001\u0000\u0000\u0000"+
		"\u0678\u063f\u0001\u0000\u0000\u0000\u0678\u064c\u0001\u0000\u0000\u0000"+
		"\u0678\u0658\u0001\u0000\u0000\u0000\u0678\u065d\u0001\u0000\u0000\u0000"+
		"\u0678\u0662\u0001\u0000\u0000\u0000\u0678\u066a\u0001\u0000\u0000\u0000"+
		"\u0678\u0671\u0001\u0000\u0000\u0000\u0679G\u0001\u0000\u0000\u0000\u067a"+
		"\u067b\u0005\u0013\u0000\u0000\u067b\u067c\u0005\u0235\u0000\u0000\u067c"+
		"\u067d\u0005\u0207\u0000\u0000\u067d\u067e\u0005\u030b\u0000\u0000\u067e"+
		"\u067f\u0007\u0005\u0000\u0000\u067f\u0689\u0003\u0202\u0101\u0000\u0680"+
		"\u0681\u0005\u0013\u0000\u0000\u0681\u0682\u0005\u0235\u0000\u0000\u0682"+
		"\u0683\u0005\u01d8\u0000\u0000\u0683\u0689\u0005\u030b\u0000\u0000\u0684"+
		"\u0685\u0005\u0013\u0000\u0000\u0685\u0686\u0005\u0235\u0000\u0000\u0686"+
		"\u0687\u0005\u01d8\u0000\u0000\u0687\u0689\u0005\u0010\u0000\u0000\u0688"+
		"\u067a\u0001\u0000\u0000\u0000\u0688\u0680\u0001\u0000\u0000\u0000\u0688"+
		"\u0684\u0001\u0000\u0000\u0000\u0689I\u0001\u0000\u0000\u0000\u068a\u068b"+
		"\u0003\u020c\u0106\u0000\u068bK\u0001\u0000\u0000\u0000\u068c\u068d\u0005"+
		"\u0013\u0000\u0000\u068d\u068e\u0005\u023a\u0000\u0000\u068e\u068f\u0003"+
		"\u0208\u0104\u0000\u068f\u0690\u0005\u01d4\u0000\u0000\u0690\u0691\u0005"+
		"\u0247\u0000\u0000\u0691\u0692\u0003\u0208\u0104\u0000\u0692\u06ae\u0001"+
		"\u0000\u0000\u0000\u0693\u0694\u0005\u0013\u0000\u0000\u0694\u0695\u0005"+
		"\u023a\u0000\u0000\u0695\u0696\u0003\u0208\u0104\u0000\u0696\u0697\u0005"+
		"\u0193\u0000\u0000\u0697\u069b\u0005\u0247\u0000\u0000\u0698\u069c\u0003"+
		"\u0208\u0104\u0000\u0699\u069c\u0005\u008d\u0000\u0000\u069a\u069c\u0005"+
		"\u0206\u0000\u0000\u069b\u0698\u0001\u0000\u0000\u0000\u069b\u0699\u0001"+
		"\u0000\u0000\u0000\u069b\u069a\u0001\u0000\u0000\u0000\u069c\u06ae\u0001"+
		"\u0000\u0000\u0000\u069d\u069e\u0005\u0013\u0000\u0000\u069e\u069f\u0005"+
		"\u023a\u0000\u0000\u069f\u06a0\u0003\u0208\u0104\u0000\u06a0\u06a1\u0005"+
		"\u0207\u0000\u0000\u06a1\u06a2\u0005\u02ff\u0000\u0000\u06a2\u06a3\u0003"+
		"\u01d8\u00ec\u0000\u06a3\u06a4\u0005\u0300\u0000\u0000\u06a4\u06ae\u0001"+
		"\u0000\u0000\u0000\u06a5\u06a6\u0005\u0013\u0000\u0000\u06a6\u06a7\u0005"+
		"\u023a\u0000\u0000\u06a7\u06a8\u0003\u0208\u0104\u0000\u06a8\u06a9\u0005"+
		"\u01d8\u0000\u0000\u06a9\u06aa\u0005\u02ff\u0000\u0000\u06aa\u06ab\u0003"+
		"\u01d4\u00ea\u0000\u06ab\u06ac\u0005\u0300\u0000\u0000\u06ac\u06ae\u0001"+
		"\u0000\u0000\u0000\u06ad\u068c\u0001\u0000\u0000\u0000\u06ad\u0693\u0001"+
		"\u0000\u0000\u0000\u06ad\u069d\u0001\u0000\u0000\u0000\u06ad\u06a5\u0001"+
		"\u0000\u0000\u0000\u06aeM\u0001\u0000\u0000\u0000\u06af\u06b0\u0005\u0013"+
		"\u0000\u0000\u06b0\u06b1\u0005\u02f0\u0000\u0000\u06b1\u06b2\u0005\u01fa"+
		"\u0000\u0000\u06b2\u06b3\u0005h\u0000\u0000\u06b3\u06b4\u0003\u0208\u0104"+
		"\u0000\u06b4\u06b5\u0005\u000b\u0000\u0000\u06b5\u06b6\u0005\u0145\u0000"+
		"\u0000\u06b6\u06b7\u0005\u00e3\u0000\u0000\u06b7\u06b8\u0003\u01d4\u00ea"+
		"\u0000\u06b8\u06b9\u0005\u0287\u0000\u0000\u06b9\u06ba\u0003\u01d4\u00ea"+
		"\u0000\u06ba\u070b\u0001\u0000\u0000\u0000\u06bb\u06bc\u0005\u0013\u0000"+
		"\u0000\u06bc\u06bd\u0005\u02f0\u0000\u0000\u06bd\u06be\u0005\u01fa\u0000"+
		"\u0000\u06be\u06bf\u0005h\u0000\u0000\u06bf\u06c0\u0003\u0208\u0104\u0000"+
		"\u06c0\u06c1\u0005\u0013\u0000\u0000\u06c1\u06c2\u0005\u0145\u0000\u0000"+
		"\u06c2\u06c3\u0005\u00e3\u0000\u0000\u06c3\u06c4\u0003\u01d4\u00ea\u0000"+
		"\u06c4\u06c5\u0005\u0287\u0000\u0000\u06c5\u06c6\u0003\u01d4\u00ea\u0000"+
		"\u06c6\u070b\u0001\u0000\u0000\u0000\u06c7\u06c8\u0005\u0013\u0000\u0000"+
		"\u06c8\u06c9\u0005\u02f0\u0000\u0000\u06c9\u06ca\u0005\u01fa\u0000\u0000"+
		"\u06ca\u06cb\u0005h\u0000\u0000\u06cb\u06cc\u0003\u0208\u0104\u0000\u06cc"+
		"\u06cd\u0005\u0013\u0000\u0000\u06cd\u06ce\u0005\u0145\u0000\u0000\u06ce"+
		"\u06cf\u0005\u01d6\u0000\u0000\u06cf\u06d0\u0003\u0208\u0104\u0000\u06d0"+
		"\u06d1\u0005\u0287\u0000\u0000\u06d1\u06d2\u0003\u0208\u0104\u0000\u06d2"+
		"\u070b\u0001\u0000\u0000\u0000\u06d3\u06d4\u0005\u0013\u0000\u0000\u06d4"+
		"\u06d5\u0005\u02f0\u0000\u0000\u06d5\u06d6\u0005\u01fa\u0000\u0000\u06d6"+
		"\u06d7\u0005h\u0000\u0000\u06d7\u06d8\u0003\u0208\u0104\u0000\u06d8\u06d9"+
		"\u0005\u0013\u0000\u0000\u06d9\u06da\u0005\u0145\u0000\u0000\u06da\u06db"+
		"\u0005\u00e3\u0000\u0000\u06db\u06dc\u0003\u01d4\u00ea\u0000\u06dc\u06dd"+
		"\u0005\u01d6\u0000\u0000\u06dd\u06de\u0003\u0208\u0104\u0000\u06de\u06df"+
		"\u0005\u0287\u0000\u0000\u06df\u06e0\u0003\u0208\u0104\u0000\u06e0\u070b"+
		"\u0001\u0000\u0000\u0000\u06e1\u06e2\u0005\u0013\u0000\u0000\u06e2\u06e3"+
		"\u0005\u02f0\u0000\u0000\u06e3\u06e4\u0005\u01fa\u0000\u0000\u06e4\u06e5"+
		"\u0005h\u0000\u0000\u06e5\u06e6\u0003\u0208\u0104\u0000\u06e6\u06e7\u0005"+
		"\u00bc\u0000\u0000\u06e7\u06ea\u0005\u0145\u0000\u0000\u06e8\u06e9\u0005"+
		"\u02b3\u0000\u0000\u06e9\u06eb\u0005\u00d3\u0000\u0000\u06ea\u06e8\u0001"+
		"\u0000\u0000\u0000\u06ea\u06eb\u0001\u0000\u0000\u0000\u06eb\u06ec\u0001"+
		"\u0000\u0000\u0000\u06ec\u06ed\u0005\u00e3\u0000\u0000\u06ed\u06ee\u0003"+
		"\u01d4\u00ea\u0000\u06ee\u070b\u0001\u0000\u0000\u0000\u06ef\u06f0\u0005"+
		"\u0013\u0000\u0000\u06f0\u06f1\u0005\u02f0\u0000\u0000\u06f1\u06f2\u0005"+
		"\u01fa\u0000\u0000\u06f2\u06f3\u0005h\u0000\u0000\u06f3\u06f4\u0003\u0208"+
		"\u0104\u0000\u06f4\u06f5\u0005\u01d4\u0000\u0000\u06f5\u06f6\u0005\u0247"+
		"\u0000\u0000\u06f6\u06f7\u0003\u0208\u0104\u0000\u06f7\u070b\u0001\u0000"+
		"\u0000\u0000\u06f8\u06f9\u0005\u0013\u0000\u0000\u06f9\u06fa\u0005\u02f0"+
		"\u0000\u0000\u06fa\u06fb\u0005\u01fa\u0000\u0000\u06fb\u06fc\u0005h\u0000"+
		"\u0000\u06fc\u06fd\u0003\u0208\u0104\u0000\u06fd\u06fe\u0005\u0193\u0000"+
		"\u0000\u06fe\u06ff\u0005\u0247\u0000\u0000\u06ff\u0700\u0003\u01fe\u00ff"+
		"\u0000\u0700\u070b\u0001\u0000\u0000\u0000\u0701\u0702\u0005\u0013\u0000"+
		"\u0000\u0702\u0703\u0005\u02f0\u0000\u0000\u0703\u0704\u0005\u01fa\u0000"+
		"\u0000\u0704\u0705\u0005h\u0000\u0000\u0705\u0706\u0003\u0208\u0104\u0000"+
		"\u0706\u0707\u0005\u0207\u0000\u0000\u0707\u0708\u0005\u01f3\u0000\u0000"+
		"\u0708\u0709\u0003\u0208\u0104\u0000\u0709\u070b\u0001\u0000\u0000\u0000"+
		"\u070a\u06af\u0001\u0000\u0000\u0000\u070a\u06bb\u0001\u0000\u0000\u0000"+
		"\u070a\u06c7\u0001\u0000\u0000\u0000\u070a\u06d3\u0001\u0000\u0000\u0000"+
		"\u070a\u06e1\u0001\u0000\u0000\u0000\u070a\u06ef\u0001\u0000\u0000\u0000"+
		"\u070a\u06f8\u0001\u0000\u0000\u0000\u070a\u0701\u0001\u0000\u0000\u0000"+
		"\u070bO\u0001\u0000\u0000\u0000\u070c\u070d\u0003\u020c\u0106\u0000\u070d"+
		"Q\u0001\u0000\u0000\u0000\u070e\u070f\u0003\u020c\u0106\u0000\u070fS\u0001"+
		"\u0000\u0000\u0000\u0710\u0711\u0005\u0013\u0000\u0000\u0711\u0712\u0005"+
		"\u02f0\u0000\u0000\u0712\u0713\u0005\u01fa\u0000\u0000\u0713\u0714\u0005"+
		"\u023c\u0000\u0000\u0714\u0715\u0003\u0208\u0104\u0000\u0715\u0716\u0005"+
		"\u01d4\u0000\u0000\u0716\u0717\u0005\u0247\u0000\u0000\u0717\u0718\u0003"+
		"\u0208\u0104\u0000\u0718\u0723\u0001\u0000\u0000\u0000\u0719\u071a\u0005"+
		"\u0013\u0000\u0000\u071a\u071b\u0005\u02f0\u0000\u0000\u071b\u071c\u0005"+
		"\u01fa\u0000\u0000\u071c\u071d\u0005\u023c\u0000\u0000\u071d\u071e\u0003"+
		"\u0208\u0104\u0000\u071e\u071f\u0005\u0207\u0000\u0000\u071f\u0720\u0005"+
		"\u01f3\u0000\u0000\u0720\u0721\u0003\u0208\u0104\u0000\u0721\u0723\u0001"+
		"\u0000\u0000\u0000\u0722\u0710\u0001\u0000\u0000\u0000\u0722\u0719\u0001"+
		"\u0000\u0000\u0000\u0723U\u0001\u0000\u0000\u0000\u0724\u0725\u0005\u0013"+
		"\u0000\u0000\u0725\u0726\u0005\u0254\u0000\u0000\u0726\u0727\u0003\u0208"+
		"\u0104\u0000\u0727\u0728\u0005\u0180\u0000\u0000\u0728\u0729\u0003\u0208"+
		"\u0104\u0000\u0729\u072a\u0005\u01d4\u0000\u0000\u072a\u072b\u0005\u0247"+
		"\u0000\u0000\u072b\u072c\u0003\u0208\u0104\u0000\u072c\u0738\u0001\u0000"+
		"\u0000\u0000\u072d\u072e\u0005\u0013\u0000\u0000\u072e\u072f\u0005\u0254"+
		"\u0000\u0000\u072f\u0730\u0003\u0208\u0104\u0000\u0730\u0731\u0005\u0180"+
		"\u0000\u0000\u0731\u0732\u0003\u0208\u0104\u0000\u0732\u0733\u0005\u00a7"+
		"\u0000\u0000\u0733\u0734\u0005\u0180\u0000\u0000\u0734\u0735\u0005\u00d7"+
		"\u0000\u0000\u0735\u0736\u0003\u0208\u0104\u0000\u0736\u0738\u0001\u0000"+
		"\u0000\u0000\u0737\u0724\u0001\u0000\u0000\u0000\u0737\u072d\u0001\u0000"+
		"\u0000\u0000\u0738W\u0001\u0000\u0000\u0000\u0739\u073a\u0003\u020c\u0106"+
		"\u0000\u073aY\u0001\u0000\u0000\u0000\u073b\u073c\u0003\u020c\u0106\u0000"+
		"\u073c[\u0001\u0000\u0000\u0000\u073d\u073e\u0005\u0013\u0000\u0000\u073e"+
		"\u073f\u0005\u026d\u0000\u0000\u073f\u0740\u0005\u0145\u0000\u0000\u0740"+
		"\u0741\u0005\u00e3\u0000\u0000\u0741\u0742\u0003\u01fe\u00ff\u0000\u0742"+
		"\u0743\u0005\u02bd\u0000\u0000\u0743\u0744\u0003\u0208\u0104\u0000\u0744"+
		"\u0745\u0005\u0186\u0000\u0000\u0745\u0746\u0005\u02ff\u0000\u0000\u0746"+
		"\u0747\u0003@ \u0000\u0747\u0748\u0005\u0300\u0000\u0000\u0748]\u0001"+
		"\u0000\u0000\u0000\u0749\u074a\u0003\u020c\u0106\u0000\u074a_\u0001\u0000"+
		"\u0000\u0000\u074b\u074d\u0005\u0016\u0000\u0000\u074c\u074e\u0005\u027f"+
		"\u0000\u0000\u074d\u074c\u0001\u0000\u0000\u0000\u074d\u074e\u0001\u0000"+
		"\u0000\u0000\u074e\u074f\u0001\u0000\u0000\u0000\u074f\u0754\u0003\u01da"+
		"\u00ed\u0000\u0750\u0751\u0005\u02ff\u0000\u0000\u0751\u0752\u0003\u01d2"+
		"\u00e9\u0000\u0752\u0753\u0005\u0300\u0000\u0000\u0753\u0755\u0001\u0000"+
		"\u0000\u0000\u0754\u0750\u0001\u0000\u0000\u0000\u0754\u0755\u0001\u0000"+
		"\u0000\u0000\u0755a\u0001\u0000\u0000\u0000\u0756\u0757\u0003\u020c\u0106"+
		"\u0000\u0757c\u0001\u0000\u0000\u0000\u0758\u0759\u0003\u020c\u0106\u0000"+
		"\u0759e\u0001\u0000\u0000\u0000\u075a\u075b\u0003\u020c\u0106\u0000\u075b"+
		"g\u0001\u0000\u0000\u0000\u075c\u075d\u0003\u020c\u0106\u0000\u075di\u0001"+
		"\u0000\u0000\u0000\u075e\u075f\u0003\u020c\u0106\u0000\u075fk\u0001\u0000"+
		"\u0000\u0000\u0760\u0761\u0003\u020c\u0106\u0000\u0761m\u0001\u0000\u0000"+
		"\u0000\u0762\u078a\u0003p8\u0000\u0763\u078a\u0003r9\u0000\u0764\u078a"+
		"\u0003t:\u0000\u0765\u078a\u0003z=\u0000\u0766\u078a\u0003|>\u0000\u0767"+
		"\u078a\u0003~?\u0000\u0768\u078a\u0003\u0082A\u0000\u0769\u078a\u0003"+
		"\u0086C\u0000\u076a\u078a\u0003\u008aE\u0000\u076b\u078a\u0003\u008cF"+
		"\u0000\u076c\u078a\u0003\u008eG\u0000\u076d\u078a\u0003\u0090H\u0000\u076e"+
		"\u078a\u0003\u0092I\u0000\u076f\u078a\u0003\u0094J\u0000\u0770\u078a\u0003"+
		"\u0096K\u0000\u0771\u078a\u0003\u0098L\u0000\u0772\u078a\u0003\u009cN"+
		"\u0000\u0773\u078a\u0003\u009eO\u0000\u0774\u078a\u0003\u00a0P\u0000\u0775"+
		"\u078a\u0003\u00a2Q\u0000\u0776\u078a\u0003\u00a6S\u0000\u0777\u078a\u0003"+
		"\u00a8T\u0000\u0778\u078a\u0003\u00aaU\u0000\u0779\u078a\u0003\u00acV"+
		"\u0000\u077a\u078a\u0003\u00aeW\u0000\u077b\u078a\u0003\u00b0X\u0000\u077c"+
		"\u078a\u0003\u00b2Y\u0000\u077d\u078a\u0003\u00b4Z\u0000\u077e\u078a\u0003"+
		"\u00b6[\u0000\u077f\u078a\u0003\u00b8\\\u0000\u0780\u078a\u0003\u00ba"+
		"]\u0000\u0781\u078a\u0003\u00bc^\u0000\u0782\u078a\u0003\u00be_\u0000"+
		"\u0783\u078a\u0003\u00c0`\u0000\u0784\u078a\u0003\u00c2a\u0000\u0785\u078a"+
		"\u0003\u00c4b\u0000\u0786\u078a\u0003\u00c6c\u0000\u0787\u078a\u0003\u00c8"+
		"d\u0000\u0788\u078a\u0003\u00cae\u0000\u0789\u0762\u0001\u0000\u0000\u0000"+
		"\u0789\u0763\u0001\u0000\u0000\u0000\u0789\u0764\u0001\u0000\u0000\u0000"+
		"\u0789\u0765\u0001\u0000\u0000\u0000\u0789\u0766\u0001\u0000\u0000\u0000"+
		"\u0789\u0767\u0001\u0000\u0000\u0000\u0789\u0768\u0001\u0000\u0000\u0000"+
		"\u0789\u0769\u0001\u0000\u0000\u0000\u0789\u076a\u0001\u0000\u0000\u0000"+
		"\u0789\u076b\u0001\u0000\u0000\u0000\u0789\u076c\u0001\u0000\u0000\u0000"+
		"\u0789\u076d\u0001\u0000\u0000\u0000\u0789\u076e\u0001\u0000\u0000\u0000"+
		"\u0789\u076f\u0001\u0000\u0000\u0000\u0789\u0770\u0001\u0000\u0000\u0000"+
		"\u0789\u0771\u0001\u0000\u0000\u0000\u0789\u0772\u0001\u0000\u0000\u0000"+
		"\u0789\u0773\u0001\u0000\u0000\u0000\u0789\u0774\u0001\u0000\u0000\u0000"+
		"\u0789\u0775\u0001\u0000\u0000\u0000\u0789\u0776\u0001\u0000\u0000\u0000"+
		"\u0789\u0777\u0001\u0000\u0000\u0000\u0789\u0778\u0001\u0000\u0000\u0000"+
		"\u0789\u0779\u0001\u0000\u0000\u0000\u0789\u077a\u0001\u0000\u0000\u0000"+
		"\u0789\u077b\u0001\u0000\u0000\u0000\u0789\u077c\u0001\u0000\u0000\u0000"+
		"\u0789\u077d\u0001\u0000\u0000\u0000\u0789\u077e\u0001\u0000\u0000\u0000"+
		"\u0789\u077f\u0001\u0000\u0000\u0000\u0789\u0780\u0001\u0000\u0000\u0000"+
		"\u0789\u0781\u0001\u0000\u0000\u0000\u0789\u0782\u0001\u0000\u0000\u0000"+
		"\u0789\u0783\u0001\u0000\u0000\u0000\u0789\u0784\u0001\u0000\u0000\u0000"+
		"\u0789\u0785\u0001\u0000\u0000\u0000\u0789\u0786\u0001\u0000\u0000\u0000"+
		"\u0789\u0787\u0001\u0000\u0000\u0000\u0789\u0788\u0001\u0000\u0000\u0000"+
		"\u078ao\u0001\u0000\u0000\u0000\u078b\u078c\u0005~\u0000\u0000\u078c\u078d"+
		"\u0005\b\u0000\u0000\u078d\u078e\u0005\u0150\u0000\u0000\u078e\u078f\u0003"+
		"\u01d0\u00e8\u0000\u078f\u0790\u0005\u025c\u0000\u0000\u0790\u0791\u0005"+
		"\u010c\u0000\u0000\u0791\u0792\u0005\u00fc\u0000\u0000\u0792\u0793\u0003"+
		"\u01d0\u00e8\u0000\u0793q\u0001\u0000\u0000\u0000\u0794\u0795\u0005~\u0000"+
		"\u0000\u0795\u0796\u0005\u000e\u0000\u0000\u0796\u0797\u0003\u01d0\u00e8"+
		"\u0000\u0797\u0799\u0005\u02ff\u0000\u0000\u0798\u079a\u0007\u0006\u0000"+
		"\u0000\u0799\u0798\u0001\u0000\u0000\u0000\u0799\u079a\u0001\u0000\u0000"+
		"\u0000\u079a\u079c\u0001\u0000\u0000\u0000\u079b\u079d\u0003\u01d0\u00e8"+
		"\u0000\u079c\u079b\u0001\u0000\u0000\u0000\u079c\u079d\u0001\u0000\u0000"+
		"\u0000\u079d\u079e\u0001\u0000\u0000\u0000\u079e\u079f\u0003\u01de\u00ef"+
		"\u0000\u079f\u07a0\u0005\u0300\u0000\u0000\u07a0\u07a1\u0005\u02ff\u0000"+
		"\u0000\u07a1\u07a2\u0005\u029c\u0000\u0000\u07a2\u07a3\u0005\u0318\u0000"+
		"\u0000\u07a3\u07a4\u0003\u0208\u0104\u0000\u07a4\u07a5\u0005\u02f9\u0000"+
		"\u0000\u07a5\u07a6\u0005\u029d\u0000\u0000\u07a6\u07a7\u0005\u0318\u0000"+
		"\u0000\u07a7\u07ac\u0003\u0208\u0104\u0000\u07a8\u07a9\u0005\u02f9\u0000"+
		"\u0000\u07a9\u07aa\u0005\u029e\u0000\u0000\u07aa\u07ab\u0005\u0318\u0000"+
		"\u0000\u07ab\u07ad\u0005\u0306\u0000\u0000\u07ac\u07a8\u0001\u0000\u0000"+
		"\u0000\u07ac\u07ad\u0001\u0000\u0000\u0000\u07ad\u07b2\u0001\u0000\u0000"+
		"\u0000\u07ae\u07af\u0005\u02f9\u0000\u0000\u07af\u07b0\u0005\u029f\u0000"+
		"\u0000\u07b0\u07b1\u0005\u0318\u0000\u0000\u07b1\u07b3\u0003\u0208\u0104"+
		"\u0000\u07b2\u07ae\u0001\u0000\u0000\u0000\u07b2\u07b3\u0001\u0000\u0000"+
		"\u0000\u07b3\u07b6\u0001\u0000\u0000\u0000\u07b4\u07b5\u0005\u02f9\u0000"+
		"\u0000\u07b5\u07b7\u0005\u02a0\u0000\u0000\u07b6\u07b4\u0001\u0000\u0000"+
		"\u0000\u07b6\u07b7\u0001\u0000\u0000\u0000\u07b7\u07bc\u0001\u0000\u0000"+
		"\u0000\u07b8\u07b9\u0005\u02f9\u0000\u0000\u07b9\u07ba\u0005\u02a1\u0000"+
		"\u0000\u07ba\u07bb\u0005\u0318\u0000\u0000\u07bb\u07bd\u0003\u0208\u0104"+
		"\u0000\u07bc\u07b8\u0001\u0000\u0000\u0000\u07bc\u07bd\u0001\u0000\u0000"+
		"\u0000\u07bd\u07c2\u0001\u0000\u0000\u0000\u07be\u07bf\u0005\u02f9\u0000"+
		"\u0000\u07bf\u07c0\u0005\u02a2\u0000\u0000\u07c0\u07c1\u0005\u0318\u0000"+
		"\u0000\u07c1\u07c3\u0003\u0208\u0104\u0000\u07c2\u07be\u0001\u0000\u0000"+
		"\u0000\u07c2\u07c3\u0001\u0000\u0000\u0000\u07c3\u07c8\u0001\u0000\u0000"+
		"\u0000\u07c4\u07c5\u0005\u02f9\u0000\u0000\u07c5\u07c6\u0005\u02a3\u0000"+
		"\u0000\u07c6\u07c7\u0005\u0318\u0000\u0000\u07c7\u07c9\u0003\u0208\u0104"+
		"\u0000\u07c8\u07c4\u0001\u0000\u0000\u0000\u07c8\u07c9\u0001\u0000\u0000"+
		"\u0000\u07c9\u07ce\u0001\u0000\u0000\u0000\u07ca\u07cb\u0005\u02f9\u0000"+
		"\u0000\u07cb\u07cc\u0005\u02a4\u0000\u0000\u07cc\u07cd\u0005\u0318\u0000"+
		"\u0000\u07cd\u07cf\u0003\u01b0\u00d8\u0000\u07ce\u07ca\u0001\u0000\u0000"+
		"\u0000\u07ce\u07cf\u0001\u0000\u0000\u0000\u07cf\u07d4\u0001\u0000\u0000"+
		"\u0000\u07d0\u07d1\u0005\u02f9\u0000\u0000\u07d1\u07d2\u0005\u02a5\u0000"+
		"\u0000\u07d2\u07d3\u0005\u0318\u0000\u0000\u07d3\u07d5\u0003\u0208\u0104"+
		"\u0000\u07d4\u07d0\u0001\u0000\u0000\u0000\u07d4\u07d5\u0001\u0000\u0000"+
		"\u0000\u07d5\u07da\u0001\u0000\u0000\u0000\u07d6\u07d7\u0005\u02f9\u0000"+
		"\u0000\u07d7\u07d8\u0005\u02a6\u0000\u0000\u07d8\u07d9\u0005\u0318\u0000"+
		"\u0000\u07d9\u07db\u0003\u0208\u0104\u0000\u07da\u07d6\u0001\u0000\u0000"+
		"\u0000\u07da\u07db\u0001\u0000\u0000\u0000\u07db\u07e0\u0001\u0000\u0000"+
		"\u0000\u07dc\u07dd\u0005\u02f9\u0000\u0000\u07dd\u07de\u0005\u02a7\u0000"+
		"\u0000\u07de\u07df\u0005\u0318\u0000\u0000\u07df\u07e1\u0003\u0208\u0104"+
		"\u0000\u07e0\u07dc\u0001\u0000\u0000\u0000\u07e0\u07e1\u0001\u0000\u0000"+
		"\u0000\u07e1\u07e6\u0001\u0000\u0000\u0000\u07e2\u07e3\u0005\u02f9\u0000"+
		"\u0000\u07e3\u07e4\u0005\u02a8\u0000\u0000\u07e4\u07e5\u0005\u0318\u0000"+
		"\u0000\u07e5\u07e7\u0005\u0306\u0000\u0000\u07e6\u07e2\u0001\u0000\u0000"+
		"\u0000\u07e6\u07e7\u0001\u0000\u0000\u0000\u07e7\u07ec\u0001\u0000\u0000"+
		"\u0000\u07e8\u07e9\u0005\u02f9\u0000\u0000\u07e9\u07ea\u0005\u02a9\u0000"+
		"\u0000\u07ea\u07eb\u0005\u0318\u0000\u0000\u07eb\u07ed\u0003\u0208\u0104"+
		"\u0000\u07ec\u07e8\u0001\u0000\u0000\u0000\u07ec\u07ed\u0001\u0000\u0000"+
		"\u0000\u07ed\u07f0\u0001\u0000\u0000\u0000\u07ee\u07ef\u0005\u02f9\u0000"+
		"\u0000\u07ef\u07f1\u0005\u02aa\u0000\u0000\u07f0\u07ee\u0001\u0000\u0000"+
		"\u0000\u07f0\u07f1\u0001\u0000\u0000\u0000\u07f1\u07f6\u0001\u0000\u0000"+
		"\u0000\u07f2\u07f3\u0005\u02f9\u0000\u0000\u07f3\u07f4\u0005\u02ab\u0000"+
		"\u0000\u07f4\u07f5\u0005\u0318\u0000\u0000\u07f5\u07f7\u0003\u0208\u0104"+
		"\u0000\u07f6\u07f2\u0001\u0000\u0000\u0000\u07f6\u07f7\u0001\u0000\u0000"+
		"\u0000\u07f7\u07fc\u0001\u0000\u0000\u0000\u07f8\u07f9\u0005\u02f9\u0000"+
		"\u0000\u07f9\u07fa\u0005\u02ac\u0000\u0000\u07fa\u07fb\u0005\u0318\u0000"+
		"\u0000\u07fb\u07fd\u0003\u0208\u0104\u0000\u07fc\u07f8\u0001\u0000\u0000"+
		"\u0000\u07fc\u07fd\u0001\u0000\u0000\u0000\u07fd\u0802\u0001\u0000\u0000"+
		"\u0000\u07fe\u07ff\u0005\u02f9\u0000\u0000\u07ff\u0800\u0005\u02ad\u0000"+
		"\u0000\u0800\u0801\u0005\u0318\u0000\u0000\u0801\u0803\u0007\u0007\u0000"+
		"\u0000\u0802\u07fe\u0001\u0000\u0000\u0000\u0802\u0803\u0001\u0000\u0000"+
		"\u0000\u0803\u0804\u0001\u0000\u0000\u0000\u0804\u0805\u0005\u0300\u0000"+
		"\u0000\u0805\u08af\u0001\u0000\u0000\u0000\u0806\u0807\u0005~\u0000\u0000"+
		"\u0807\u0808\u0005\u000e\u0000\u0000\u0808\u0809\u0003\u01d0\u00e8\u0000"+
		"\u0809\u0811\u0005\u02ff\u0000\u0000\u080a\u080c\u0007\u0006\u0000\u0000"+
		"\u080b\u080a\u0001\u0000\u0000\u0000\u080b\u080c\u0001\u0000\u0000\u0000"+
		"\u080c\u080e\u0001\u0000\u0000\u0000\u080d\u080f\u0003\u01d0\u00e8\u0000"+
		"\u080e\u080d\u0001\u0000\u0000\u0000\u080e\u080f\u0001\u0000\u0000\u0000"+
		"\u080f\u0810\u0001\u0000\u0000\u0000\u0810\u0812\u0003\u01de\u00ef\u0000"+
		"\u0811\u080b\u0001\u0000\u0000\u0000\u0811\u0812\u0001\u0000\u0000\u0000"+
		"\u0812\u0813\u0001\u0000\u0000\u0000\u0813\u0814\u0005\u0188\u0000\u0000"+
		"\u0814\u0816\u00056\u0000\u0000\u0815\u0817\u0007\u0006\u0000\u0000\u0816"+
		"\u0815\u0001\u0000\u0000\u0000\u0816\u0817\u0001\u0000\u0000\u0000\u0817"+
		"\u0819\u0001\u0000\u0000\u0000\u0818\u081a\u0003\u01d0\u00e8\u0000\u0819"+
		"\u0818\u0001\u0000\u0000\u0000\u0819\u081a\u0001\u0000\u0000\u0000\u081a"+
		"\u081b\u0001\u0000\u0000\u0000\u081b\u081c\u0003\u01de\u00ef\u0000\u081c"+
		"\u081d\u0005\u0300\u0000\u0000\u081d\u081e\u0005\u02ff\u0000\u0000\u081e"+
		"\u081f\u0005\u029c\u0000\u0000\u081f\u0820\u0005\u0318\u0000\u0000\u0820"+
		"\u0821\u0003\u0208\u0104\u0000\u0821\u0822\u0005\u02f9\u0000\u0000\u0822"+
		"\u0823\u0005\u029d\u0000\u0000\u0823\u0824\u0005\u0318\u0000\u0000\u0824"+
		"\u0829\u0003\u0208\u0104\u0000\u0825\u0826\u0005\u02f9\u0000\u0000\u0826"+
		"\u0827\u0005\u029e\u0000\u0000\u0827\u0828\u0005\u0318\u0000\u0000\u0828"+
		"\u082a\u0005\u0306\u0000\u0000\u0829\u0825\u0001\u0000\u0000\u0000\u0829"+
		"\u082a\u0001\u0000\u0000\u0000\u082a\u082f\u0001\u0000\u0000\u0000\u082b"+
		"\u082c\u0005\u02f9\u0000\u0000\u082c\u082d\u0005\u029f\u0000\u0000\u082d"+
		"\u082e\u0005\u0318\u0000\u0000\u082e\u0830\u0003\u0208\u0104\u0000\u082f"+
		"\u082b\u0001\u0000\u0000\u0000\u082f\u0830\u0001\u0000\u0000\u0000\u0830"+
		"\u0833\u0001\u0000\u0000\u0000\u0831\u0832\u0005\u02f9\u0000\u0000\u0832"+
		"\u0834\u0005\u02a0\u0000\u0000\u0833\u0831\u0001\u0000\u0000\u0000\u0833"+
		"\u0834\u0001\u0000\u0000\u0000\u0834\u0839\u0001\u0000\u0000\u0000\u0835"+
		"\u0836\u0005\u02f9\u0000\u0000\u0836\u0837\u0005\u02a4\u0000\u0000\u0837"+
		"\u0838\u0005\u0318\u0000\u0000\u0838\u083a\u0003\u01b0\u00d8\u0000\u0839"+
		"\u0835\u0001\u0000\u0000\u0000\u0839\u083a\u0001\u0000\u0000\u0000\u083a"+
		"\u083f\u0001\u0000\u0000\u0000\u083b\u083c\u0005\u02f9\u0000\u0000\u083c"+
		"\u083d\u0005\u02ad\u0000\u0000\u083d\u083e\u0005\u0318\u0000\u0000\u083e"+
		"\u0840\u0007\u0007\u0000\u0000\u083f\u083b\u0001\u0000\u0000\u0000\u083f"+
		"\u0840\u0001\u0000\u0000\u0000\u0840\u0843\u0001\u0000\u0000\u0000\u0841"+
		"\u0842\u0005\u02f9\u0000\u0000\u0842\u0844\u0005\u02ae\u0000\u0000\u0843"+
		"\u0841\u0001\u0000\u0000\u0000\u0843\u0844\u0001\u0000\u0000\u0000\u0844"+
		"\u0845\u0001\u0000\u0000\u0000\u0845\u0846\u0005\u0300\u0000\u0000\u0846"+
		"\u08af\u0001\u0000\u0000\u0000\u0847\u0848\u0005~\u0000\u0000\u0848\u0849"+
		"\u0005\u000e\u0000\u0000\u0849\u084a\u0003\u01d0\u00e8\u0000\u084a\u084b"+
		"\u0005\u02ff\u0000\u0000\u084b\u084c\u0005\u02b2\u0000\u0000\u084c\u084d"+
		"\u0005\u0318\u0000\u0000\u084d\u084e\u0003\u01dc\u00ee\u0000\u084e\u084f"+
		"\u0005\u02f9\u0000\u0000\u084f\u0850\u0005\u029c\u0000\u0000\u0850\u0851"+
		"\u0005\u0318\u0000\u0000\u0851\u0852\u0003\u0208\u0104\u0000\u0852\u0853"+
		"\u0005\u02f9\u0000\u0000\u0853\u0854\u0005\u029d\u0000\u0000\u0854\u0855"+
		"\u0005\u0318\u0000\u0000\u0855\u085a\u0003\u0208\u0104\u0000\u0856\u0857"+
		"\u0005\u02f9\u0000\u0000\u0857\u0858\u0005\u029e\u0000\u0000\u0858\u0859"+
		"\u0005\u0318\u0000\u0000\u0859\u085b\u0005\u0306\u0000\u0000\u085a\u0856"+
		"\u0001\u0000\u0000\u0000\u085a\u085b\u0001\u0000\u0000\u0000\u085b\u0860"+
		"\u0001\u0000\u0000\u0000\u085c\u085d\u0005\u02f9\u0000\u0000\u085d\u085e"+
		"\u0005\u029f\u0000\u0000\u085e\u085f\u0005\u0318\u0000\u0000\u085f\u0861"+
		"\u0003\u0208\u0104\u0000\u0860\u085c\u0001\u0000\u0000\u0000\u0860\u0861"+
		"\u0001\u0000\u0000\u0000\u0861\u0864\u0001\u0000\u0000\u0000\u0862\u0863"+
		"\u0005\u02f9\u0000\u0000\u0863\u0865\u0005\u02a0\u0000\u0000\u0864\u0862"+
		"\u0001\u0000\u0000\u0000\u0864\u0865\u0001\u0000\u0000\u0000\u0865\u086a"+
		"\u0001\u0000\u0000\u0000\u0866\u0867\u0005\u02f9\u0000\u0000\u0867\u0868"+
		"\u0005\u02a1\u0000\u0000\u0868\u0869\u0005\u0318\u0000\u0000\u0869\u086b"+
		"\u0003\u0208\u0104\u0000\u086a\u0866\u0001\u0000\u0000\u0000\u086a\u086b"+
		"\u0001\u0000\u0000\u0000\u086b\u0870\u0001\u0000\u0000\u0000\u086c\u086d"+
		"\u0005\u02f9\u0000\u0000\u086d\u086e\u0005\u02a2\u0000\u0000\u086e\u086f"+
		"\u0005\u0318\u0000\u0000\u086f\u0871\u0003\u0208\u0104\u0000\u0870\u086c"+
		"\u0001\u0000\u0000\u0000\u0870\u0871\u0001\u0000\u0000\u0000\u0871\u0876"+
		"\u0001\u0000\u0000\u0000\u0872\u0873\u0005\u02f9\u0000\u0000\u0873\u0874"+
		"\u0005\u02a3\u0000\u0000\u0874\u0875\u0005\u0318\u0000\u0000\u0875\u0877"+
		"\u0003\u0208\u0104\u0000\u0876\u0872\u0001\u0000\u0000\u0000\u0876\u0877"+
		"\u0001\u0000\u0000\u0000\u0877\u087c\u0001\u0000\u0000\u0000\u0878\u0879"+
		"\u0005\u02f9\u0000\u0000\u0879\u087a\u0005\u02a4\u0000\u0000\u087a\u087b"+
		"\u0005\u0318\u0000\u0000\u087b\u087d\u0003\u01b0\u00d8\u0000\u087c\u0878"+
		"\u0001\u0000\u0000\u0000\u087c\u087d\u0001\u0000\u0000\u0000\u087d\u0882"+
		"\u0001\u0000\u0000\u0000\u087e\u087f\u0005\u02f9\u0000\u0000\u087f\u0880"+
		"\u0005\u02a5\u0000\u0000\u0880\u0881\u0005\u0318\u0000\u0000\u0881\u0883"+
		"\u0003\u0208\u0104\u0000\u0882\u087e\u0001\u0000\u0000\u0000\u0882\u0883"+
		"\u0001\u0000\u0000\u0000\u0883\u0888\u0001\u0000\u0000\u0000\u0884\u0885"+
		"\u0005\u02f9\u0000\u0000\u0885\u0886\u0005\u02a6\u0000\u0000\u0886\u0887"+
		"\u0005\u0318\u0000\u0000\u0887\u0889\u0003\u0208\u0104\u0000\u0888\u0884"+
		"\u0001\u0000\u0000\u0000\u0888\u0889\u0001\u0000\u0000\u0000\u0889\u088e"+
		"\u0001\u0000\u0000\u0000\u088a\u088b\u0005\u02f9\u0000\u0000\u088b\u088c"+
		"\u0005\u02a7\u0000\u0000\u088c\u088d\u0005\u0318\u0000\u0000\u088d\u088f"+
		"\u0003\u0208\u0104\u0000\u088e\u088a\u0001\u0000\u0000\u0000\u088e\u088f"+
		"\u0001\u0000\u0000\u0000\u088f\u0894\u0001\u0000\u0000\u0000\u0890\u0891"+
		"\u0005\u02f9\u0000\u0000\u0891\u0892\u0005\u02a8\u0000\u0000\u0892\u0893"+
		"\u0005\u0318\u0000\u0000\u0893\u0895\u0005\u0306\u0000\u0000\u0894\u0890"+
		"\u0001\u0000\u0000\u0000\u0894\u0895\u0001\u0000\u0000\u0000\u0895\u089a"+
		"\u0001\u0000\u0000\u0000\u0896\u0897\u0005\u02f9\u0000\u0000\u0897\u0898"+
		"\u0005\u02a9\u0000\u0000\u0898\u0899\u0005\u0318\u0000\u0000\u0899\u089b"+
		"\u0003\u0208\u0104\u0000\u089a\u0896\u0001\u0000\u0000\u0000\u089a\u089b"+
		"\u0001\u0000\u0000\u0000\u089b\u089e\u0001\u0000\u0000\u0000\u089c\u089d"+
		"\u0005\u02f9\u0000\u0000\u089d\u089f\u0005\u02aa\u0000\u0000\u089e\u089c"+
		"\u0001\u0000\u0000\u0000\u089e\u089f\u0001\u0000\u0000\u0000\u089f\u08a4"+
		"\u0001\u0000\u0000\u0000\u08a0\u08a1\u0005\u02f9\u0000\u0000\u08a1\u08a2"+
		"\u0005\u02ab\u0000\u0000\u08a2\u08a3\u0005\u0318\u0000\u0000\u08a3\u08a5"+
		"\u0003\u0208\u0104\u0000\u08a4\u08a0\u0001\u0000\u0000\u0000\u08a4\u08a5"+
		"\u0001\u0000\u0000\u0000\u08a5\u08aa\u0001\u0000\u0000\u0000\u08a6\u08a7"+
		"\u0005\u02f9\u0000\u0000\u08a7\u08a8\u0005\u02ac\u0000\u0000\u08a8\u08a9"+
		"\u0005\u0318\u0000\u0000\u08a9\u08ab\u0003\u0208\u0104\u0000\u08aa\u08a6"+
		"\u0001\u0000\u0000\u0000\u08aa\u08ab\u0001\u0000\u0000\u0000\u08ab\u08ac"+
		"\u0001\u0000\u0000\u0000\u08ac\u08ad\u0005\u0300\u0000\u0000\u08ad\u08af"+
		"\u0001\u0000\u0000\u0000\u08ae\u0794\u0001\u0000\u0000\u0000\u08ae\u0806"+
		"\u0001\u0000\u0000\u0000\u08ae\u0847\u0001\u0000\u0000\u0000\u08afs\u0001"+
		"\u0000\u0000\u0000\u08b0\u08b1\u0005~\u0000\u0000\u08b1\u08b2\u0005?\u0000"+
		"\u0000\u08b2\u08b3\u0005\u02ff\u0000\u0000\u08b3\u08b4\u0003\u01dc\u00ee"+
		"\u0000\u08b4\u08b5\u0005\u001b\u0000\u0000\u08b5\u08b6\u0003\u01dc\u00ee"+
		"\u0000\u08b6\u08c4\u0005\u0300\u0000\u0000\u08b7\u08b8\u0005\u0287\u0000"+
		"\u0000\u08b8\u08b9\u0005\u00ee\u0000\u0000\u08b9\u08be\u0003\u0208\u0104"+
		"\u0000\u08ba\u08bb\u0005\u02ff\u0000\u0000\u08bb\u08bc\u0003\u01de\u00ef"+
		"\u0000\u08bc\u08bd\u0005\u0300\u0000\u0000\u08bd\u08bf\u0001\u0000\u0000"+
		"\u0000\u08be\u08ba\u0001\u0000\u0000\u0000\u08be\u08bf\u0001\u0000\u0000"+
		"\u0000\u08bf\u08c5\u0001\u0000\u0000\u0000\u08c0\u08c1\u0005\u0289\u0000"+
		"\u0000\u08c1\u08c5\u0005\u00ee\u0000\u0000\u08c2\u08c3\u0005\u0287\u0000"+
		"\u0000\u08c3\u08c5\u0005\u0113\u0000\u0000\u08c4\u08b7\u0001\u0000\u0000"+
		"\u0000\u08c4\u08c0\u0001\u0000\u0000\u0000\u08c4\u08c2\u0001\u0000\u0000"+
		"\u0000\u08c5\u08ca\u0001\u0000\u0000\u0000\u08c6\u08c7\u0005\u001b\u0000"+
		"\u0000\u08c7\u08cb\u0005\u001f\u0000\u0000\u08c8\u08c9\u0005\u001b\u0000"+
		"\u0000\u08c9\u08cb\u0005\u0108\u0000\u0000\u08ca\u08c6\u0001\u0000\u0000"+
		"\u0000\u08ca\u08c8\u0001\u0000\u0000\u0000\u08ca\u08cb\u0001\u0000\u0000"+
		"\u0000\u08cbu\u0001\u0000\u0000\u0000\u08cc\u08cd\u0005\u02b4\u0000\u0000"+
		"\u08cd\u08ce\u0005\u0318\u0000\u0000\u08ce\u08df\u0003\u01b0\u00d8\u0000"+
		"\u08cf\u08d0\u0005\u02b5\u0000\u0000\u08d0\u08d1\u0005\u0318\u0000\u0000"+
		"\u08d1\u08df\u0003\u01b0\u00d8\u0000\u08d2\u08d3\u0005\u02b6\u0000\u0000"+
		"\u08d3\u08d4\u0005\u0318\u0000\u0000\u08d4\u08df\u0003\u01b0\u00d8\u0000"+
		"\u08d5\u08d6\u0005\u02b7\u0000\u0000\u08d6\u08d7\u0005\u0318\u0000\u0000"+
		"\u08d7\u08df\u0003\u01b0\u00d8\u0000\u08d8\u08d9\u0005\u02b8\u0000\u0000"+
		"\u08d9\u08da\u0005\u0318\u0000\u0000\u08da\u08df\u0003\u01b0\u00d8\u0000"+
		"\u08db\u08dc\u0005\u030a\u0000\u0000\u08dc\u08dd\u0005\u0318\u0000\u0000"+
		"\u08dd\u08df\u0003\u01b0\u00d8\u0000\u08de\u08cc\u0001\u0000\u0000\u0000"+
		"\u08de\u08cf\u0001\u0000\u0000\u0000\u08de\u08d2\u0001\u0000\u0000\u0000"+
		"\u08de\u08d5\u0001\u0000\u0000\u0000\u08de\u08d8\u0001\u0000\u0000\u0000"+
		"\u08de\u08db\u0001\u0000\u0000\u0000\u08dfw\u0001\u0000\u0000\u0000\u08e0"+
		"\u08e5\u0003v;\u0000\u08e1\u08e2\u0005\u02f9\u0000\u0000\u08e2\u08e4\u0003"+
		"v;\u0000\u08e3\u08e1\u0001\u0000\u0000\u0000\u08e4\u08e7\u0001\u0000\u0000"+
		"\u0000\u08e5\u08e3\u0001\u0000\u0000\u0000\u08e5\u08e6\u0001\u0000\u0000"+
		"\u0000\u08e6y\u0001\u0000\u0000\u0000\u08e7\u08e5\u0001\u0000\u0000\u0000"+
		"\u08e8\u08e9\u0005~\u0000\u0000\u08e9\u08ed\u0005Y\u0000\u0000\u08ea\u08eb"+
		"\u0005\u02b3\u0000\u0000\u08eb\u08ec\u0005\u016d\u0000\u0000\u08ec\u08ee"+
		"\u0005\u00d3\u0000\u0000\u08ed\u08ea\u0001\u0000\u0000\u0000\u08ed\u08ee"+
		"\u0001\u0000\u0000\u0000\u08ee\u08ef\u0001\u0000\u0000\u0000\u08ef\u08f0"+
		"\u0003\u01d0\u00e8\u0000\u08f0\u08f1\u0005\u02ff\u0000\u0000\u08f1\u08f2"+
		"\u0003x<\u0000\u08f2\u08f3\u0005\u0300\u0000\u0000\u08f3\u0900\u0001\u0000"+
		"\u0000\u0000\u08f4\u08f5\u0005~\u0000\u0000\u08f5\u08f9\u0005Y\u0000\u0000"+
		"\u08f6\u08f7\u0005\u02b3\u0000\u0000\u08f7\u08f8\u0005\u016d\u0000\u0000"+
		"\u08f8\u08fa\u0005\u00d3\u0000\u0000\u08f9\u08f6\u0001\u0000\u0000\u0000"+
		"\u08f9\u08fa\u0001\u0000\u0000\u0000\u08fa\u08fb\u0001\u0000\u0000\u0000"+
		"\u08fb\u08fc\u0003\u01d0\u00e8\u0000\u08fc\u08fd\u0005\u00ec\u0000\u0000"+
		"\u08fd\u08fe\u0003\u01d0\u00e8\u0000\u08fe\u0900\u0001\u0000\u0000\u0000"+
		"\u08ff\u08e8\u0001\u0000\u0000\u0000\u08ff\u08f4\u0001\u0000\u0000\u0000"+
		"\u0900{\u0001\u0000\u0000\u0000\u0901\u0903\u0005~\u0000\u0000\u0902\u0904"+
		"\u0005\u009b\u0000\u0000\u0903\u0902\u0001\u0000\u0000\u0000\u0903\u0904"+
		"\u0001\u0000\u0000\u0000\u0904\u0905\u0001\u0000\u0000\u0000\u0905\u0906"+
		"\u0005u\u0000\u0000\u0906\u0907\u0003\u0208\u0104\u0000\u0907\u0908\u0005"+
		"\u00e3\u0000\u0000\u0908\u0909\u0005\u0309\u0000\u0000\u0909\u090a\u0005"+
		"\u0247\u0000\u0000\u090a\u090b\u0005\u0309\u0000\u0000\u090b\u090c\u0005"+
		"\u00ec\u0000\u0000\u090c\u090d\u0003\u01d0\u00e8\u0000\u090d}\u0001\u0000"+
		"\u0000\u0000\u090e\u090f\u0005~\u0000\u0000\u090f\u0910\u0005\u0092\u0000"+
		"\u0000\u0910\u0912\u0003\u01d0\u00e8\u0000\u0911\u0913\u0005\u0287\u0000"+
		"\u0000\u0912\u0911\u0001\u0000\u0000\u0000\u0912\u0913\u0001\u0000\u0000"+
		"\u0000\u0913\u0917\u0001\u0000\u0000\u0000\u0914\u0915\u0005\u0193\u0000"+
		"\u0000\u0915\u0916\u0005\u0318\u0000\u0000\u0916\u0918\u0003\u01d0\u00e8"+
		"\u0000\u0917\u0914\u0001\u0000\u0000\u0000\u0917\u0918\u0001\u0000\u0000"+
		"\u0000\u0918\u091c\u0001\u0000\u0000\u0000\u0919\u091a\u0005\u023c\u0000"+
		"\u0000\u091a\u091b\u0005\u0318\u0000\u0000\u091b\u091d\u0003\u01d0\u00e8"+
		"\u0000\u091c\u0919\u0001\u0000\u0000\u0000\u091c\u091d\u0001\u0000\u0000"+
		"\u0000\u091d\u0921\u0001\u0000\u0000\u0000\u091e\u091f\u0005\u00c4\u0000"+
		"\u0000\u091f\u0920\u0005\u0318\u0000\u0000\u0920\u0922\u0003\u01d0\u00e8"+
		"\u0000\u0921\u091e\u0001\u0000\u0000\u0000\u0921\u0922\u0001\u0000\u0000"+
		"\u0000\u0922\u0926\u0001\u0000\u0000\u0000\u0923\u0924\u0005\u02b5\u0000"+
		"\u0000\u0924\u0925\u0005\u0318\u0000\u0000\u0925\u0927\u0003\u01d0\u00e8"+
		"\u0000\u0926\u0923\u0001\u0000\u0000\u0000\u0926\u0927\u0001\u0000\u0000"+
		"\u0000\u0927\u092b\u0001\u0000\u0000\u0000\u0928\u0929\u0005\u02b6\u0000"+
		"\u0000\u0929\u092a\u0005\u0318\u0000\u0000\u092a\u092c\u0003\u01d0\u00e8"+
		"\u0000\u092b\u0928\u0001\u0000\u0000\u0000\u092b\u092c\u0001\u0000\u0000"+
		"\u0000\u092c\u0930\u0001\u0000\u0000\u0000\u092d\u092e\u0005\u023a\u0000"+
		"\u0000\u092e\u092f\u0005\u0318\u0000\u0000\u092f\u0931\u0003\u01d0\u00e8"+
		"\u0000\u0930\u092d\u0001\u0000\u0000\u0000\u0930\u0931\u0001\u0000\u0000"+
		"\u0000\u0931\u0935\u0001\u0000\u0000\u0000\u0932\u0933\u0005\u02b9\u0000"+
		"\u0000\u0933\u0934\u0005\u0318\u0000\u0000\u0934\u0936\u0003\u01d0\u00e8"+
		"\u0000\u0935\u0932\u0001\u0000\u0000\u0000\u0935\u0936\u0001\u0000\u0000"+
		"\u0000\u0936\u093b\u0001\u0000\u0000\u0000\u0937\u0938\u0005k\u0000\u0000"+
		"\u0938\u0939\u0005\u0136\u0000\u0000\u0939\u093a\u0005\u0318\u0000\u0000"+
		"\u093a\u093c\u0003\u01b4\u00da\u0000\u093b\u0937\u0001\u0000\u0000\u0000"+
		"\u093b\u093c\u0001\u0000\u0000\u0000\u093c\u0940\u0001\u0000\u0000\u0000"+
		"\u093d\u093e\u0005\u02ba\u0000\u0000\u093e\u093f\u0005\u0318\u0000\u0000"+
		"\u093f\u0941\u0003\u01b4\u00da\u0000\u0940\u093d\u0001\u0000\u0000\u0000"+
		"\u0940\u0941\u0001\u0000\u0000\u0000\u0941\u007f\u0001\u0000\u0000\u0000"+
		"\u0942\u0943\u0005m\u0000\u0000\u0943\u0945\u0003\u01d0\u00e8\u0000\u0944"+
		"\u0942\u0001\u0000\u0000\u0000\u0944\u0945\u0001\u0000\u0000\u0000\u0945"+
		"\u094e\u0001\u0000\u0000\u0000\u0946\u0947\u0005\u016d\u0000\u0000\u0947"+
		"\u094f\u0005\u0172\u0000\u0000\u0948\u094f\u0005\u0172\u0000\u0000\u0949"+
		"\u094a\u0005N\u0000\u0000\u094a\u094b\u0005\u02ff\u0000\u0000\u094b\u094c"+
		"\u0003\u01b0\u00d8\u0000\u094c\u094d\u0005\u0300\u0000\u0000\u094d\u094f"+
		"\u0001\u0000\u0000\u0000\u094e\u0946\u0001\u0000\u0000\u0000\u094e\u0948"+
		"\u0001\u0000\u0000\u0000\u094e\u0949\u0001\u0000\u0000\u0000\u094f\u0081"+
		"\u0001\u0000\u0000\u0000\u0950\u0951\u0005~\u0000\u0000\u0951\u0952\u0005"+
		"\u00ba\u0000\u0000\u0952\u0954\u0003\u01d0\u00e8\u0000\u0953\u0955\u0005"+
		"\u001b\u0000\u0000\u0954\u0953\u0001\u0000\u0000\u0000\u0954\u0955\u0001"+
		"\u0000\u0000\u0000\u0955\u0956\u0001\u0000\u0000\u0000\u0956\u095e\u0003"+
		"\u01dc\u00ee\u0000\u0957\u0958\u0005X\u0000\u0000\u0958\u095d\u0003\u01d0"+
		"\u00e8\u0000\u0959\u095a\u0005\u009b\u0000\u0000\u095a\u095d\u0003\u01b0"+
		"\u00d8\u0000\u095b\u095d\u0003\u0080@\u0000\u095c\u0957\u0001\u0000\u0000"+
		"\u0000\u095c\u0959\u0001\u0000\u0000\u0000\u095c\u095b\u0001\u0000\u0000"+
		"\u0000\u095d\u0960\u0001\u0000\u0000\u0000\u095e\u095c\u0001\u0000\u0000"+
		"\u0000\u095e\u095f\u0001\u0000\u0000\u0000\u095f\u0083\u0001\u0000\u0000"+
		"\u0000\u0960\u095e\u0001\u0000\u0000\u0000\u0961\u0962\u0003\u0208\u0104"+
		"\u0000\u0962\u0963\u0005\u0109\u0000\u0000\u0963\u0964\u0005\u02ff\u0000"+
		"\u0000\u0964\u0969\u0005\u0309\u0000\u0000\u0965\u0966\u0005\u02f9\u0000"+
		"\u0000\u0966\u0968\u0005\u0309\u0000\u0000\u0967\u0965\u0001\u0000\u0000"+
		"\u0000\u0968\u096b\u0001\u0000\u0000\u0000\u0969\u0967\u0001\u0000\u0000"+
		"\u0000\u0969\u096a\u0001\u0000\u0000\u0000\u096a\u096c\u0001\u0000\u0000"+
		"\u0000\u096b\u0969\u0001\u0000\u0000\u0000\u096c\u0971\u0005\u0300\u0000"+
		"\u0000\u096d\u096e\u0005\u0017\u0000\u0000\u096e\u0970\u0003\u0084B\u0000"+
		"\u096f\u096d\u0001\u0000\u0000\u0000\u0970\u0973\u0001\u0000\u0000\u0000"+
		"\u0971\u096f\u0001\u0000\u0000\u0000\u0971\u0972\u0001\u0000\u0000\u0000"+
		"\u0972\u0085\u0001\u0000\u0000\u0000\u0973\u0971\u0001\u0000\u0000\u0000"+
		"\u0974\u0975\u0005~\u0000\u0000\u0975\u0976\u0005\u02bb\u0000\u0000\u0976"+
		"\u0977\u0005\u0254\u0000\u0000\u0977\u0978\u0003\u0208\u0104\u0000\u0978"+
		"\u0979\u0005\u0180\u0000\u0000\u0979\u097c\u0003\u0208\u0104\u0000\u097a"+
		"\u097b\u0005\u0282\u0000\u0000\u097b\u097d\u0003\u0084B\u0000\u097c\u097a"+
		"\u0001\u0000\u0000\u0000\u097c\u097d\u0001\u0000\u0000\u0000\u097d\u097e"+
		"\u0001\u0000\u0000\u0000\u097e\u097f\u0005\u00d1\u0000\u0000\u097f\u0980"+
		"\u0005\u01b8\u0000\u0000\u0980\u0981\u0003\u0208\u0104\u0000\u0981\u0982"+
		"\u0005\u02ff\u0000\u0000\u0982\u0983\u0005\u0300\u0000\u0000\u0983\u0087"+
		"\u0001\u0000\u0000\u0000\u0984\u0985\u0003\u01d0\u00e8\u0000\u0985\u098a"+
		"\u0005\u0309\u0000\u0000\u0986\u0987\u0005\u02f9\u0000\u0000\u0987\u0989"+
		"\u0003\u0088D\u0000\u0988\u0986\u0001\u0000\u0000\u0000\u0989\u098c\u0001"+
		"\u0000\u0000\u0000\u098a\u0988\u0001\u0000\u0000\u0000\u098a\u098b\u0001"+
		"\u0000\u0000\u0000\u098b\u0089\u0001\u0000\u0000\u0000\u098c\u098a\u0001"+
		"\u0000\u0000\u0000\u098d\u098e\u0005~\u0000\u0000\u098e\u098f\u0005\u00e5"+
		"\u0000\u0000\u098f\u0990\u0005\u0091\u0000\u0000\u0990\u0991\u0005\u02bc"+
		"\u0000\u0000\u0991\u0998\u0003\u0208\u0104\u0000\u0992\u0993\u0005\u00fc"+
		"\u0000\u0000\u0993\u0997\u0003\u0208\u0104\u0000\u0994\u0995\u0005\u0167"+
		"\u0000\u0000\u0995\u0997\u0005\u00fc\u0000\u0000\u0996\u0992\u0001\u0000"+
		"\u0000\u0000\u0996\u0994\u0001\u0000\u0000\u0000\u0997\u099a\u0001\u0000"+
		"\u0000\u0000\u0998\u0996\u0001\u0000\u0000\u0000\u0998\u0999\u0001\u0000"+
		"\u0000\u0000\u0999\u099f\u0001\u0000\u0000\u0000\u099a\u0998\u0001\u0000"+
		"\u0000\u0000\u099b\u099c\u0005\u0276\u0000\u0000\u099c\u09a0\u0003\u0208"+
		"\u0104\u0000\u099d\u099e\u0005\u0167\u0000\u0000\u099e\u09a0\u0005\u0276"+
		"\u0000\u0000\u099f\u099b\u0001\u0000\u0000\u0000\u099f\u099d\u0001\u0000"+
		"\u0000\u0000\u099f\u09a0\u0001\u0000\u0000\u0000\u09a0\u09a6\u0001\u0000"+
		"\u0000\u0000\u09a1\u09a2\u0005\u0186\u0000\u0000\u09a2\u09a3\u0005\u02ff"+
		"\u0000\u0000\u09a3\u09a4\u0003\u0088D\u0000\u09a4\u09a5\u0005\u0300\u0000"+
		"\u0000\u09a5\u09a7\u0001\u0000\u0000\u0000\u09a6\u09a1\u0001\u0000\u0000"+
		"\u0000\u09a6\u09a7\u0001\u0000\u0000\u0000\u09a7\u008b\u0001\u0000\u0000"+
		"\u0000\u09a8\u09a9\u0005~\u0000\u0000\u09a9\u09aa\u0005\u00e5\u0000\u0000"+
		"\u09aa\u09ae\u0005\u0237\u0000\u0000\u09ab\u09ac\u0005\u02b3\u0000\u0000"+
		"\u09ac\u09ad\u0005\u016d\u0000\u0000\u09ad\u09af\u0005\u00d3\u0000\u0000"+
		"\u09ae\u09ab\u0001\u0000\u0000\u0000\u09ae\u09af\u0001\u0000\u0000\u0000"+
		"\u09af\u09b0\u0001\u0000\u0000\u0000\u09b0\u09b1\u0003\u0208\u0104\u0000"+
		"\u09b1\u09b2\u0005\u02ff\u0000\u0000\u09b2\u09b3\u0003\u0208\u0104\u0000"+
		"\u09b3\u09b9\u0003\u0208\u0104\u0000\u09b4\u09b5\u0005\u0186\u0000\u0000"+
		"\u09b5\u09b6\u0005\u02ff\u0000\u0000\u09b6\u09b7\u0003\u0088D\u0000\u09b7"+
		"\u09b8\u0005\u0300\u0000\u0000\u09b8\u09ba\u0001\u0000\u0000\u0000\u09b9"+
		"\u09b4\u0001\u0000\u0000\u0000\u09b9\u09ba\u0001\u0000\u0000\u0000\u09ba"+
		"\u09bd\u0001\u0000\u0000\u0000\u09bb\u09bc\u0005X\u0000\u0000\u09bc\u09be"+
		"\u0003v;\u0000\u09bd\u09bb\u0001\u0000\u0000\u0000\u09bd\u09be\u0001\u0000"+
		"\u0000\u0000\u09be\u09bf\u0001\u0000\u0000\u0000\u09bf\u09c2\u0005\u0300"+
		"\u0000\u0000\u09c0\u09c1\u0005\u010f\u0000\u0000\u09c1\u09c3\u0003\u01d2"+
		"\u00e9\u0000\u09c2\u09c0\u0001\u0000\u0000\u0000\u09c2\u09c3\u0001\u0000"+
		"\u0000\u0000\u09c3\u09c4\u0001\u0000\u0000\u0000\u09c4\u09c5\u0005\u02bd"+
		"\u0000\u0000\u09c5\u09cb\u0003\u01d0\u00e8\u0000\u09c6\u09c7\u0005\u0186"+
		"\u0000\u0000\u09c7\u09c8\u0005\u02ff\u0000\u0000\u09c8\u09c9\u0003\u0088"+
		"D\u0000\u09c9\u09ca\u0005\u0300\u0000\u0000\u09ca\u09cc\u0001\u0000\u0000"+
		"\u0000\u09cb\u09c6\u0001\u0000\u0000\u0000\u09cb\u09cc\u0001\u0000\u0000"+
		"\u0000\u09cc\u008d\u0001\u0000\u0000\u0000\u09cd\u09d0\u0005~\u0000\u0000"+
		"\u09ce\u09cf\u0005\u0187\u0000\u0000\u09cf\u09d1\u0005\u01d6\u0000\u0000"+
		"\u09d0\u09ce\u0001\u0000\u0000\u0000\u09d0\u09d1\u0001\u0000\u0000\u0000"+
		"\u09d1\u09d2\u0001\u0000\u0000\u0000\u09d2\u09d3\u0005\u00ee\u0000\u0000"+
		"\u09d3\u09d4\u0003\u01d0\u00e8\u0000\u09d4\u008f\u0001\u0000\u0000\u0000"+
		"\u09d5\u09d6\u0005~\u0000\u0000\u09d6\u09d7\u0005\u00fa\u0000\u0000\u09d7"+
		"\u0a01\u0003\u0208\u0104\u0000\u09d8\u09da\u0005\u0287\u0000\u0000\u09d9"+
		"\u09d8\u0001\u0000\u0000\u0000\u09d9\u09da\u0001\u0000\u0000\u0000\u09da"+
		"\u09fd\u0001\u0000\u0000\u0000\u09db\u09fe\u0005\u0290\u0000\u0000\u09dc"+
		"\u09fe\u0005\u0291\u0000\u0000\u09dd\u09fe\u0005\u007f\u0000\u0000\u09de"+
		"\u09fe\u0005\u0168\u0000\u0000\u09df\u09fe\u0005\u0292\u0000\u0000\u09e0"+
		"\u09fe\u0005\u0293\u0000\u0000\u09e1\u09fe\u0005\u0080\u0000\u0000\u09e2"+
		"\u09fe\u0005\u0169\u0000\u0000\u09e3\u09fe\u0005\u0294\u0000\u0000\u09e4"+
		"\u09fe\u0005\u0295\u0000\u0000\u09e5\u09fe\u0005\u0296\u0000\u0000\u09e6"+
		"\u09fe\u0005\u0297\u0000\u0000\u09e7\u09e9\u0007\b\u0000\u0000\u09e8\u09e7"+
		"\u0001\u0000\u0000\u0000\u09e8\u09e9\u0001\u0000\u0000\u0000\u09e9\u09ea"+
		"\u0001\u0000\u0000\u0000\u09ea\u09eb\u0005\u01a1\u0000\u0000\u09eb\u09fe"+
		"\u0007\t\u0000\u0000\u09ec\u09ed\u0005\u0274\u0000\u0000\u09ed\u09ee\u0005"+
		"\u0269\u0000\u0000\u09ee\u09fe\u0005\u0309\u0000\u0000\u09ef\u09f0\u0005"+
		"\u0109\u0000\u0000\u09f0\u09f1\u0005\u01e5\u0000\u0000\u09f1\u09fe\u0003"+
		"\u01d2\u00e9\u0000\u09f2\u09f3\u0005\u0109\u0000\u0000\u09f3\u09f4\u0005"+
		"\u00fa\u0000\u0000\u09f4\u09fe\u0003\u01d2\u00e9\u0000\u09f5\u09f6\u0005"+
		"\u01e5\u0000\u0000\u09f6\u09fe\u0003\u01d2\u00e9\u0000\u09f7\u09f8\u0005"+
		"\f\u0000\u0000\u09f8\u09fe\u0003\u01d2\u00e9\u0000\u09f9\u09fa\u0005\u026d"+
		"\u0000\u0000\u09fa\u09fe\u0003\u01d2\u00e9\u0000\u09fb\u09fc\u0005\u0234"+
		"\u0000\u0000\u09fc\u09fe\u0005\u0306\u0000\u0000\u09fd\u09db\u0001\u0000"+
		"\u0000\u0000\u09fd\u09dc\u0001\u0000\u0000\u0000\u09fd\u09dd\u0001\u0000"+
		"\u0000\u0000\u09fd\u09de\u0001\u0000\u0000\u0000\u09fd\u09df\u0001\u0000"+
		"\u0000\u0000\u09fd\u09e0\u0001\u0000\u0000\u0000\u09fd\u09e1\u0001\u0000"+
		"\u0000\u0000\u09fd\u09e2\u0001\u0000\u0000\u0000\u09fd\u09e3\u0001\u0000"+
		"\u0000\u0000\u09fd\u09e4\u0001\u0000\u0000\u0000\u09fd\u09e5\u0001\u0000"+
		"\u0000\u0000\u09fd\u09e6\u0001\u0000\u0000\u0000\u09fd\u09e8\u0001\u0000"+
		"\u0000\u0000\u09fd\u09ec\u0001\u0000\u0000\u0000\u09fd\u09ef\u0001\u0000"+
		"\u0000\u0000\u09fd\u09f2\u0001\u0000\u0000\u0000\u09fd\u09f5\u0001\u0000"+
		"\u0000\u0000\u09fd\u09f7\u0001\u0000\u0000\u0000\u09fd\u09f9\u0001\u0000"+
		"\u0000\u0000\u09fd\u09fb\u0001\u0000\u0000\u0000\u09fe\u09ff\u0001\u0000"+
		"\u0000\u0000\u09ff\u09fd\u0001\u0000\u0000\u0000\u09ff\u0a00\u0001\u0000"+
		"\u0000\u0000\u0a00\u0a02\u0001\u0000\u0000\u0000\u0a01\u09d9\u0001\u0000"+
		"\u0000\u0000\u0a01\u0a02\u0001\u0000\u0000\u0000\u0a02\u0091\u0001\u0000"+
		"\u0000\u0000\u0a03\u0a05\u0005~\u0000\u0000\u0a04\u0a06\u0005\u0263\u0000"+
		"\u0000\u0a05\u0a04\u0001\u0000\u0000\u0000\u0a05\u0a06\u0001\u0000\u0000"+
		"\u0000\u0a06\u0a07\u0001\u0000\u0000\u0000\u0a07\u0a09\u0005\u010c\u0000"+
		"\u0000\u0a08\u0a0a\u0005\u02c4\u0000\u0000\u0a09\u0a08\u0001\u0000\u0000"+
		"\u0000\u0a09\u0a0a\u0001\u0000\u0000\u0000\u0a0a\u0a11\u0001\u0000\u0000"+
		"\u0000\u0a0b\u0a0c\u0005\u02b3\u0000\u0000\u0a0c\u0a0d\u0005\u016d\u0000"+
		"\u0000\u0a0d\u0a0f\u0005\u00d3\u0000\u0000\u0a0e\u0a0b\u0001\u0000\u0000"+
		"\u0000\u0a0e\u0a0f\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0001\u0000\u0000"+
		"\u0000\u0a10\u0a12\u0003\u0208\u0104\u0000\u0a11\u0a0e\u0001\u0000\u0000"+
		"\u0000\u0a11\u0a12\u0001\u0000\u0000\u0000\u0a12\u0a13\u0001\u0000\u0000"+
		"\u0000\u0a13\u0a14\u0005\u0180\u0000\u0000\u0a14\u0a17\u0003\u0208\u0104"+
		"\u0000\u0a15\u0a16\u0005\u0272\u0000\u0000\u0a16\u0a18\u0003\u01e0\u00f0"+
		"\u0000\u0a17\u0a15\u0001\u0000\u0000\u0000\u0a17\u0a18\u0001\u0000\u0000"+
		"\u0000\u0a18\u0a1b\u0001\u0000\u0000\u0000\u0a19\u0a1a\u0005\u023a\u0000"+
		"\u0000\u0a1a\u0a1c\u0003\u0208\u0104\u0000\u0a1b\u0a19\u0001\u0000\u0000"+
		"\u0000\u0a1b\u0a1c\u0001\u0000\u0000\u0000\u0a1c\u0a1f\u0001\u0000\u0000"+
		"\u0000\u0a1d\u0a1e\u0005\u0284\u0000\u0000\u0a1e\u0a20\u0003\u01f0\u00f8"+
		"\u0000\u0a1f\u0a1d\u0001\u0000\u0000\u0000\u0a1f\u0a20\u0001\u0000\u0000"+
		"\u0000\u0a20\u0093\u0001\u0000\u0000\u0000\u0a21\u0a24\u0005~\u0000\u0000"+
		"\u0a22\u0a23\u0005\u0187\u0000\u0000\u0a23\u0a25\u0005\u01d6\u0000\u0000"+
		"\u0a24\u0a22\u0001\u0000\u0000\u0000\u0a24\u0a25\u0001\u0000\u0000\u0000"+
		"\u0a25\u0a27\u0001\u0000\u0000\u0000\u0a26\u0a28\u0005\u01b7\u0000\u0000"+
		"\u0a27\u0a26\u0001\u0000\u0000\u0000\u0a27\u0a28\u0001\u0000\u0000\u0000"+
		"\u0a28\u0a29\u0001\u0000\u0000\u0000\u0a29\u0a2a\u0005\u012b\u0000\u0000"+
		"\u0a2a\u0a43\u0003\u0208\u0104\u0000\u0a2b\u0a2e\u0005~\u0000\u0000\u0a2c"+
		"\u0a2d\u0005\u0187\u0000\u0000\u0a2d\u0a2f\u0005\u01d6\u0000\u0000\u0a2e"+
		"\u0a2c\u0001\u0000\u0000\u0000\u0a2e\u0a2f\u0001\u0000\u0000\u0000\u0a2f"+
		"\u0a31\u0001\u0000\u0000\u0000\u0a30\u0a32\u0005\u025b\u0000\u0000\u0a31"+
		"\u0a30\u0001\u0000\u0000\u0000\u0a31\u0a32\u0001\u0000\u0000\u0000\u0a32"+
		"\u0a34\u0001\u0000\u0000\u0000\u0a33\u0a35\u0005\u01b7\u0000\u0000\u0a34"+
		"\u0a33\u0001\u0000\u0000\u0000\u0a34\u0a35\u0001\u0000\u0000\u0000\u0a35"+
		"\u0a36\u0001\u0000\u0000\u0000\u0a36\u0a37\u0005\u012b\u0000\u0000\u0a37"+
		"\u0a38\u0003\u0208\u0104\u0000\u0a38\u0a39\u0005\u00fc\u0000\u0000\u0a39"+
		"\u0a3c\u0003\u0208\u0104\u0000\u0a3a\u0a3b\u0005\u02c5\u0000\u0000\u0a3b"+
		"\u0a3d\u0003\u0208\u0104\u0000\u0a3c\u0a3a\u0001\u0000\u0000\u0000\u0a3c"+
		"\u0a3d\u0001\u0000\u0000\u0000\u0a3d\u0a40\u0001\u0000\u0000\u0000\u0a3e"+
		"\u0a3f\u0005\u0276\u0000\u0000\u0a3f\u0a41\u0003\u0208\u0104\u0000\u0a40"+
		"\u0a3e\u0001\u0000\u0000\u0000\u0a40\u0a41\u0001\u0000\u0000\u0000\u0a41"+
		"\u0a43\u0001\u0000\u0000\u0000\u0a42\u0a21\u0001\u0000\u0000\u0000\u0a42"+
		"\u0a2b\u0001\u0000\u0000\u0000\u0a43\u0095\u0001\u0000\u0000\u0000\u0a44"+
		"\u0a45\u0005~\u0000\u0000\u0a45\u0a46\u0005\u02c6\u0000\u0000\u0a46\u0a4a"+
		"\u0005\u0280\u0000\u0000\u0a47\u0a48\u0005\u02b3\u0000\u0000\u0a48\u0a49"+
		"\u0005\u016d\u0000\u0000\u0a49\u0a4b\u0005\u00d3\u0000\u0000\u0a4a\u0a47"+
		"\u0001\u0000\u0000\u0000\u0a4a\u0a4b\u0001\u0000\u0000\u0000\u0a4b\u0a4c"+
		"\u0001\u0000\u0000\u0000\u0a4c\u0a51\u0003\u0208\u0104\u0000\u0a4d\u0a4e"+
		"\u0005\u02ff\u0000\u0000\u0a4e\u0a4f\u0003\u01d4\u00ea\u0000\u0a4f\u0a50"+
		"\u0005\u0300\u0000\u0000\u0a50\u0a52\u0001\u0000\u0000\u0000\u0a51\u0a4d"+
		"\u0001\u0000\u0000\u0000\u0a51\u0a52\u0001\u0000\u0000\u0000\u0a52\u0a54"+
		"\u0001\u0000\u0000\u0000\u0a53\u0a55\u0005\u0287\u0000\u0000\u0a54\u0a53"+
		"\u0001\u0000\u0000\u0000\u0a54\u0a55\u0001\u0000\u0000\u0000\u0a55\u0a58"+
		"\u0001\u0000\u0000\u0000\u0a56\u0a57\u0005\u023a\u0000\u0000\u0a57\u0a59"+
		"\u0003\u0208\u0104\u0000\u0a58\u0a56\u0001\u0000\u0000\u0000\u0a58\u0a59"+
		"\u0001\u0000\u0000\u0000\u0a59\u0a5a\u0001\u0000\u0000\u0000\u0a5a\u0a5b"+
		"\u0005\u001b\u0000\u0000\u0a5b\u0a61\u0003\u0158\u00ac\u0000\u0a5c\u0a5e"+
		"\u0005\u0287\u0000\u0000\u0a5d\u0a5f\u0005\u0167\u0000\u0000\u0a5e\u0a5d"+
		"\u0001\u0000\u0000\u0000\u0a5e\u0a5f\u0001\u0000\u0000\u0000\u0a5f\u0a60"+
		"\u0001\u0000\u0000\u0000\u0a60\u0a62\u0005\u0091\u0000\u0000\u0a61\u0a5c"+
		"\u0001\u0000\u0000\u0000\u0a61\u0a62\u0001\u0000\u0000\u0000\u0a62\u0097"+
		"\u0001\u0000\u0000\u0000\u0a63\u0a64\u0005~\u0000\u0000\u0a64\u0a65\u0005"+
		"\u0184\u0000\u0000\u0a65\u0a66\u0003\u0208\u0104\u0000\u0a66\u0a67\u0005"+
		"\u02ff\u0000\u0000\u0a67\u0a68\u0005\u01b8\u0000\u0000\u0a68\u0a69\u0005"+
		"\u0318\u0000\u0000\u0a69\u0a6e\u0003\u0208\u0104\u0000\u0a6a\u0a6b\u0005"+
		"\u02f9\u0000\u0000\u0a6b\u0a6c\u0005\u02c7\u0000\u0000\u0a6c\u0a6d\u0005"+
		"\u0318\u0000\u0000\u0a6d\u0a6f\u0003\u01d0\u00e8\u0000\u0a6e\u0a6a\u0001"+
		"\u0000\u0000\u0000\u0a6e\u0a6f\u0001\u0000\u0000\u0000\u0a6f\u0a74\u0001"+
		"\u0000\u0000\u0000\u0a70\u0a71\u0005\u02f9\u0000\u0000\u0a71\u0a72\u0005"+
		"\u02c8\u0000\u0000\u0a72\u0a73\u0005\u0318\u0000\u0000\u0a73\u0a75\u0003"+
		"\u01d0\u00e8\u0000\u0a74\u0a70\u0001\u0000\u0000\u0000\u0a74\u0a75\u0001"+
		"\u0000\u0000\u0000\u0a75\u0a7a\u0001\u0000\u0000\u0000\u0a76\u0a77\u0005"+
		"\u02f9\u0000\u0000\u0a77\u0a78\u0005\u02c9\u0000\u0000\u0a78\u0a79\u0005"+
		"\u0318\u0000\u0000\u0a79\u0a7b\u0003\u01d0\u00e8\u0000\u0a7a\u0a76\u0001"+
		"\u0000\u0000\u0000\u0a7a\u0a7b\u0001\u0000\u0000\u0000\u0a7b\u0a80\u0001"+
		"\u0000\u0000\u0000\u0a7c\u0a7d\u0005\u02f9\u0000\u0000\u0a7d\u0a7e\u0005"+
		"\u02ca\u0000\u0000\u0a7e\u0a7f\u0005\u0318\u0000\u0000\u0a7f\u0a81\u0003"+
		"\u01d0\u00e8\u0000\u0a80\u0a7c\u0001\u0000\u0000\u0000\u0a80\u0a81\u0001"+
		"\u0000\u0000\u0000\u0a81\u0a86\u0001\u0000\u0000\u0000\u0a82\u0a83\u0005"+
		"\u02f9\u0000\u0000\u0a83\u0a84\u0005\u01da\u0000\u0000\u0a84\u0a85\u0005"+
		"\u0318\u0000\u0000\u0a85\u0a87\u0003\u01d0\u00e8\u0000\u0a86\u0a82\u0001"+
		"\u0000\u0000\u0000\u0a86\u0a87\u0001\u0000\u0000\u0000\u0a87\u0a8c\u0001"+
		"\u0000\u0000\u0000\u0a88\u0a89\u0005\u02f9\u0000\u0000\u0a89\u0a8a\u0005"+
		"\u0124\u0000\u0000\u0a8a\u0a8b\u0005\u0318\u0000\u0000\u0a8b\u0a8d\u0003"+
		"\u01d0\u00e8\u0000\u0a8c\u0a88\u0001\u0000\u0000\u0000\u0a8c\u0a8d\u0001"+
		"\u0000\u0000\u0000\u0a8d\u0a90\u0001\u0000\u0000\u0000\u0a8e\u0a8f\u0005"+
		"\u02f9\u0000\u0000\u0a8f\u0a91\u0005\u02cb\u0000\u0000\u0a90\u0a8e\u0001"+
		"\u0000\u0000\u0000\u0a90\u0a91\u0001\u0000\u0000\u0000\u0a91\u0a94\u0001"+
		"\u0000\u0000\u0000\u0a92\u0a93\u0005\u02f9\u0000\u0000\u0a93\u0a95\u0005"+
		"\u02cc\u0000\u0000\u0a94\u0a92\u0001\u0000\u0000\u0000\u0a94\u0a95\u0001"+
		"\u0000\u0000\u0000\u0a95\u0a96\u0001\u0000\u0000\u0000\u0a96\u0a97\u0005"+
		"\u0300\u0000\u0000\u0a97\u0099\u0001\u0000\u0000\u0000\u0a98\u0a99\u0005"+
		"\u0184\u0000\u0000\u0a99\u0a9a\u0005\u0306\u0000\u0000\u0a9a\u0aa1\u0003"+
		"\u0208\u0104\u0000\u0a9b\u0a9c\u0005\u02ff\u0000\u0000\u0a9c\u0a9d\u0003"+
		"\u0208\u0104\u0000\u0a9d\u0a9e\u0005\u02f9\u0000\u0000\u0a9e\u0a9f\u0003"+
		"\u0208\u0104\u0000\u0a9f\u0aa0\u0005\u0300\u0000\u0000\u0aa0\u0aa2\u0001"+
		"\u0000\u0000\u0000\u0aa1\u0a9b\u0001\u0000\u0000\u0000\u0aa1\u0aa2\u0001"+
		"\u0000\u0000\u0000\u0aa2\u0ab7\u0001\u0000\u0000\u0000\u0aa3\u0aa4\u0005"+
		"\u00ee\u0000\u0000\u0aa4\u0aad\u0005\u0306\u0000\u0000\u0aa5\u0aa6\u0005"+
		"\u02ff\u0000\u0000\u0aa6\u0aa9\u0003\u0208\u0104\u0000\u0aa7\u0aa8\u0005"+
		"\u02f9\u0000\u0000\u0aa8\u0aaa\u0003\u0208\u0104\u0000\u0aa9\u0aa7\u0001"+
		"\u0000\u0000\u0000\u0aa9\u0aaa\u0001\u0000\u0000\u0000\u0aaa\u0aab\u0001"+
		"\u0000\u0000\u0000\u0aab\u0aac\u0005\u0300\u0000\u0000\u0aac\u0aae\u0001"+
		"\u0000\u0000\u0000\u0aad\u0aa5\u0001\u0000\u0000\u0000\u0aad\u0aae\u0001"+
		"\u0000\u0000\u0000\u0aae\u0aaf\u0001\u0000\u0000\u0000\u0aaf\u0ab0\u0003"+
		"\u0208\u0104\u0000\u0ab0\u0ab1\u0005\u02ff\u0000\u0000\u0ab1\u0ab2\u0003"+
		"\u01de\u00ef\u0000\u0ab2\u0ab3\u0005\u0300\u0000\u0000\u0ab3\u0ab7\u0001"+
		"\u0000\u0000\u0000\u0ab4\u0ab5\u0005\u0229\u0000\u0000\u0ab5\u0ab7\u0003"+
		"\u0208\u0104\u0000\u0ab6\u0a98\u0001\u0000\u0000\u0000\u0ab6\u0aa3\u0001"+
		"\u0000\u0000\u0000\u0ab6\u0ab4\u0001\u0000\u0000\u0000\u0ab7\u009b\u0001"+
		"\u0000\u0000\u0000\u0ab8\u0ab9\u0005~\u0000\u0000\u0ab9\u0aba\u0005\u0184"+
		"\u0000\u0000\u0aba\u0abb\u0005Q\u0000\u0000\u0abb\u0abd\u0003\u0208\u0104"+
		"\u0000\u0abc\u0abe\u0005\u009b\u0000\u0000\u0abd\u0abc\u0001\u0000\u0000"+
		"\u0000\u0abd\u0abe\u0001\u0000\u0000\u0000\u0abe\u0abf\u0001\u0000\u0000"+
		"\u0000\u0abf\u0ac0\u0005\u00e3\u0000\u0000\u0ac0\u0ac1\u0005\u025c\u0000"+
		"\u0000\u0ac1\u0ac2\u0003\u0208\u0104\u0000\u0ac2\u0ac3\u0005\u0272\u0000"+
		"\u0000\u0ac3\u0ac6\u0003\u01e0\u00f0\u0000\u0ac4\u0ac5\u0005\u02cd\u0000"+
		"\u0000\u0ac5\u0ac7\u0003\u0208\u0104\u0000\u0ac6\u0ac4\u0001\u0000\u0000"+
		"\u0000\u0ac6\u0ac7\u0001\u0000\u0000\u0000\u0ac7\u0ac8\u0001\u0000\u0000"+
		"\u0000\u0ac8\u0ac9\u0005\u001b\u0000\u0000\u0ac9\u0ace\u0003\u009aM\u0000"+
		"\u0aca\u0acb\u0005\u02f9\u0000\u0000\u0acb\u0acd\u0003\u009aM\u0000\u0acc"+
		"\u0aca\u0001\u0000\u0000\u0000\u0acd\u0ad0\u0001\u0000\u0000\u0000\u0ace"+
		"\u0acc\u0001\u0000\u0000\u0000\u0ace\u0acf\u0001\u0000\u0000\u0000\u0acf"+
		"\u009d\u0001\u0000\u0000\u0000\u0ad0\u0ace\u0001\u0000\u0000\u0000\u0ad1"+
		"\u0ad2\u0005~\u0000\u0000\u0ad2\u0ad3\u0005\u0184\u0000\u0000\u0ad3\u0ad4"+
		"\u0005\u02cd\u0000\u0000\u0ad4\u0ad5\u0003\u0208\u0104\u0000\u0ad5\u0ad6"+
		"\u0005\u0272\u0000\u0000\u0ad6\u0ad7\u0003\u01e0\u00f0\u0000\u0ad7\u009f"+
		"\u0001\u0000\u0000\u0000\u0ad8\u0ad9\u0005~\u0000\u0000\u0ad9\u0ada\u0005"+
		"\u02ce\u0000\u0000\u0ada\u0adb\u0003\u0208\u0104\u0000\u0adb\u0adc\u0005"+
		"\u0180\u0000\u0000\u0adc\u0adf\u0003\u0208\u0104\u0000\u0add\u0ade\u0005"+
		"\u00e3\u0000\u0000\u0ade\u0ae0\u0007\n\u0000\u0000\u0adf\u0add\u0001\u0000"+
		"\u0000\u0000\u0adf\u0ae0\u0001\u0000\u0000\u0000\u0ae0\u0ae3\u0001\u0000"+
		"\u0000\u0000\u0ae1\u0ae2\u0005\u0247\u0000\u0000\u0ae2\u0ae4\u0003\u01fe"+
		"\u00ff\u0000\u0ae3\u0ae1\u0001\u0000\u0000\u0000\u0ae3\u0ae4\u0001\u0000"+
		"\u0000\u0000\u0ae4\u0aea\u0001\u0000\u0000\u0000\u0ae5\u0ae6\u0005\u0272"+
		"\u0000\u0000\u0ae6\u0ae7\u0005\u02ff\u0000\u0000\u0ae7\u0ae8\u0003\u01f0"+
		"\u00f8\u0000\u0ae8\u0ae9\u0005\u0300\u0000\u0000\u0ae9\u0aeb\u0001\u0000"+
		"\u0000\u0000\u0aea\u0ae5\u0001\u0000\u0000\u0000\u0aea\u0aeb\u0001\u0000"+
		"\u0000\u0000\u0aeb\u0af2\u0001\u0000\u0000\u0000\u0aec\u0aed\u0005\u0287"+
		"\u0000\u0000\u0aed\u0aee\u0005N\u0000\u0000\u0aee\u0aef\u0005\u02ff\u0000"+
		"\u0000\u0aef\u0af0\u0003\u01f0\u00f8\u0000\u0af0\u0af1\u0005\u0300\u0000"+
		"\u0000\u0af1\u0af3\u0001\u0000\u0000\u0000\u0af2\u0aec\u0001\u0000\u0000"+
		"\u0000\u0af2\u0af3\u0001\u0000\u0000\u0000\u0af3\u00a1\u0001\u0000\u0000"+
		"\u0000\u0af4\u0af5\u0005~\u0000\u0000\u0af5\u0af6\u0005\u01e5\u0000\u0000"+
		"\u0af6\u0b25\u0003\u01fe\u00ff\u0000\u0af7\u0af9\u0005\u0287\u0000\u0000"+
		"\u0af8\u0af7\u0001\u0000\u0000\u0000\u0af8\u0af9\u0001\u0000\u0000\u0000"+
		"\u0af9\u0b21\u0001\u0000\u0000\u0000\u0afa\u0b22\u0005\u0290\u0000\u0000"+
		"\u0afb\u0b22\u0005\u0291\u0000\u0000\u0afc\u0b22\u0005\u007f\u0000\u0000"+
		"\u0afd\u0b22\u0005\u0168\u0000\u0000\u0afe\u0b22\u0005\u0292\u0000\u0000"+
		"\u0aff\u0b22\u0005\u0293\u0000\u0000\u0b00\u0b22\u0005\u0294\u0000\u0000"+
		"\u0b01\u0b22\u0005\u0295\u0000\u0000\u0b02\u0b22\u0005\u0296\u0000\u0000"+
		"\u0b03\u0b22\u0005\u0297\u0000\u0000\u0b04\u0b22\u0005\u0298\u0000\u0000"+
		"\u0b05\u0b22\u0005\u0299\u0000\u0000\u0b06\u0b22\u0005\u029a\u0000\u0000"+
		"\u0b07\u0b22\u0005\u029b\u0000\u0000\u0b08\u0b09\u0005k\u0000\u0000\u0b09"+
		"\u0b0a\u0005\u0136\u0000\u0000\u0b0a\u0b22\u0003\u01b4\u00da\u0000\u0b0b"+
		"\u0b0d\u0005\u00c5\u0000\u0000\u0b0c\u0b0b\u0001\u0000\u0000\u0000\u0b0c"+
		"\u0b0d\u0001\u0000\u0000\u0000\u0b0d\u0b0e\u0001\u0000\u0000\u0000\u0b0e"+
		"\u0b0f\u0005\u01a1\u0000\u0000\u0b0f\u0b22\u0007\t\u0000\u0000\u0b10\u0b11"+
		"\u0005\u0274\u0000\u0000\u0b11\u0b12\u0005\u0269\u0000\u0000\u0b12\u0b22"+
		"\u0005\u0309\u0000\u0000\u0b13\u0b14\u0005\u0109\u0000\u0000\u0b14\u0b15"+
		"\u0005\u01e5\u0000\u0000\u0b15\u0b22\u0003\u01d2\u00e9\u0000\u0b16\u0b17"+
		"\u0005\u0109\u0000\u0000\u0b17\u0b18\u0005\u00fa\u0000\u0000\u0b18\u0b22"+
		"\u0003\u01d2\u00e9\u0000\u0b19\u0b1a\u0005\u01e5\u0000\u0000\u0b1a\u0b22"+
		"\u0003\u01d2\u00e9\u0000\u0b1b\u0b1c\u0005\f\u0000\u0000\u0b1c\u0b22\u0003"+
		"\u01d2\u00e9\u0000\u0b1d\u0b1e\u0005\u026d\u0000\u0000\u0b1e\u0b22\u0003"+
		"\u01d2\u00e9\u0000\u0b1f\u0b20\u0005\u0234\u0000\u0000\u0b20\u0b22\u0005"+
		"\u0306\u0000\u0000\u0b21\u0afa\u0001\u0000\u0000\u0000\u0b21\u0afb\u0001"+
		"\u0000\u0000\u0000\u0b21\u0afc\u0001\u0000\u0000\u0000\u0b21\u0afd\u0001"+
		"\u0000\u0000\u0000\u0b21\u0afe\u0001\u0000\u0000\u0000\u0b21\u0aff\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b00\u0001\u0000\u0000\u0000\u0b21\u0b01\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b02\u0001\u0000\u0000\u0000\u0b21\u0b03\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b04\u0001\u0000\u0000\u0000\u0b21\u0b05\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b06\u0001\u0000\u0000\u0000\u0b21\u0b07\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b08\u0001\u0000\u0000\u0000\u0b21\u0b0c\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b10\u0001\u0000\u0000\u0000\u0b21\u0b13\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b16\u0001\u0000\u0000\u0000\u0b21\u0b19\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b1b\u0001\u0000\u0000\u0000\u0b21\u0b1d\u0001"+
		"\u0000\u0000\u0000\u0b21\u0b1f\u0001\u0000\u0000\u0000\u0b22\u0b23\u0001"+
		"\u0000\u0000\u0000\u0b23\u0b21\u0001\u0000\u0000\u0000\u0b23\u0b24\u0001"+
		"\u0000\u0000\u0000\u0b24\u0b26\u0001\u0000\u0000\u0000\u0b25\u0af8\u0001"+
		"\u0000\u0000\u0000\u0b25\u0b26\u0001\u0000\u0000\u0000\u0b26\u00a3\u0001"+
		"\u0000\u0000\u0000\u0b27\u0b28\u0007\u000b\u0000\u0000\u0b28\u00a5\u0001"+
		"\u0000\u0000\u0000\u0b29\u0b2c\u0005~\u0000\u0000\u0b2a\u0b2b\u0005\u0187"+
		"\u0000\u0000\u0b2b\u0b2d\u0005\u01d6\u0000\u0000\u0b2c\u0b2a\u0001\u0000"+
		"\u0000\u0000\u0b2c\u0b2d\u0001\u0000\u0000\u0000\u0b2d\u0b2e\u0001\u0000"+
		"\u0000\u0000\u0b2e\u0b2f\u0005\u01f0\u0000\u0000\u0b2f\u0b30\u0003\u01d0"+
		"\u00e8\u0000\u0b30\u0b31\u0005\u001b\u0000\u0000\u0b31\u0b32\u0005\u0180"+
		"\u0000\u0000\u0b32\u0b33\u0003\u00a4R\u0000\u0b33\u0b34\u0005\u0247\u0000"+
		"\u0000\u0b34\u0b37\u0003\u0208\u0104\u0000\u0b35\u0b36\u0005\u0284\u0000"+
		"\u0000\u0b36\u0b38\u0003\u01f0\u00f8\u0000\u0b37\u0b35\u0001\u0000\u0000"+
		"\u0000\u0b37\u0b38\u0001\u0000\u0000\u0000\u0b38\u0b39\u0001\u0000\u0000"+
		"\u0000\u0b39\u0b3b\u0005\u00b9\u0000\u0000\u0b3a\u0b3c\u0007\f\u0000\u0000"+
		"\u0b3b\u0b3a\u0001\u0000\u0000\u0000\u0b3b\u0b3c\u0001\u0000\u0000\u0000"+
		"\u0b3c\u0b3f\u0001\u0000\u0000\u0000\u0b3d\u0b40\u0005\u016e\u0000\u0000"+
		"\u0b3e\u0b40\u0003\u0208\u0104\u0000\u0b3f\u0b3d\u0001\u0000\u0000\u0000"+
		"\u0b3f\u0b3e\u0001\u0000\u0000\u0000\u0b40\u00a7\u0001\u0000\u0000\u0000"+
		"\u0b41\u0b42\u0005~\u0000\u0000\u0b42\u0b43\u0005\u01f3\u0000\u0000\u0b43"+
		"\u0b46\u0003\u0208\u0104\u0000\u0b44\u0b45\u0005%\u0000\u0000\u0b45\u0b47"+
		"\u0003\u01fe\u00ff\u0000\u0b46\u0b44\u0001\u0000\u0000\u0000\u0b46\u0b47"+
		"\u0001\u0000\u0000\u0000\u0b47\u0b49\u0001\u0000\u0000\u0000\u0b48\u0b4a"+
		"\u0003\u020a\u0105\u0000\u0b49\u0b48\u0001\u0000\u0000\u0000\u0b49\u0b4a"+
		"\u0001\u0000\u0000\u0000\u0b4a\u0b64\u0001\u0000\u0000\u0000\u0b4b\u0b4c"+
		"\u0005~\u0000\u0000\u0b4c\u0b4d\u0005\u01f3\u0000\u0000\u0b4d\u0b4e\u0005"+
		"%\u0000\u0000\u0b4e\u0b50\u0003\u01fe\u00ff\u0000\u0b4f\u0b51\u0003\u020a"+
		"\u0105\u0000\u0b50\u0b4f\u0001\u0000\u0000\u0000\u0b50\u0b51\u0001\u0000"+
		"\u0000\u0000\u0b51\u0b64\u0001\u0000\u0000\u0000\u0b52\u0b53\u0005~\u0000"+
		"\u0000\u0b53\u0b54\u0005\u01f3\u0000\u0000\u0b54\u0b55\u0005\u02b3\u0000"+
		"\u0000\u0b55\u0b56\u0005\u016d\u0000\u0000\u0b56\u0b57\u0005\u00d3\u0000"+
		"\u0000\u0b57\u0b5a\u0003\u0208\u0104\u0000\u0b58\u0b59\u0005%\u0000\u0000"+
		"\u0b59\u0b5b\u0003\u01fe\u00ff\u0000\u0b5a\u0b58\u0001\u0000\u0000\u0000"+
		"\u0b5a\u0b5b\u0001\u0000\u0000\u0000\u0b5b\u0b64\u0001\u0000\u0000\u0000"+
		"\u0b5c\u0b5d\u0005~\u0000\u0000\u0b5d\u0b5e\u0005\u01f3\u0000\u0000\u0b5e"+
		"\u0b5f\u0005\u02b3\u0000\u0000\u0b5f\u0b60\u0005\u016d\u0000\u0000\u0b60"+
		"\u0b61\u0005\u00d3\u0000\u0000\u0b61\u0b62\u0005%\u0000\u0000\u0b62\u0b64"+
		"\u0003\u01fe\u00ff\u0000\u0b63\u0b41\u0001\u0000\u0000\u0000\u0b63\u0b4b"+
		"\u0001\u0000\u0000\u0000\u0b63\u0b52\u0001\u0000\u0000\u0000\u0b63\u0b5c"+
		"\u0001\u0000\u0000\u0000\u0b64\u00a9\u0001\u0000\u0000\u0000\u0b65\u0b67"+
		"\u0005~\u0000\u0000\u0b66\u0b68\u0007\r\u0000\u0000\u0b67\u0b66\u0001"+
		"\u0000\u0000\u0000\u0b67\u0b68\u0001\u0000\u0000\u0000\u0b68\u0b69\u0001"+
		"\u0000\u0000\u0000\u0b69\u0b6d\u0005\u0201\u0000\u0000\u0b6a\u0b6b\u0005"+
		"\u02b3\u0000\u0000\u0b6b\u0b6c\u0005\u016d\u0000\u0000\u0b6c\u0b6e\u0005"+
		"\u00d3\u0000\u0000\u0b6d\u0b6a\u0001\u0000\u0000\u0000\u0b6d\u0b6e\u0001"+
		"\u0000\u0000\u0000\u0b6e\u0b6f\u0001\u0000\u0000\u0000\u0b6f\u0b75\u0003"+
		"\u0208\u0104\u0000\u0b70\u0b72\u0005\u010b\u0000\u0000\u0b71\u0b73\u0005"+
		"6\u0000\u0000\u0b72\u0b71\u0001\u0000\u0000\u0000\u0b72\u0b73\u0001\u0000"+
		"\u0000\u0000\u0b73\u0b74\u0001\u0000\u0000\u0000\u0b74\u0b76\u0003\u01b4"+
		"\u00da\u0000\u0b75\u0b70\u0001\u0000\u0000\u0000\u0b75\u0b76\u0001\u0000"+
		"\u0000\u0000\u0b76\u0b7b\u0001\u0000\u0000\u0000\u0b77\u0b78\u0005\u0153"+
		"\u0000\u0000\u0b78\u0b7c\u0003\u01b4\u00da\u0000\u0b79\u0b7a\u0005\u0167"+
		"\u0000\u0000\u0b7a\u0b7c\u0005\u0153\u0000\u0000\u0b7b\u0b77\u0001\u0000"+
		"\u0000\u0000\u0b7b\u0b79\u0001\u0000\u0000\u0000\u0b7b\u0b7c\u0001\u0000"+
		"\u0000\u0000\u0b7c\u0b81\u0001\u0000\u0000\u0000\u0b7d\u0b7e\u0005\u014a"+
		"\u0000\u0000\u0b7e\u0b82\u0003\u01b4\u00da\u0000\u0b7f\u0b80\u0005\u0167"+
		"\u0000\u0000\u0b80\u0b82\u0005\u014a\u0000\u0000\u0b81\u0b7d\u0001\u0000"+
		"\u0000\u0000\u0b81\u0b7f\u0001\u0000\u0000\u0000\u0b81\u0b82\u0001\u0000"+
		"\u0000\u0000\u0b82\u0b88\u0001\u0000\u0000\u0000\u0b83\u0b85\u0005\u0220"+
		"\u0000\u0000\u0b84\u0b86\u0005\u0287\u0000\u0000\u0b85\u0b84\u0001\u0000"+
		"\u0000\u0000\u0b85\u0b86\u0001\u0000\u0000\u0000\u0b86\u0b87\u0001\u0000"+
		"\u0000\u0000\u0b87\u0b89\u0003\u01b4\u00da\u0000\u0b88\u0b83\u0001\u0000"+
		"\u0000\u0000\u0b88\u0b89\u0001\u0000\u0000\u0000\u0b89\u0b8c\u0001\u0000"+
		"\u0000\u0000\u0b8a\u0b8b\u00058\u0000\u0000\u0b8b\u0b8d\u0003\u01b4\u00da"+
		"\u0000\u0b8c\u0b8a\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0001\u0000\u0000"+
		"\u0000\u0b8d\u0b92\u0001\u0000\u0000\u0000\u0b8e\u0b90\u0005\u0167\u0000"+
		"\u0000\u0b8f\u0b8e\u0001\u0000\u0000\u0000\u0b8f\u0b90\u0001\u0000\u0000"+
		"\u0000\u0b90\u0b91\u0001\u0000\u0000\u0000\u0b91\u0b93\u0005\u0090\u0000"+
		"\u0000\u0b92\u0b8f\u0001\u0000\u0000\u0000\u0b92\u0b93\u0001\u0000\u0000"+
		"\u0000\u0b93\u0b9d\u0001\u0000\u0000\u0000\u0b94\u0b95\u0005\u02cf\u0000"+
		"\u0000\u0b95\u0b9b\u00056\u0000\u0000\u0b96\u0b97\u0003\u0208\u0104\u0000"+
		"\u0b97\u0b98\u0005\u0308\u0000\u0000\u0b98\u0b99\u0003\u0208\u0104\u0000"+
		"\u0b99\u0b9c\u0001\u0000\u0000\u0000\u0b9a\u0b9c\u0005\u016a\u0000\u0000"+
		"\u0b9b\u0b96\u0001\u0000\u0000\u0000\u0b9b\u0b9a\u0001\u0000\u0000\u0000"+
		"\u0b9c\u0b9e\u0001\u0000\u0000\u0000\u0b9d\u0b94\u0001\u0000\u0000\u0000"+
		"\u0b9d\u0b9e\u0001\u0000\u0000\u0000\u0b9e\u00ab\u0001\u0000\u0000\u0000"+
		"\u0b9f\u0ba0\u0003\u020c\u0106\u0000\u0ba0\u00ad\u0001\u0000\u0000\u0000"+
		"\u0ba1\u0ba2\u0003\u020c\u0106\u0000\u0ba2\u00af\u0001\u0000\u0000\u0000"+
		"\u0ba3\u0ba4\u0003\u020c\u0106\u0000\u0ba4\u00b1\u0001\u0000\u0000\u0000"+
		"\u0ba5\u0ba6\u0003\u020c\u0106\u0000\u0ba6\u00b3\u0001\u0000\u0000\u0000"+
		"\u0ba7\u0ba8\u0003\u020c\u0106\u0000\u0ba8\u00b5\u0001\u0000\u0000\u0000"+
		"\u0ba9\u0baa\u0003\u020c\u0106\u0000\u0baa\u00b7\u0001\u0000\u0000\u0000"+
		"\u0bab\u0bac\u0003\u020c\u0106\u0000\u0bac\u00b9\u0001\u0000\u0000\u0000"+
		"\u0bad\u0bae\u0003\u020c\u0106\u0000\u0bae\u00bb\u0001\u0000\u0000\u0000"+
		"\u0baf\u0bb0\u0003\u020c\u0106\u0000\u0bb0\u00bd\u0001\u0000\u0000\u0000"+
		"\u0bb1\u0bb2\u0003\u020c\u0106\u0000\u0bb2\u00bf\u0001\u0000\u0000\u0000"+
		"\u0bb3\u0bb4\u0003\u020c\u0106\u0000\u0bb4\u00c1\u0001\u0000\u0000\u0000"+
		"\u0bb5\u0bb6\u0003\u020c\u0106\u0000\u0bb6\u00c3\u0001\u0000\u0000\u0000"+
		"\u0bb7\u0bb8\u0003\u020c\u0106\u0000\u0bb8\u00c5\u0001\u0000\u0000\u0000"+
		"\u0bb9\u0bba\u0003\u020c\u0106\u0000\u0bba\u00c7\u0001\u0000\u0000\u0000"+
		"\u0bbb\u0bbc\u0003\u020c\u0106\u0000\u0bbc\u00c9\u0001\u0000\u0000\u0000"+
		"\u0bbd\u0bc0\u0005~\u0000\u0000\u0bbe\u0bbf\u0005\u0187\u0000\u0000\u0bbf"+
		"\u0bc1\u0005\u01d6\u0000\u0000\u0bc0\u0bbe\u0001\u0000\u0000\u0000\u0bc0"+
		"\u0bc1\u0001\u0000\u0000\u0000\u0bc1\u0bc3\u0001\u0000\u0000\u0000\u0bc2"+
		"\u0bc4\u0007\r\u0000\u0000\u0bc3\u0bc2\u0001\u0000\u0000\u0000\u0bc3\u0bc4"+
		"\u0001\u0000\u0000\u0000\u0bc4\u0bc6\u0001\u0000\u0000\u0000\u0bc5\u0bc7"+
		"\u0005\u01c3\u0000\u0000\u0bc6\u0bc5\u0001\u0000\u0000\u0000\u0bc6\u0bc7"+
		"\u0001\u0000\u0000\u0000\u0bc7\u0bc8\u0001\u0000\u0000\u0000\u0bc8\u0bc9"+
		"\u0005\u0280\u0000\u0000\u0bc9\u0bce\u0003\u01d0\u00e8\u0000\u0bca\u0bcb"+
		"\u0005\u02ff\u0000\u0000\u0bcb\u0bcc\u0003\u01d2\u00e9\u0000\u0bcc\u0bcd"+
		"\u0005\u0300\u0000\u0000\u0bcd\u0bcf\u0001\u0000\u0000\u0000\u0bce\u0bca"+
		"\u0001\u0000\u0000\u0000\u0bce\u0bcf\u0001\u0000\u0000\u0000\u0bcf\u0bd5"+
		"\u0001\u0000\u0000\u0000\u0bd0\u0bd1\u0005\u0287\u0000\u0000\u0bd1\u0bd2"+
		"\u0005\u02ff\u0000\u0000\u0bd2\u0bd3\u0003\u01d8\u00ec\u0000\u0bd3\u0bd4"+
		"\u0005\u0300\u0000\u0000\u0bd4\u0bd6\u0001\u0000\u0000\u0000\u0bd5\u0bd0"+
		"\u0001\u0000\u0000\u0000\u0bd5\u0bd6\u0001\u0000\u0000\u0000\u0bd6\u0bd7"+
		"\u0001\u0000\u0000\u0000\u0bd7\u0bda\u0005\u001b\u0000\u0000\u0bd8\u0bdb"+
		"\u0003\u0158\u00ac\u0000\u0bd9\u0bdb\u0003\u017c\u00be\u0000\u0bda\u0bd8"+
		"\u0001\u0000\u0000\u0000\u0bda\u0bd9\u0001\u0000\u0000\u0000\u0bdb\u0be2"+
		"\u0001\u0000\u0000\u0000\u0bdc\u0bde\u0005\u0287\u0000\u0000\u0bdd\u0bdf"+
		"\u0007\u000e\u0000\u0000\u0bde\u0bdd\u0001\u0000\u0000\u0000\u0bde\u0bdf"+
		"\u0001\u0000\u0000\u0000\u0bdf\u0be0\u0001\u0000\u0000\u0000\u0be0\u0be1"+
		"\u0005N\u0000\u0000\u0be1\u0be3\u0005\u0185\u0000\u0000\u0be2\u0bdc\u0001"+
		"\u0000\u0000\u0000\u0be2\u0be3\u0001\u0000\u0000\u0000\u0be3\u00cb\u0001"+
		"\u0000\u0000\u0000\u0be4\u0be5\u0003\u020c\u0106\u0000\u0be5\u00cd\u0001"+
		"\u0000\u0000\u0000\u0be6\u0be7\u0003\u020c\u0106\u0000\u0be7\u00cf\u0001"+
		"\u0000\u0000\u0000\u0be8\u0bea\u0003\u015c\u00ae\u0000\u0be9\u0be8\u0001"+
		"\u0000\u0000\u0000\u0be9\u0bea\u0001\u0000\u0000\u0000\u0bea\u0beb\u0001"+
		"\u0000\u0000\u0000\u0beb\u0bec\u0005\u00a3\u0000\u0000\u0bec\u0bee\u0005"+
		"\u00ec\u0000\u0000\u0bed\u0bef\u0005\u0181\u0000\u0000\u0bee\u0bed\u0001"+
		"\u0000\u0000\u0000\u0bee\u0bef\u0001\u0000\u0000\u0000\u0bef\u0bf0\u0001"+
		"\u0000\u0000\u0000\u0bf0\u0bf2\u0003\u01da\u00ed\u0000\u0bf1\u0bf3\u0005"+
		"\u02fe\u0000\u0000\u0bf2\u0bf1\u0001\u0000\u0000\u0000\u0bf2\u0bf3\u0001"+
		"\u0000\u0000\u0000\u0bf3\u0bf8\u0001\u0000\u0000\u0000\u0bf4\u0bf6\u0005"+
		"\u001b\u0000\u0000\u0bf5\u0bf4\u0001\u0000\u0000\u0000\u0bf5\u0bf6\u0001"+
		"\u0000\u0000\u0000\u0bf6\u0bf7\u0001\u0000\u0000\u0000\u0bf7\u0bf9\u0003"+
		"\u0212\u0109\u0000\u0bf8\u0bf5\u0001\u0000\u0000\u0000\u0bf8\u0bf9\u0001"+
		"\u0000\u0000\u0000\u0bf9\u0bfc\u0001\u0000\u0000\u0000\u0bfa\u0bfb\u0005"+
		"\u0272\u0000\u0000\u0bfb\u0bfd\u0003\u01d4\u00ea\u0000\u0bfc\u0bfa\u0001"+
		"\u0000\u0000\u0000\u0bfc\u0bfd\u0001\u0000\u0000\u0000\u0bfd\u0c03\u0001"+
		"\u0000\u0000\u0000\u0bfe\u0c04\u0003\u0182\u00c1\u0000\u0bff\u0c00\u0005"+
		"\u0284\u0000\u0000\u0c00\u0c01\u0005\u0085\u0000\u0000\u0c01\u0c02\u0005"+
		"\u017b\u0000\u0000\u0c02\u0c04\u0003\u0208\u0104\u0000\u0c03\u0bfe\u0001"+
		"\u0000\u0000\u0000\u0c03\u0bff\u0001\u0000\u0000\u0000\u0c03\u0c04\u0001"+
		"\u0000\u0000\u0000\u0c04\u0c06\u0001\u0000\u0000\u0000\u0c05\u0c07\u0003"+
		"\u01ae\u00d7\u0000\u0c06\u0c05\u0001\u0000\u0000\u0000\u0c06\u0c07\u0001"+
		"\u0000\u0000\u0000\u0c07\u00d1\u0001\u0000\u0000\u0000\u0c08\u0c09\u0005"+
		"\u00b5\u0000\u0000\u0c09\u0c0a\u0007\u000f\u0000\u0000\u0c0a\u00d3\u0001"+
		"\u0000\u0000\u0000\u0c0b\u0c35\u0003\u00d6k\u0000\u0c0c\u0c35\u0003\u00d8"+
		"l\u0000\u0c0d\u0c35\u0003\u00dam\u0000\u0c0e\u0c35\u0003\u00dcn\u0000"+
		"\u0c0f\u0c35\u0003\u00deo\u0000\u0c10\u0c35\u0003\u00e0p\u0000\u0c11\u0c35"+
		"\u0003\u00e2q\u0000\u0c12\u0c35\u0003\u00e4r\u0000\u0c13\u0c35\u0003\u00e6"+
		"s\u0000\u0c14\u0c35\u0003\u00e8t\u0000\u0c15\u0c35\u0003\u00eau\u0000"+
		"\u0c16\u0c35\u0003\u00ecv\u0000\u0c17\u0c35\u0003\u00eew\u0000\u0c18\u0c35"+
		"\u0003\u00f0x\u0000\u0c19\u0c35\u0003\u00f2y\u0000\u0c1a\u0c35\u0003\u00f4"+
		"z\u0000\u0c1b\u0c35\u0003\u00f6{\u0000\u0c1c\u0c35\u0003\u00f8|\u0000"+
		"\u0c1d\u0c35\u0003\u00fa}\u0000\u0c1e\u0c35\u0003\u00fc~\u0000\u0c1f\u0c35"+
		"\u0003\u00fe\u007f\u0000\u0c20\u0c35\u0003\u0100\u0080\u0000\u0c21\u0c35"+
		"\u0003\u0102\u0081\u0000\u0c22\u0c35\u0003\u0104\u0082\u0000\u0c23\u0c35"+
		"\u0003\u0106\u0083\u0000\u0c24\u0c35\u0003\u0108\u0084\u0000\u0c25\u0c35"+
		"\u0003\u010a\u0085\u0000\u0c26\u0c35\u0003\u010c\u0086\u0000\u0c27\u0c35"+
		"\u0003\u010e\u0087\u0000\u0c28\u0c35\u0003\u0110\u0088\u0000\u0c29\u0c35"+
		"\u0003\u0112\u0089\u0000\u0c2a\u0c35\u0003\u0114\u008a\u0000\u0c2b\u0c35"+
		"\u0003\u0116\u008b\u0000\u0c2c\u0c35\u0003\u0118\u008c\u0000\u0c2d\u0c35"+
		"\u0003\u011a\u008d\u0000\u0c2e\u0c35\u0003\u011c\u008e\u0000\u0c2f\u0c35"+
		"\u0003\u011e\u008f\u0000\u0c30\u0c35\u0003\u0120\u0090\u0000\u0c31\u0c35"+
		"\u0003\u0122\u0091\u0000\u0c32\u0c35\u0003\u0124\u0092\u0000\u0c33\u0c35"+
		"\u0003\u0126\u0093\u0000\u0c34\u0c0b\u0001\u0000\u0000\u0000\u0c34\u0c0c"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c0d\u0001\u0000\u0000\u0000\u0c34\u0c0e"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c0f\u0001\u0000\u0000\u0000\u0c34\u0c10"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c11\u0001\u0000\u0000\u0000\u0c34\u0c12"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c13\u0001\u0000\u0000\u0000\u0c34\u0c14"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c15\u0001\u0000\u0000\u0000\u0c34\u0c16"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c17\u0001\u0000\u0000\u0000\u0c34\u0c18"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c19\u0001\u0000\u0000\u0000\u0c34\u0c1a"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c1b\u0001\u0000\u0000\u0000\u0c34\u0c1c"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c1d\u0001\u0000\u0000\u0000\u0c34\u0c1e"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c1f\u0001\u0000\u0000\u0000\u0c34\u0c20"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c21\u0001\u0000\u0000\u0000\u0c34\u0c22"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c23\u0001\u0000\u0000\u0000\u0c34\u0c24"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c25\u0001\u0000\u0000\u0000\u0c34\u0c26"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c27\u0001\u0000\u0000\u0000\u0c34\u0c28"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c29\u0001\u0000\u0000\u0000\u0c34\u0c2a"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c2b\u0001\u0000\u0000\u0000\u0c34\u0c2c"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c2d\u0001\u0000\u0000\u0000\u0c34\u0c2e"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c2f\u0001\u0000\u0000\u0000\u0c34\u0c30"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c31\u0001\u0000\u0000\u0000\u0c34\u0c32"+
		"\u0001\u0000\u0000\u0000\u0c34\u0c33\u0001\u0000\u0000\u0000\u0c35\u00d5"+
		"\u0001\u0000\u0000\u0000\u0c36\u0c37\u0005\u00bc\u0000\u0000\u0c37\u0c38"+
		"\u0005\b\u0000\u0000\u0c38\u0c3b\u0005\u0150\u0000\u0000\u0c39\u0c3a\u0005"+
		"\u02b3\u0000\u0000\u0c3a\u0c3c\u0005\u00d3\u0000\u0000\u0c3b\u0c39\u0001"+
		"\u0000\u0000\u0000\u0c3b\u0c3c\u0001\u0000\u0000\u0000\u0c3c\u0c3d\u0001"+
		"\u0000\u0000\u0000\u0c3d\u0c3f\u0003\u0208\u0104\u0000\u0c3e\u0c40\u0007"+
		"\u0001\u0000\u0000\u0c3f\u0c3e\u0001\u0000\u0000\u0000\u0c3f\u0c40\u0001"+
		"\u0000\u0000\u0000\u0c40\u00d7\u0001\u0000\u0000\u0000\u0c41\u0c42\u0005"+
		"\u00bc\u0000\u0000\u0c42\u0c45\u0005\u000e\u0000\u0000\u0c43\u0c44\u0005"+
		"\u02b3\u0000\u0000\u0c44\u0c46\u0005\u00d3\u0000\u0000\u0c45\u0c43\u0001"+
		"\u0000\u0000\u0000\u0c45\u0c46\u0001\u0000\u0000\u0000\u0c46\u0c47\u0001"+
		"\u0000\u0000\u0000\u0c47\u0c48\u0003\u0208\u0104\u0000\u0c48\u0c49\u0005"+
		"\u02ff\u0000\u0000\u0c49\u0c4a\u0003\u01f2\u00f9\u0000\u0c4a\u0c4b\u0005"+
		"\u0300\u0000\u0000\u0c4b\u00d9\u0001\u0000\u0000\u0000\u0c4c\u0c4d\u0005"+
		"\u00bc\u0000\u0000\u0c4d\u0c50\u0005?\u0000\u0000\u0c4e\u0c4f\u0005\u02b3"+
		"\u0000\u0000\u0c4f\u0c51\u0005\u00d3\u0000\u0000\u0c50\u0c4e\u0001\u0000"+
		"\u0000\u0000\u0c50\u0c51\u0001\u0000\u0000\u0000\u0c51\u0c52\u0001\u0000"+
		"\u0000\u0000\u0c52\u0c53\u0005\u02ff\u0000\u0000\u0c53\u0c54\u0003\u01dc"+
		"\u00ee\u0000\u0c54\u0c55\u0005\u001b\u0000\u0000\u0c55\u0c56\u0003\u0208"+
		"\u0104\u0000\u0c56\u0c58\u0005\u0300\u0000\u0000\u0c57\u0c59\u0007\u0001"+
		"\u0000\u0000\u0c58\u0c57\u0001\u0000\u0000\u0000\u0c58\u0c59\u0001\u0000"+
		"\u0000\u0000\u0c59\u00db\u0001\u0000\u0000\u0000\u0c5a\u0c5b\u0005\u00bc"+
		"\u0000\u0000\u0c5b\u0c5e\u0005Y\u0000\u0000\u0c5c\u0c5d\u0005\u02b3\u0000"+
		"\u0000\u0c5d\u0c5f\u0005\u00d3\u0000\u0000\u0c5e\u0c5c\u0001\u0000\u0000"+
		"\u0000\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5f\u0c60\u0001\u0000\u0000"+
		"\u0000\u0c60\u0c62\u0003\u01d4\u00ea\u0000\u0c61\u0c63\u0007\u0001\u0000"+
		"\u0000\u0c62\u0c61\u0001\u0000\u0000\u0000\u0c62\u0c63\u0001\u0000\u0000"+
		"\u0000\u0c63\u00dd\u0001\u0000\u0000\u0000\u0c64\u0c65\u0005\u00bc\u0000"+
		"\u0000\u0c65\u0c68\u0005u\u0000\u0000\u0c66\u0c67\u0005\u02b3\u0000\u0000"+
		"\u0c67\u0c69\u0005\u00d3\u0000\u0000\u0c68\u0c66\u0001\u0000\u0000\u0000"+
		"\u0c68\u0c69\u0001\u0000\u0000\u0000\u0c69\u0c6a\u0001\u0000\u0000\u0000"+
		"\u0c6a\u0c6c\u0003\u0208\u0104\u0000\u0c6b\u0c6d\u0007\u0001\u0000\u0000"+
		"\u0c6c\u0c6b\u0001\u0000\u0000\u0000\u0c6c\u0c6d\u0001\u0000\u0000\u0000"+
		"\u0c6d\u00df\u0001\u0000\u0000\u0000\u0c6e\u0c6f\u0005\u00bc\u0000\u0000"+
		"\u0c6f\u0c72\u0005\u0092\u0000\u0000\u0c70\u0c71\u0005\u02b3\u0000\u0000"+
		"\u0c71\u0c73\u0005\u00d3\u0000\u0000\u0c72\u0c70\u0001\u0000\u0000\u0000"+
		"\u0c72\u0c73\u0001\u0000\u0000\u0000\u0c73\u0c74\u0001\u0000\u0000\u0000"+
		"\u0c74\u0c75\u0003\u0208\u0104\u0000\u0c75\u00e1\u0001\u0000\u0000\u0000"+
		"\u0c76\u0c77\u0005\u00bc\u0000\u0000\u0c77\u0c7a\u0005\u00ba\u0000\u0000"+
		"\u0c78\u0c79\u0005\u02b3\u0000\u0000\u0c79\u0c7b\u0005\u00d3\u0000\u0000"+
		"\u0c7a\u0c78\u0001\u0000\u0000\u0000\u0c7a\u0c7b\u0001\u0000\u0000\u0000"+
		"\u0c7b\u0c7c\u0001\u0000\u0000\u0000\u0c7c\u0c7e\u0003\u01d4\u00ea\u0000"+
		"\u0c7d\u0c7f\u0007\u0001\u0000\u0000\u0c7e\u0c7d\u0001\u0000\u0000\u0000"+
		"\u0c7e\u0c7f\u0001\u0000\u0000\u0000\u0c7f\u00e3\u0001\u0000\u0000\u0000"+
		"\u0c80\u0c81\u0005\u00bc\u0000\u0000\u0c81\u0c82\u0005\u02bb\u0000\u0000"+
		"\u0c82\u0c85\u0005\u0254\u0000\u0000\u0c83\u0c84\u0005\u02b3\u0000\u0000"+
		"\u0c84\u0c86\u0005\u00d3\u0000\u0000\u0c85\u0c83\u0001\u0000\u0000\u0000"+
		"\u0c85\u0c86\u0001\u0000\u0000\u0000\u0c86\u0c87\u0001\u0000\u0000\u0000"+
		"\u0c87\u0c89\u0003\u0208\u0104\u0000\u0c88\u0c8a\u0007\u0001\u0000\u0000"+
		"\u0c89\u0c88\u0001\u0000\u0000\u0000\u0c89\u0c8a\u0001\u0000\u0000\u0000"+
		"\u0c8a\u00e5\u0001\u0000\u0000\u0000\u0c8b\u0c8c\u0005\u00bc\u0000\u0000"+
		"\u0c8c\u0c8f\u0005\u00d7\u0000\u0000\u0c8d\u0c8e\u0005\u02b3\u0000\u0000"+
		"\u0c8e\u0c90\u0005\u00d3\u0000\u0000\u0c8f\u0c8d\u0001\u0000\u0000\u0000"+
		"\u0c8f\u0c90\u0001\u0000\u0000\u0000\u0c90\u0c91\u0001\u0000\u0000\u0000"+
		"\u0c91\u0c93\u0003\u01d4\u00ea\u0000\u0c92\u0c94\u0007\u0001\u0000\u0000"+
		"\u0c93\u0c92\u0001\u0000\u0000\u0000\u0c93\u0c94\u0001\u0000\u0000\u0000"+
		"\u0c94\u00e7\u0001\u0000\u0000\u0000\u0c95\u0c96\u0005\u00bc\u0000\u0000"+
		"\u0c96\u0c97\u0005\u00e5\u0000\u0000\u0c97\u0c98\u0005\u0091\u0000\u0000"+
		"\u0c98\u0c9b\u0005\u02bc\u0000\u0000\u0c99\u0c9a\u0005\u02b3\u0000\u0000"+
		"\u0c9a\u0c9c\u0005\u00d3\u0000\u0000\u0c9b\u0c99\u0001\u0000\u0000\u0000"+
		"\u0c9b\u0c9c\u0001\u0000\u0000\u0000\u0c9c\u0c9d\u0001\u0000\u0000\u0000"+
		"\u0c9d\u0c9f\u0003\u01d4\u00ea\u0000\u0c9e\u0ca0\u0007\u0001\u0000\u0000"+
		"\u0c9f\u0c9e\u0001\u0000\u0000\u0000\u0c9f\u0ca0\u0001\u0000\u0000\u0000"+
		"\u0ca0\u00e9\u0001\u0000\u0000\u0000\u0ca1\u0ca2\u0005\u00bc\u0000\u0000"+
		"\u0ca2\u0ca3\u0005\u00e5\u0000\u0000\u0ca3\u0ca6\u0005\u0237\u0000\u0000"+
		"\u0ca4\u0ca5\u0005\u02b3\u0000\u0000\u0ca5\u0ca7\u0005\u00d3\u0000\u0000"+
		"\u0ca6\u0ca4\u0001\u0000\u0000\u0000\u0ca6\u0ca7\u0001\u0000\u0000\u0000"+
		"\u0ca7\u0ca8\u0001\u0000\u0000\u0000\u0ca8\u0caa\u0003\u01d4\u00ea\u0000"+
		"\u0ca9\u0cab\u0007\u0001\u0000\u0000\u0caa\u0ca9\u0001\u0000\u0000\u0000"+
		"\u0caa\u0cab\u0001\u0000\u0000\u0000\u0cab\u00eb\u0001\u0000\u0000\u0000"+
		"\u0cac\u0cad\u0005\u00bc\u0000\u0000\u0cad\u0cb0\u0005\u00ee\u0000\u0000"+
		"\u0cae\u0caf\u0005\u02b3\u0000\u0000\u0caf\u0cb1\u0005\u00d3\u0000\u0000"+
		"\u0cb0\u0cae\u0001\u0000\u0000\u0000\u0cb0\u0cb1\u0001\u0000\u0000\u0000"+
		"\u0cb1\u0cb2\u0001\u0000\u0000\u0000\u0cb2\u0cb4\u0003\u01c6\u00e3\u0000"+
		"\u0cb3\u0cb5\u0007\u0001\u0000\u0000\u0cb4\u0cb3\u0001\u0000\u0000\u0000"+
		"\u0cb4\u0cb5\u0001\u0000\u0000\u0000\u0cb5\u00ed\u0001\u0000\u0000\u0000"+
		"\u0cb6\u0cb7\u0005\u00bc\u0000\u0000\u0cb7\u0cba\u0005\u00fa\u0000\u0000"+
		"\u0cb8\u0cb9\u0005\u02b3\u0000\u0000\u0cb9\u0cbb\u0005\u00d3\u0000\u0000"+
		"\u0cba\u0cb8\u0001\u0000\u0000\u0000\u0cba\u0cbb\u0001\u0000\u0000\u0000"+
		"\u0cbb\u0cbc\u0001\u0000\u0000\u0000\u0cbc\u0cbd\u0003\u01d4\u00ea\u0000"+
		"\u0cbd\u00ef\u0001\u0000\u0000\u0000\u0cbe\u0cbf\u0005\u00bc\u0000\u0000"+
		"\u0cbf\u0cc1\u0005\u010c\u0000\u0000\u0cc0\u0cc2\u0005\u02c4\u0000\u0000"+
		"\u0cc1\u0cc0\u0001\u0000\u0000\u0000\u0cc1\u0cc2\u0001\u0000\u0000\u0000"+
		"\u0cc2\u0cc5\u0001\u0000\u0000\u0000\u0cc3\u0cc4\u0005\u02b3\u0000\u0000"+
		"\u0cc4\u0cc6\u0005\u00d3\u0000\u0000\u0cc5\u0cc3\u0001\u0000\u0000\u0000"+
		"\u0cc5\u0cc6\u0001\u0000\u0000\u0000\u0cc6\u0cc7\u0001\u0000\u0000\u0000"+
		"\u0cc7\u0cc9\u0003\u01d2\u00e9\u0000\u0cc8\u0cca\u0007\u0001\u0000\u0000"+
		"\u0cc9\u0cc8\u0001\u0000\u0000\u0000\u0cc9\u0cca\u0001\u0000\u0000\u0000"+
		"\u0cca\u00f1\u0001\u0000\u0000\u0000\u0ccb\u0ccd\u0005\u00bc\u0000\u0000"+
		"\u0ccc\u0cce\u0005\u01b7\u0000\u0000\u0ccd\u0ccc\u0001\u0000\u0000\u0000"+
		"\u0ccd\u0cce\u0001\u0000\u0000\u0000\u0cce\u0ccf\u0001\u0000\u0000\u0000"+
		"\u0ccf\u0cd2\u0005\u012b\u0000\u0000\u0cd0\u0cd1\u0005\u02b3\u0000\u0000"+
		"\u0cd1\u0cd3\u0005\u00d3\u0000\u0000\u0cd2\u0cd0\u0001\u0000\u0000\u0000"+
		"\u0cd2\u0cd3\u0001\u0000\u0000\u0000\u0cd3\u0cd4\u0001\u0000\u0000\u0000"+
		"\u0cd4\u0cd6\u0003\u0208\u0104\u0000\u0cd5\u0cd7\u0007\u0001\u0000\u0000"+
		"\u0cd6\u0cd5\u0001\u0000\u0000\u0000\u0cd6\u0cd7\u0001\u0000\u0000\u0000"+
		"\u0cd7\u00f3\u0001\u0000\u0000\u0000\u0cd8\u0cd9\u0005\u00bc\u0000\u0000"+
		"\u0cd9\u0cda\u0005\u02c6\u0000\u0000\u0cda\u0cdd\u0005\u0280\u0000\u0000"+
		"\u0cdb\u0cdc\u0005\u02b3\u0000\u0000\u0cdc\u0cde\u0005\u00d3\u0000\u0000"+
		"\u0cdd\u0cdb\u0001\u0000\u0000\u0000\u0cdd\u0cde\u0001\u0000\u0000\u0000"+
		"\u0cde\u0cdf\u0001\u0000\u0000\u0000\u0cdf\u0ce1\u0003\u01d4\u00ea\u0000"+
		"\u0ce0\u0ce2\u0007\u0001\u0000\u0000\u0ce1\u0ce0\u0001\u0000\u0000\u0000"+
		"\u0ce1\u0ce2\u0001\u0000\u0000\u0000\u0ce2\u00f5\u0001\u0000\u0000\u0000"+
		"\u0ce3\u0ce4\u0003\u020c\u0106\u0000\u0ce4\u00f7\u0001\u0000\u0000\u0000"+
		"\u0ce5\u0ce6\u0005\u00bc\u0000\u0000\u0ce6\u0ce7\u0005\u0184\u0000\u0000"+
		"\u0ce7\u0cea\u0005Q\u0000\u0000\u0ce8\u0ce9\u0005\u02b3\u0000\u0000\u0ce9"+
		"\u0ceb\u0005\u00d3\u0000\u0000\u0cea\u0ce8\u0001\u0000\u0000\u0000\u0cea"+
		"\u0ceb\u0001\u0000\u0000\u0000\u0ceb\u0cec\u0001\u0000\u0000\u0000\u0cec"+
		"\u0ced\u0003\u0208\u0104\u0000\u0ced\u0cee\u0005\u0272\u0000\u0000\u0cee"+
		"\u0cf0\u0003\u01e0\u00f0\u0000\u0cef\u0cf1\u0007\u0001\u0000\u0000\u0cf0"+
		"\u0cef\u0001\u0000\u0000\u0000\u0cf0\u0cf1\u0001\u0000\u0000\u0000\u0cf1"+
		"\u00f9\u0001\u0000\u0000\u0000\u0cf2\u0cf3\u0005\u00bc\u0000\u0000\u0cf3"+
		"\u0cf4\u0005\u0184\u0000\u0000\u0cf4\u0cf7\u0005\u02cd\u0000\u0000\u0cf5"+
		"\u0cf6\u0005\u02b3\u0000\u0000\u0cf6\u0cf8\u0005\u00d3\u0000\u0000\u0cf7"+
		"\u0cf5\u0001\u0000\u0000\u0000\u0cf7\u0cf8\u0001\u0000\u0000\u0000\u0cf8"+
		"\u0cf9\u0001\u0000\u0000\u0000\u0cf9\u0cfa\u0003\u0208\u0104\u0000\u0cfa"+
		"\u0cfb\u0005\u0272\u0000\u0000\u0cfb\u0cfd\u0003\u01e0\u00f0\u0000\u0cfc"+
		"\u0cfe\u0007\u0001\u0000\u0000\u0cfd\u0cfc\u0001\u0000\u0000\u0000\u0cfd"+
		"\u0cfe\u0001\u0000\u0000\u0000\u0cfe\u00fb\u0001\u0000\u0000\u0000\u0cff"+
		"\u0d00\u0005\u00bc\u0000\u0000\u0d00\u0d01\u0005\u02cf\u0000\u0000\u0d01"+
		"\u0d02\u00056\u0000\u0000\u0d02\u0d04\u0003\u0200\u0100\u0000\u0d03\u0d05"+
		"\u0007\u0001\u0000\u0000\u0d04\u0d03\u0001\u0000\u0000\u0000\u0d04\u0d05"+
		"\u0001\u0000\u0000\u0000\u0d05\u00fd\u0001\u0000\u0000\u0000\u0d06\u0d07"+
		"\u0005\u00bc\u0000\u0000\u0d07\u0d0a\u0005\u02ce\u0000\u0000\u0d08\u0d09"+
		"\u0005\u02b3\u0000\u0000\u0d09\u0d0b\u0005\u00d3\u0000\u0000\u0d0a\u0d08"+
		"\u0001\u0000\u0000\u0000\u0d0a\u0d0b\u0001\u0000\u0000\u0000\u0d0b\u0d0c"+
		"\u0001\u0000\u0000\u0000\u0d0c\u0d0d\u0003\u0208\u0104\u0000\u0d0d\u0d0e"+
		"\u0005\u0180\u0000\u0000\u0d0e\u0d10\u0003\u0208\u0104\u0000\u0d0f\u0d11"+
		"\u0007\u0001\u0000\u0000\u0d10\u0d0f\u0001\u0000\u0000\u0000\u0d10\u0d11"+
		"\u0001\u0000\u0000\u0000\u0d11\u00ff\u0001\u0000\u0000\u0000\u0d12\u0d13"+
		"\u0005\u00bc\u0000\u0000\u0d13\u0d16\u0005\u01ba\u0000\u0000\u0d14\u0d15"+
		"\u0005\u02b3\u0000\u0000\u0d15\u0d17\u0005\u00d3\u0000\u0000\u0d16\u0d14"+
		"\u0001\u0000\u0000\u0000\u0d16\u0d17\u0001\u0000\u0000\u0000\u0d17\u0d18"+
		"\u0001\u0000\u0000\u0000\u0d18\u0d1a\u0003\u01d4\u00ea\u0000\u0d19\u0d1b"+
		"\u0007\u0001\u0000\u0000\u0d1a\u0d19\u0001\u0000\u0000\u0000\u0d1a\u0d1b"+
		"\u0001\u0000\u0000\u0000\u0d1b\u0101\u0001\u0000\u0000\u0000\u0d1c\u0d1d"+
		"\u0005\u00bc\u0000\u0000\u0d1d\u0d20\u0005\u01e5\u0000\u0000\u0d1e\u0d1f"+
		"\u0005\u02b3\u0000\u0000\u0d1f\u0d21\u0005\u00d3\u0000\u0000\u0d20\u0d1e"+
		"\u0001\u0000\u0000\u0000\u0d20\u0d21\u0001\u0000\u0000\u0000\u0d21\u0d22"+
		"\u0001\u0000\u0000\u0000\u0d22\u0d23\u0003\u01d4\u00ea\u0000\u0d23\u0103"+
		"\u0001\u0000\u0000\u0000\u0d24\u0d25\u0005\u00bc\u0000\u0000\u0d25\u0d28"+
		"\u0005\u01f0\u0000\u0000\u0d26\u0d27\u0005\u02b3\u0000\u0000\u0d27\u0d29"+
		"\u0005\u00d3\u0000\u0000\u0d28\u0d26\u0001\u0000\u0000\u0000\u0d28\u0d29"+
		"\u0001\u0000\u0000\u0000\u0d29\u0d2a\u0001\u0000\u0000\u0000\u0d2a\u0d2b"+
		"\u0003\u01d0\u00e8\u0000\u0d2b\u0d2c\u0005\u0180\u0000\u0000\u0d2c\u0d2e"+
		"\u0003\u0208\u0104\u0000\u0d2d\u0d2f\u0007\u0001\u0000\u0000\u0d2e\u0d2d"+
		"\u0001\u0000\u0000\u0000\u0d2e\u0d2f\u0001\u0000\u0000\u0000\u0d2f\u0105"+
		"\u0001\u0000\u0000\u0000\u0d30\u0d31\u0005\u00bc\u0000\u0000\u0d31\u0d34"+
		"\u0005\u01f3\u0000\u0000\u0d32\u0d33\u0005\u02b3\u0000\u0000\u0d33\u0d35"+
		"\u0005\u00d3\u0000\u0000\u0d34\u0d32\u0001\u0000\u0000\u0000\u0d34\u0d35"+
		"\u0001\u0000\u0000\u0000\u0d35\u0d36\u0001\u0000\u0000\u0000\u0d36\u0d38"+
		"\u0003\u01d4\u00ea\u0000\u0d37\u0d39\u0007\u0001\u0000\u0000\u0d38\u0d37"+
		"\u0001\u0000\u0000\u0000\u0d38\u0d39\u0001\u0000\u0000\u0000\u0d39\u0107"+
		"\u0001\u0000\u0000\u0000\u0d3a\u0d3b\u0005\u00bc\u0000\u0000\u0d3b\u0d3e"+
		"\u0005\u0201\u0000\u0000\u0d3c\u0d3d\u0005\u02b3\u0000\u0000\u0d3d\u0d3f"+
		"\u0005\u00d3\u0000\u0000\u0d3e\u0d3c\u0001\u0000\u0000\u0000\u0d3e\u0d3f"+
		"\u0001\u0000\u0000\u0000\u0d3f\u0d40\u0001\u0000\u0000\u0000\u0d40\u0d42"+
		"\u0003\u01d4\u00ea\u0000\u0d41\u0d43\u0007\u0001\u0000\u0000\u0d42\u0d41"+
		"\u0001\u0000\u0000\u0000\u0d42\u0d43\u0001\u0000\u0000\u0000\u0d43\u0109"+
		"\u0001\u0000\u0000\u0000\u0d44\u0d45\u0005\u00bc\u0000\u0000\u0d45\u0d48"+
		"\u0005\u02bd\u0000\u0000\u0d46\u0d47\u0005\u02b3\u0000\u0000\u0d47\u0d49"+
		"\u0005\u00d3\u0000\u0000\u0d48\u0d46\u0001\u0000\u0000\u0000\u0d48\u0d49"+
		"\u0001\u0000\u0000\u0000\u0d49\u0d4a\u0001\u0000\u0000\u0000\u0d4a\u0d4c"+
		"\u0003\u01d4\u00ea\u0000\u0d4b\u0d4d\u0007\u0001\u0000\u0000\u0d4c\u0d4b"+
		"\u0001\u0000\u0000\u0000\u0d4c\u0d4d\u0001\u0000\u0000\u0000\u0d4d\u010b"+
		"\u0001\u0000\u0000\u0000\u0d4e\u0d4f\u0005\u00bc\u0000\u0000\u0d4f\u0d52"+
		"\u0005\u0224\u0000\u0000\u0d50\u0d51\u0005\u02b3\u0000\u0000\u0d51\u0d53"+
		"\u0005\u00d3\u0000\u0000\u0d52\u0d50\u0001\u0000\u0000\u0000\u0d52\u0d53"+
		"\u0001\u0000\u0000\u0000\u0d53\u0d54\u0001\u0000\u0000\u0000\u0d54\u0d55"+
		"\u0003\u01d4\u00ea\u0000\u0d55\u010d\u0001\u0000\u0000\u0000\u0d56\u0d57"+
		"\u0005\u00bc\u0000\u0000\u0d57\u0d5a\u0005\u0230\u0000\u0000\u0d58\u0d59"+
		"\u0005\u02b3\u0000\u0000\u0d59\u0d5b\u0005\u00d3\u0000\u0000\u0d5a\u0d58"+
		"\u0001\u0000\u0000\u0000\u0d5a\u0d5b\u0001\u0000\u0000\u0000\u0d5b\u0d5c"+
		"\u0001\u0000\u0000\u0000\u0d5c\u0d5e\u0003\u0208\u0104\u0000\u0d5d\u0d5f"+
		"\u0007\u0001\u0000\u0000\u0d5e\u0d5d\u0001\u0000\u0000\u0000\u0d5e\u0d5f"+
		"\u0001\u0000\u0000\u0000\u0d5f\u010f\u0001\u0000\u0000\u0000\u0d60\u0d61"+
		"\u0005\u00bc\u0000\u0000\u0d61\u0d64\u0005\u0237\u0000\u0000\u0d62\u0d63"+
		"\u0005\u02b3\u0000\u0000\u0d63\u0d65\u0005\u00d3\u0000\u0000\u0d64\u0d62"+
		"\u0001\u0000\u0000\u0000\u0d64\u0d65\u0001\u0000\u0000\u0000\u0d65\u0d66"+
		"\u0001\u0000\u0000\u0000\u0d66\u0d68\u0003\u01d4\u00ea\u0000\u0d67\u0d69"+
		"\u0007\u0001\u0000\u0000\u0d68\u0d67\u0001\u0000\u0000\u0000\u0d68\u0d69"+
		"\u0001\u0000\u0000\u0000\u0d69\u0111\u0001\u0000\u0000\u0000\u0d6a\u0d6b"+
		"\u0005\u00bc\u0000\u0000\u0d6b\u0d6e\u0005\u023a\u0000\u0000\u0d6c\u0d6d"+
		"\u0005\u02b3\u0000\u0000\u0d6d\u0d6f\u0005\u00d3\u0000\u0000\u0d6e\u0d6c"+
		"\u0001\u0000\u0000\u0000\u0d6e\u0d6f\u0001\u0000\u0000\u0000\u0d6f\u0d70"+
		"\u0001\u0000\u0000\u0000\u0d70\u0d71\u0003\u0208\u0104\u0000\u0d71\u0113"+
		"\u0001\u0000\u0000\u0000\u0d72\u0d73\u0005\u00bc\u0000\u0000\u0d73\u0d74"+
		"\u0005\u02f0\u0000\u0000\u0d74\u0d75\u0005\u01fa\u0000\u0000\u0d75\u0d78"+
		"\u0005h\u0000\u0000\u0d76\u0d77\u0005\u02b3\u0000\u0000\u0d77\u0d79\u0005"+
		"\u00d3\u0000\u0000\u0d78\u0d76\u0001\u0000\u0000\u0000\u0d78\u0d79\u0001"+
		"\u0000\u0000\u0000\u0d79\u0d7a\u0001\u0000\u0000\u0000\u0d7a\u0d7c\u0003"+
		"\u0208\u0104\u0000\u0d7b\u0d7d\u0007\u0001\u0000\u0000\u0d7c\u0d7b\u0001"+
		"\u0000\u0000\u0000\u0d7c\u0d7d\u0001\u0000\u0000\u0000\u0d7d\u0115\u0001"+
		"\u0000\u0000\u0000\u0d7e\u0d7f\u0005\u00bc\u0000\u0000\u0d7f\u0d80\u0005"+
		"\u02f0\u0000\u0000\u0d80\u0d81\u0005\u01fa\u0000\u0000\u0d81\u0d84\u0005"+
		"\u00b2\u0000\u0000\u0d82\u0d83\u0005\u02b3\u0000\u0000\u0d83\u0d85\u0005"+
		"\u00d3\u0000\u0000\u0d84\u0d82\u0001\u0000\u0000\u0000\u0d84\u0d85\u0001"+
		"\u0000\u0000\u0000\u0d85\u0d86\u0001\u0000\u0000\u0000\u0d86\u0d88\u0003"+
		"\u0208\u0104\u0000\u0d87\u0d89\u0007\u0001\u0000\u0000\u0d88\u0d87\u0001"+
		"\u0000\u0000\u0000\u0d88\u0d89\u0001\u0000\u0000\u0000\u0d89\u0117\u0001"+
		"\u0000\u0000\u0000\u0d8a\u0d8b\u0005\u00bc\u0000\u0000\u0d8b\u0d8c\u0005"+
		"\u02f0\u0000\u0000\u0d8c\u0d8d\u0005\u01fa\u0000\u0000\u0d8d\u0d90\u0005"+
		"\u019d\u0000\u0000\u0d8e\u0d8f\u0005\u02b3\u0000\u0000\u0d8f\u0d91\u0005"+
		"\u00d3\u0000\u0000\u0d90\u0d8e\u0001\u0000\u0000\u0000\u0d90\u0d91\u0001"+
		"\u0000\u0000\u0000\u0d91\u0d92\u0001\u0000\u0000\u0000\u0d92\u0d94\u0003"+
		"\u0208\u0104\u0000\u0d93\u0d95\u0007\u0001\u0000\u0000\u0d94\u0d93\u0001"+
		"\u0000\u0000\u0000\u0d94\u0d95\u0001\u0000\u0000\u0000\u0d95\u0119\u0001"+
		"\u0000\u0000\u0000\u0d96\u0d97\u0005\u00bc\u0000\u0000\u0d97\u0d98\u0005"+
		"\u02f0\u0000\u0000\u0d98\u0d99\u0005\u01fa\u0000\u0000\u0d99\u0d9c\u0005"+
		"\u023c\u0000\u0000\u0d9a\u0d9b\u0005\u02b3\u0000\u0000\u0d9b\u0d9d\u0005"+
		"\u00d3\u0000\u0000\u0d9c\u0d9a\u0001\u0000\u0000\u0000\u0d9c\u0d9d\u0001"+
		"\u0000\u0000\u0000\u0d9d\u0d9e\u0001\u0000\u0000\u0000\u0d9e\u0da0\u0003"+
		"\u0208\u0104\u0000\u0d9f\u0da1\u0007\u0001\u0000\u0000\u0da0\u0d9f\u0001"+
		"\u0000\u0000\u0000\u0da0\u0da1\u0001\u0000\u0000\u0000\u0da1\u011b\u0001"+
		"\u0000\u0000\u0000\u0da2\u0da3\u0005\u00bc\u0000\u0000\u0da3\u0da6\u0005"+
		"\u024f\u0000\u0000\u0da4\u0da5\u0005\u02b3\u0000\u0000\u0da5\u0da7\u0005"+
		"\u00d3\u0000\u0000\u0da6\u0da4\u0001\u0000\u0000\u0000\u0da6\u0da7\u0001"+
		"\u0000\u0000\u0000\u0da7\u0da8\u0001\u0000\u0000\u0000\u0da8\u0da9\u0005"+
		"\u00e3\u0000\u0000\u0da9\u0daa\u0003\u0208\u0104\u0000\u0daa\u0dab\u0005"+
		"\u012b\u0000\u0000\u0dab\u0dac\u0003\u0208\u0104\u0000\u0dac\u0dad\u0007"+
		"\u0001\u0000\u0000\u0dad\u011d\u0001\u0000\u0000\u0000\u0dae\u0daf\u0005"+
		"\u00bc\u0000\u0000\u0daf\u0db2\u0005\u0254\u0000\u0000\u0db0\u0db1\u0005"+
		"\u02b3\u0000\u0000\u0db1\u0db3\u0005\u00d3\u0000\u0000\u0db2\u0db0\u0001"+
		"\u0000\u0000\u0000\u0db2\u0db3\u0001\u0000\u0000\u0000\u0db3\u0db4\u0001"+
		"\u0000\u0000\u0000\u0db4\u0db5\u0003\u0208\u0104\u0000\u0db5\u0db6\u0005"+
		"\u0180\u0000\u0000\u0db6\u0db8\u0003\u0208\u0104\u0000\u0db7\u0db9\u0007"+
		"\u0001\u0000\u0000\u0db8\u0db7\u0001\u0000\u0000\u0000\u0db8\u0db9\u0001"+
		"\u0000\u0000\u0000\u0db9\u011f\u0001\u0000\u0000\u0000\u0dba\u0dbb\u0005"+
		"\u00bc\u0000\u0000\u0dbb\u0dbe\u0005\u025c\u0000\u0000\u0dbc\u0dbd\u0005"+
		"\u02b3\u0000\u0000\u0dbd\u0dbf\u0005\u00d3\u0000\u0000\u0dbe\u0dbc\u0001"+
		"\u0000\u0000\u0000\u0dbe\u0dbf\u0001\u0000\u0000\u0000\u0dbf\u0dc0\u0001"+
		"\u0000\u0000\u0000\u0dc0\u0dc2\u0003\u01d4\u00ea\u0000\u0dc1\u0dc3\u0007"+
		"\u0001\u0000\u0000\u0dc2\u0dc1\u0001\u0000\u0000\u0000\u0dc2\u0dc3\u0001"+
		"\u0000\u0000\u0000\u0dc3\u0121\u0001\u0000\u0000\u0000\u0dc4\u0dc5\u0005"+
		"\u00bc\u0000\u0000\u0dc5\u0dc8\u0005\u026d\u0000\u0000\u0dc6\u0dc7\u0005"+
		"\u02b3\u0000\u0000\u0dc7\u0dc9\u0005\u00d3\u0000\u0000\u0dc8\u0dc6\u0001"+
		"\u0000\u0000\u0000\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9\u0dca\u0001"+
		"\u0000\u0000\u0000\u0dca\u0dcb\u0003\u01d4\u00ea\u0000\u0dcb\u0123\u0001"+
		"\u0000\u0000\u0000\u0dcc\u0dcd\u0005\u00bc\u0000\u0000\u0dcd\u0dce\u0005"+
		"\u026d\u0000\u0000\u0dce\u0dd1\u0005\u0145\u0000\u0000\u0dcf\u0dd0\u0005"+
		"\u02b3\u0000\u0000\u0dd0\u0dd2\u0005\u00d3\u0000\u0000\u0dd1\u0dcf\u0001"+
		"\u0000\u0000\u0000\u0dd1\u0dd2\u0001\u0000\u0000\u0000\u0dd2\u0dd3\u0001"+
		"\u0000\u0000\u0000\u0dd3\u0dd9\u0005\u00e3\u0000\u0000\u0dd4\u0dda\u0003"+
		"\u01d0\u00e8\u0000\u0dd5\u0dda\u0005\u026d\u0000\u0000\u0dd6\u0dda\u0005"+
		"\u008d\u0000\u0000\u0dd7\u0dda\u0005\u0206\u0000\u0000\u0dd8\u0dda\u0005"+
		"\u01b9\u0000\u0000\u0dd9\u0dd4\u0001\u0000\u0000\u0000\u0dd9\u0dd5\u0001"+
		"\u0000\u0000\u0000\u0dd9\u0dd6\u0001\u0000\u0000\u0000\u0dd9\u0dd7\u0001"+
		"\u0000\u0000\u0000\u0dd9\u0dd8\u0001\u0000\u0000\u0000\u0dda\u0ddb\u0001"+
		"\u0000\u0000\u0000\u0ddb\u0ddc\u0005\u02bd\u0000\u0000\u0ddc\u0ddd\u0003"+
		"\u0208\u0104\u0000\u0ddd\u0125\u0001\u0000\u0000\u0000\u0dde\u0ddf\u0005"+
		"\u00bc\u0000\u0000\u0ddf\u0de2\u0005\u0280\u0000\u0000\u0de0\u0de1\u0005"+
		"\u02b3\u0000\u0000\u0de1\u0de3\u0005\u00d3\u0000\u0000\u0de2\u0de0\u0001"+
		"\u0000\u0000\u0000\u0de2\u0de3\u0001\u0000\u0000\u0000\u0de3\u0de4\u0001"+
		"\u0000\u0000\u0000\u0de4\u0de6\u0003\u01d4\u00ea\u0000\u0de5\u0de7\u0007"+
		"\u0001\u0000\u0000\u0de6\u0de5\u0001\u0000\u0000\u0000\u0de6\u0de7\u0001"+
		"\u0000\u0000\u0000\u0de7\u0127\u0001\u0000\u0000\u0000\u0de8\u0de9\u0005"+
		"\u00d1\u0000\u0000\u0de9\u0deb\u0003\u0208\u0104\u0000\u0dea\u0dec\u0003"+
		"\u01bc\u00de\u0000\u0deb\u0dea\u0001\u0000\u0000\u0000\u0deb\u0dec\u0001"+
		"\u0000\u0000\u0000\u0dec\u0129\u0001\u0000\u0000\u0000\u0ded\u0def\u0005"+
		"\u00d5\u0000\u0000\u0dee\u0df0\u0005\u0016\u0000\u0000\u0def\u0dee\u0001"+
		"\u0000\u0000\u0000\u0def\u0df0\u0001\u0000\u0000\u0000\u0df0\u0df2\u0001"+
		"\u0000\u0000\u0000\u0df1\u0df3\u0005\u027f\u0000\u0000\u0df2\u0df1\u0001"+
		"\u0000\u0000\u0000\u0df2\u0df3\u0001\u0000\u0000\u0000\u0df3\u0e01\u0001"+
		"\u0000\u0000\u0000\u0df4\u0df5\u0005\u00d5\u0000\u0000\u0df5\u0df6\u0005"+
		"\u02ff\u0000\u0000\u0df6\u0dfb\u0003\u018e\u00c7\u0000\u0df7\u0df8\u0005"+
		"\u02f9\u0000\u0000\u0df8\u0dfa\u0003\u018e\u00c7\u0000\u0df9\u0df7\u0001"+
		"\u0000\u0000\u0000\u0dfa\u0dfd\u0001\u0000\u0000\u0000\u0dfb\u0df9\u0001"+
		"\u0000\u0000\u0000\u0dfb\u0dfc\u0001\u0000\u0000\u0000\u0dfc\u0dfe\u0001"+
		"\u0000\u0000\u0000\u0dfd\u0dfb\u0001\u0000\u0000\u0000\u0dfe\u0dff\u0005"+
		"\u0300\u0000\u0000\u0dff\u0e01\u0001\u0000\u0000\u0000\u0e00\u0ded\u0001"+
		"\u0000\u0000\u0000\u0e00\u0df4\u0001\u0000\u0000\u0000\u0e01\u0e0b\u0001"+
		"\u0000\u0000\u0000\u0e02\u0e0c\u0003\u0158\u00ac\u0000\u0e03\u0e0c\u0003"+
		"\u0132\u0099\u0000\u0e04\u0e0c\u0003\u0174\u00ba\u0000\u0e05\u0e0c\u0003"+
		"\u00d0h\u0000\u0e06\u0e0c\u0003\u017c\u00be\u0000\u0e07\u0e0c\u0003\u0128"+
		"\u0094\u0000\u0e08\u0e0c\u0003\u00ceg\u0000\u0e09\u0e0c\u0003\u00b4Z\u0000"+
		"\u0e0a\u0e0c\u0003\u0096K\u0000\u0e0b\u0e02\u0001\u0000\u0000\u0000\u0e0b"+
		"\u0e03\u0001\u0000\u0000\u0000\u0e0b\u0e04\u0001\u0000\u0000\u0000\u0e0b"+
		"\u0e05\u0001\u0000\u0000\u0000\u0e0b\u0e06\u0001\u0000\u0000\u0000\u0e0b"+
		"\u0e07\u0001\u0000\u0000\u0000\u0e0b\u0e08\u0001\u0000\u0000\u0000\u0e0b"+
		"\u0e09\u0001\u0000\u0000\u0000\u0e0b\u0e0a\u0001\u0000\u0000\u0000\u0e0c"+
		"\u012b\u0001\u0000\u0000\u0000\u0e0d\u0e0e\u0003\u020c\u0106\u0000\u0e0e"+
		"\u012d\u0001\u0000\u0000\u0000\u0e0f\u0e10\u0003\u020c\u0106\u0000\u0e10"+
		"\u012f\u0001\u0000\u0000\u0000\u0e11\u0e12\u0003\u020c\u0106\u0000\u0e12"+
		"\u0131\u0001\u0000\u0000\u0000\u0e13\u0e15\u0003\u015c\u00ae\u0000\u0e14"+
		"\u0e13\u0001\u0000\u0000\u0000\u0e14\u0e15\u0001\u0000\u0000\u0000\u0e15"+
		"\u0e16\u0001\u0000\u0000\u0000\u0e16\u0e17\u0005\u0116\u0000\u0000\u0e17"+
		"\u0e18\u0005\u011f\u0000\u0000\u0e18\u0e1b\u0003\u01da\u00ed\u0000\u0e19"+
		"\u0e1a\u0005\u001b\u0000\u0000\u0e1a\u0e1c\u0003\u0208\u0104\u0000\u0e1b"+
		"\u0e19\u0001\u0000\u0000\u0000\u0e1b\u0e1c\u0001\u0000\u0000\u0000\u0e1c"+
		"\u0e21\u0001\u0000\u0000\u0000\u0e1d\u0e1e\u0005\u02ff\u0000\u0000\u0e1e"+
		"\u0e1f\u0003\u01d2\u00e9\u0000\u0e1f\u0e20\u0005\u0300\u0000\u0000\u0e20"+
		"\u0e22\u0001\u0000\u0000\u0000\u0e21\u0e1d\u0001\u0000\u0000\u0000\u0e21"+
		"\u0e22\u0001\u0000\u0000\u0000\u0e22\u0e28\u0001\u0000\u0000\u0000\u0e23"+
		"\u0e25\u0005\u0192\u0000\u0000\u0e24\u0e26\u0007\u0010\u0000\u0000\u0e25"+
		"\u0e24\u0001\u0000\u0000\u0000\u0e25\u0e26\u0001\u0000\u0000\u0000\u0e26"+
		"\u0e27\u0001\u0000\u0000\u0000\u0e27\u0e29\u0005\u0277\u0000\u0000\u0e28"+
		"\u0e23\u0001\u0000\u0000\u0000\u0e28\u0e29\u0001\u0000\u0000\u0000\u0e29"+
		"\u0e2e\u0001\u0000\u0000\u0000\u0e2a\u0e2b\u0005\u009b\u0000\u0000\u0e2b"+
		"\u0e2f\u0005\u0278\u0000\u0000\u0e2c\u0e2f\u0003\u0158\u00ac\u0000\u0e2d"+
		"\u0e2f\u0003\u017c\u00be\u0000\u0e2e\u0e2a\u0001\u0000\u0000\u0000\u0e2e"+
		"\u0e2c\u0001\u0000\u0000\u0000\u0e2e\u0e2d\u0001\u0000\u0000\u0000\u0e2f"+
		"\u0e4b\u0001\u0000\u0000\u0000\u0e30\u0e31\u0005\u0180\u0000\u0000\u0e31"+
		"\u0e36\u0005i\u0000\u0000\u0e32\u0e33\u0005\u02ff\u0000\u0000\u0e33\u0e34"+
		"\u0003\u0210\u0108\u0000\u0e34\u0e35\u0005\u0300\u0000\u0000\u0e35\u0e37"+
		"\u0001\u0000\u0000\u0000\u0e36\u0e32\u0001\u0000\u0000\u0000\u0e36\u0e37"+
		"\u0001\u0000\u0000\u0000\u0e37\u0e3b\u0001\u0000\u0000\u0000\u0e38\u0e39"+
		"\u0005\u0180\u0000\u0000\u0e39\u0e3a\u0005m\u0000\u0000\u0e3a\u0e3c\u0003"+
		"\u0210\u0108\u0000\u0e3b\u0e38\u0001\u0000\u0000\u0000\u0e3b\u0e3c\u0001"+
		"\u0000\u0000\u0000\u0e3c\u0e3e\u0001\u0000\u0000\u0000\u0e3d\u0e3f\u0003"+
		"\u0182\u00c1\u0000\u0e3e\u0e3d\u0001\u0000\u0000\u0000\u0e3e\u0e3f\u0001"+
		"\u0000\u0000\u0000\u0e3f\u0e49\u0001\u0000\u0000\u0000\u0e40\u0e41\u0005"+
		"\u00b9\u0000\u0000\u0e41\u0e4a\u0005\u016e\u0000\u0000\u0e42\u0e43\u0005"+
		"\u00b9\u0000\u0000\u0e43\u0e44\u0005\u026a\u0000\u0000\u0e44\u0e45\u0005"+
		"\u0207\u0000\u0000\u0e45\u0e47\u0003\u01aa\u00d5\u0000\u0e46\u0e48\u0003"+
		"\u0182\u00c1\u0000\u0e47\u0e46\u0001\u0000\u0000\u0000\u0e47\u0e48\u0001"+
		"\u0000\u0000\u0000\u0e48\u0e4a\u0001\u0000\u0000\u0000\u0e49\u0e40\u0001"+
		"\u0000\u0000\u0000\u0e49\u0e42\u0001\u0000\u0000\u0000\u0e4a\u0e4c\u0001"+
		"\u0000\u0000\u0000\u0e4b\u0e30\u0001\u0000\u0000\u0000\u0e4b\u0e4c\u0001"+
		"\u0000\u0000\u0000\u0e4c\u0e4e\u0001\u0000\u0000\u0000\u0e4d\u0e4f\u0003"+
		"\u01ae\u00d7\u0000\u0e4e\u0e4d\u0001\u0000\u0000\u0000\u0e4e\u0e4f\u0001"+
		"\u0000\u0000\u0000\u0e4f\u0133\u0001\u0000\u0000\u0000\u0e50\u0e51\u0005"+
		"\u0137\u0000\u0000\u0e51\u0e52\u0003\u0208\u0104\u0000\u0e52\u0135\u0001"+
		"\u0000\u0000\u0000\u0e53\u0e54\u0003\u020c\u0106\u0000\u0e54\u0137\u0001"+
		"\u0000\u0000\u0000\u0e55\u0e57\u0005\u013f\u0000\u0000\u0e56\u0e58\u0005"+
		"\u0237\u0000\u0000\u0e57\u0e56\u0001\u0000\u0000\u0000\u0e57\u0e58\u0001"+
		"\u0000\u0000\u0000\u0e58\u0e5a\u0001\u0000\u0000\u0000\u0e59\u0e5b\u0005"+
		"\u0181\u0000\u0000\u0e5a\u0e59\u0001\u0000\u0000\u0000\u0e5a\u0e5b\u0001"+
		"\u0000\u0000\u0000\u0e5b\u0e5c\u0001\u0000\u0000\u0000\u0e5c\u0e5e\u0003"+
		"\u01d0\u00e8\u0000\u0e5d\u0e5f\u0005\u02fe\u0000\u0000\u0e5e\u0e5d\u0001"+
		"\u0000\u0000\u0000\u0e5e\u0e5f\u0001\u0000\u0000\u0000\u0e5f\u0e74\u0001"+
		"\u0000\u0000\u0000\u0e60\u0e71\u0005\u0109\u0000\u0000\u0e61\u0e62\u0005"+
		"\b\u0000\u0000\u0e62\u0e72\u0005\u020a\u0000\u0000\u0e63\u0e64\u0005\u01ec"+
		"\u0000\u0000\u0e64\u0e72\u0005\u020a\u0000\u0000\u0e65\u0e66\u0005\u01ec"+
		"\u0000\u0000\u0e66\u0e72\u0005\u00cf\u0000\u0000\u0e67\u0e68\u0005\u020a"+
		"\u0000\u0000\u0e68\u0e69\u0005\u026a\u0000\u0000\u0e69\u0e72\u0005\u00cf"+
		"\u0000\u0000\u0e6a\u0e72\u0005\u020a\u0000\u0000\u0e6b\u0e6c\u0005\u020a"+
		"\u0000\u0000\u0e6c\u0e6d\u0005\u01ec\u0000\u0000\u0e6d\u0e72\u0005\u00cf"+
		"\u0000\u0000\u0e6e\u0e72\u0005\u00cf\u0000\u0000\u0e6f\u0e70\u0005\b\u0000"+
		"\u0000\u0e70\u0e72\u0005\u00cf\u0000\u0000\u0e71\u0e61\u0001\u0000\u0000"+
		"\u0000\u0e71\u0e63\u0001\u0000\u0000\u0000\u0e71\u0e65\u0001\u0000\u0000"+
		"\u0000\u0e71\u0e67\u0001\u0000\u0000\u0000\u0e71\u0e6a\u0001\u0000\u0000"+
		"\u0000\u0e71\u0e6b\u0001\u0000\u0000\u0000\u0e71\u0e6e\u0001\u0000\u0000"+
		"\u0000\u0e71\u0e6f\u0001\u0000\u0000\u0000\u0e72\u0e73\u0001\u0000\u0000"+
		"\u0000\u0e73\u0e75\u0005\u0155\u0000\u0000\u0e74\u0e60\u0001\u0000\u0000"+
		"\u0000\u0e74\u0e75\u0001\u0000\u0000\u0000\u0e75\u0e77\u0001\u0000\u0000"+
		"\u0000\u0e76\u0e78\u0005\u0171\u0000\u0000\u0e77\u0e76\u0001\u0000\u0000"+
		"\u0000\u0e77\u0e78\u0001\u0000\u0000\u0000\u0e78\u0139\u0001\u0000\u0000"+
		"\u0000\u0e79\u0e93\u0005\u015b\u0000\u0000\u0e7a\u0e8f\u0005\u0166\u0000"+
		"\u0000\u0e7b\u0e8f\u0005\u01b5\u0000\u0000\u0e7c\u0e8f\u0005\u00df\u0000"+
		"\u0000\u0e7d\u0e8f\u0005\u012d\u0000\u0000\u0e7e\u0e7f\u0005\u0007\u0000"+
		"\u0000\u0e7f\u0e8f\u0005\u011b\u0000\u0000\u0e80\u0e81\u0005\u01d2\u0000"+
		"\u0000\u0e81\u0e8f\u0003\u01b4\u00da\u0000\u0e82\u0e8f\u0003\u01b4\u00da"+
		"\u0000\u0e83\u0e8f\u0005\u0010\u0000\u0000\u0e84\u0e87\u0005\u00e8\u0000"+
		"\u0000\u0e85\u0e88\u0003\u01b4\u00da\u0000\u0e86\u0e88\u0005\u0010\u0000"+
		"\u0000\u0e87\u0e85\u0001\u0000\u0000\u0000\u0e87\u0e86\u0001\u0000\u0000"+
		"\u0000\u0e87\u0e88\u0001\u0000\u0000\u0000\u0e88\u0e8f\u0001\u0000\u0000"+
		"\u0000\u0e89\u0e8c\u0005\'\u0000\u0000\u0e8a\u0e8d\u0003\u01b4\u00da\u0000"+
		"\u0e8b\u0e8d\u0005\u0010\u0000\u0000\u0e8c\u0e8a\u0001\u0000\u0000\u0000"+
		"\u0e8c\u0e8b\u0001\u0000\u0000\u0000\u0e8c\u0e8d\u0001\u0000\u0000\u0000"+
		"\u0e8d\u0e8f\u0001\u0000\u0000\u0000\u0e8e\u0e7a\u0001\u0000\u0000\u0000"+
		"\u0e8e\u0e7b\u0001\u0000\u0000\u0000\u0e8e\u0e7c\u0001\u0000\u0000\u0000"+
		"\u0e8e\u0e7d\u0001\u0000\u0000\u0000\u0e8e\u0e7e\u0001\u0000\u0000\u0000"+
		"\u0e8e\u0e80\u0001\u0000\u0000\u0000\u0e8e\u0e82\u0001\u0000\u0000\u0000"+
		"\u0e8e\u0e83\u0001\u0000\u0000\u0000\u0e8e\u0e84\u0001\u0000\u0000\u0000"+
		"\u0e8e\u0e89\u0001\u0000\u0000\u0000\u0e8f\u0e91\u0001\u0000\u0000\u0000"+
		"\u0e90\u0e92\u0007\u0011\u0000\u0000\u0e91\u0e90\u0001\u0000\u0000\u0000"+
		"\u0e91\u0e92\u0001\u0000\u0000\u0000\u0e92\u0e94\u0001\u0000\u0000\u0000"+
		"\u0e93\u0e8e\u0001\u0000\u0000\u0000\u0e93\u0e94\u0001\u0000\u0000\u0000"+
		"\u0e94\u0e95\u0001\u0000\u0000\u0000\u0e95\u0e96\u0003\u01d0\u00e8\u0000"+
		"\u0e96\u013b\u0001\u0000\u0000\u0000\u0e97\u0e98\u0005\u016f\u0000\u0000"+
		"\u0e98\u0e9b\u0003\u01d0\u00e8\u0000\u0e99\u0e9a\u0005\u02f9\u0000\u0000"+
		"\u0e9a\u0e9c\u0005\u0309\u0000\u0000\u0e9b\u0e99\u0001\u0000\u0000\u0000"+
		"\u0e9b\u0e9c\u0001\u0000\u0000\u0000\u0e9c\u013d\u0001\u0000\u0000\u0000"+
		"\u0e9d\u0e9e\u0005\u01b1\u0000\u0000\u0e9e\u0ea3\u0003\u0208\u0104\u0000"+
		"\u0e9f\u0ea0\u0005\u02ff\u0000\u0000\u0ea0\u0ea1\u0003\u01de\u00ef\u0000"+
		"\u0ea1\u0ea2\u0005\u0300\u0000\u0000\u0ea2\u0ea4\u0001\u0000\u0000\u0000"+
		"\u0ea3\u0e9f\u0001\u0000\u0000\u0000\u0ea3\u0ea4\u0001\u0000\u0000\u0000"+
		"\u0ea4\u0ea5\u0001\u0000\u0000\u0000\u0ea5\u0eab\u0005\u001b\u0000\u0000"+
		"\u0ea6\u0eac\u0003\u0158\u00ac\u0000\u0ea7\u0eac\u0003\u0132\u0099\u0000"+
		"\u0ea8\u0eac\u0003\u0174\u00ba\u0000\u0ea9\u0eac\u0003\u00d0h\u0000\u0eaa"+
		"\u0eac\u0003\u017c\u00be\u0000\u0eab\u0ea6\u0001\u0000\u0000\u0000\u0eab"+
		"\u0ea7\u0001\u0000\u0000\u0000\u0eab\u0ea8\u0001\u0000\u0000\u0000\u0eab"+
		"\u0ea9\u0001\u0000\u0000\u0000\u0eab\u0eaa\u0001\u0000\u0000\u0000\u0eac"+
		"\u013f\u0001\u0000\u0000\u0000\u0ead\u0eae\u0005\u01b1\u0000\u0000\u0eae"+
		"\u0eaf\u0005\u024b\u0000\u0000\u0eaf\u0eb0\u0003\u01d0\u00e8\u0000\u0eb0"+
		"\u0141\u0001\u0000\u0000\u0000\u0eb1\u0eb2\u0005\u01c1\u0000\u0000\u0eb2"+
		"\u0eb3\u0005\u02cf\u0000\u0000\u0eb3\u0eb7\u00056\u0000\u0000\u0eb4\u0eb8"+
		"\u0003\u0208\u0104\u0000\u0eb5\u0eb8\u0005\u008d\u0000\u0000\u0eb6\u0eb8"+
		"\u0005\u0206\u0000\u0000\u0eb7\u0eb4\u0001\u0000\u0000\u0000\u0eb7\u0eb5"+
		"\u0001\u0000\u0000\u0000\u0eb7\u0eb6\u0001\u0000\u0000\u0000\u0eb8\u0ec1"+
		"\u0001\u0000\u0000\u0000\u0eb9\u0ebd\u0005\u02f9\u0000\u0000\u0eba\u0ebe"+
		"\u0003\u0208\u0104\u0000\u0ebb\u0ebe\u0005\u008d\u0000\u0000\u0ebc\u0ebe"+
		"\u0005\u0206\u0000\u0000\u0ebd\u0eba\u0001\u0000\u0000\u0000\u0ebd\u0ebb"+
		"\u0001\u0000\u0000\u0000\u0ebd\u0ebc\u0001\u0000\u0000\u0000\u0ebe\u0ec0"+
		"\u0001\u0000\u0000\u0000\u0ebf\u0eb9\u0001\u0000\u0000\u0000\u0ec0\u0ec3"+
		"\u0001\u0000\u0000\u0000\u0ec1\u0ebf\u0001\u0000\u0000\u0000\u0ec1\u0ec2"+
		"\u0001\u0000\u0000\u0000\u0ec2\u0ec4\u0001\u0000\u0000\u0000\u0ec3\u0ec1"+
		"\u0001\u0000\u0000\u0000\u0ec4\u0ec8\u0005\u0247\u0000\u0000\u0ec5\u0ec9"+
		"\u0003\u0208\u0104\u0000\u0ec6\u0ec9\u0005\u008d\u0000\u0000\u0ec7\u0ec9"+
		"\u0005\u0206\u0000\u0000\u0ec8\u0ec5\u0001\u0000\u0000\u0000\u0ec8\u0ec6"+
		"\u0001\u0000\u0000\u0000\u0ec8\u0ec7\u0001\u0000\u0000\u0000\u0ec9\u0143"+
		"\u0001\u0000\u0000\u0000\u0eca\u0ecb\u0003\u020c\u0106\u0000\u0ecb\u0145"+
		"\u0001\u0000\u0000\u0000\u0ecc\u0ed0\u0005\u01d1\u0000\u0000\u0ecd\u0ece"+
		"\u0005\u02ff\u0000\u0000\u0ece\u0ecf\u0005\u027f\u0000\u0000\u0ecf\u0ed1"+
		"\u0005\u0300\u0000\u0000\u0ed0\u0ecd\u0001\u0000\u0000\u0000\u0ed0\u0ed1"+
		"\u0001\u0000\u0000\u0000\u0ed1\u0ed2\u0001\u0000\u0000\u0000\u0ed2\u0ed3"+
		"\u0007\u0012\u0000\u0000\u0ed3\u0ed4\u0003\u0208\u0104\u0000\u0ed4\u0147"+
		"\u0001\u0000\u0000\u0000\u0ed5\u0ed7\u0005\u01d3\u0000\u0000\u0ed6\u0ed8"+
		"\u0005\u01f1\u0000\u0000\u0ed7\u0ed6\u0001\u0000\u0000\u0000\u0ed7\u0ed8"+
		"\u0001\u0000\u0000\u0000\u0ed8\u0ed9\u0001\u0000\u0000\u0000\u0ed9\u0eda"+
		"\u0003\u0208\u0104\u0000\u0eda\u0149\u0001\u0000\u0000\u0000\u0edb\u0ede"+
		"\u0005\u01d8\u0000\u0000\u0edc\u0edf\u0003\u0208\u0104\u0000\u0edd\u0edf"+
		"\u0005\u0010\u0000\u0000\u0ede\u0edc\u0001\u0000\u0000\u0000\u0ede\u0edd"+
		"\u0001\u0000\u0000\u0000\u0edf\u014b\u0001\u0000\u0000\u0000\u0ee0\u0ee1"+
		"\u0003\u020c\u0106\u0000\u0ee1\u014d\u0001\u0000\u0000\u0000\u0ee2\u0ee4"+
		"\u0005\u01e6\u0000\u0000\u0ee3\u0ee5\u0007\u0013\u0000\u0000\u0ee4\u0ee3"+
		"\u0001\u0000\u0000\u0000\u0ee4\u0ee5\u0001\u0000\u0000\u0000\u0ee5\u014f"+
		"\u0001\u0000\u0000\u0000\u0ee6\u0ee7\u0005\u01e6\u0000\u0000\u0ee7\u0ee8"+
		"\u0005\u01b2\u0000\u0000\u0ee8\u0ee9\u0005\u0306\u0000\u0000\u0ee9\u0151"+
		"\u0001\u0000\u0000\u0000\u0eea\u0eec\u0005\u01e6\u0000\u0000\u0eeb\u0eed"+
		"\u0007\u0013\u0000\u0000\u0eec\u0eeb\u0001\u0000\u0000\u0000\u0eec\u0eed"+
		"\u0001\u0000\u0000\u0000\u0eed\u0eee\u0001\u0000\u0000\u0000\u0eee\u0ef0"+
		"\u0005\u0247\u0000\u0000\u0eef\u0ef1\u0005\u01f1\u0000\u0000\u0ef0\u0eef"+
		"\u0001\u0000\u0000\u0000\u0ef0\u0ef1\u0001\u0000\u0000\u0000\u0ef1\u0ef2"+
		"\u0001\u0000\u0000\u0000\u0ef2\u0ef3\u0003\u0208\u0104\u0000\u0ef3\u0153"+
		"\u0001\u0000\u0000\u0000\u0ef4\u0ef5\u0005\u01f1\u0000\u0000\u0ef5\u0ef6"+
		"\u0003\u0208\u0104\u0000\u0ef6\u0155\u0001\u0000\u0000\u0000\u0ef7\u0ef8"+
		"\u0005\u01fd\u0000\u0000\u0ef8\u0efb\u0005\u0129\u0000\u0000\u0ef9\u0efa"+
		"\u0005\u00e3\u0000\u0000\u0efa\u0efc\u0003\u01d0\u00e8\u0000\u0efb\u0ef9"+
		"\u0001\u0000\u0000\u0000\u0efb\u0efc\u0001\u0000\u0000\u0000\u0efc\u0efd"+
		"\u0001\u0000\u0000\u0000\u0efd\u0f34\u0005\u0180\u0000\u0000\u0efe\u0eff"+
		"\u0005\u0237\u0000\u0000\u0eff\u0f35\u0003\u0208\u0104\u0000\u0f00\u0f01"+
		"\u0005^\u0000\u0000\u0f01\u0f02\u0003\u0208\u0104\u0000\u0f02\u0f03\u0005"+
		"\u0308\u0000\u0000\u0f03\u0f04\u0003\u0210\u0108\u0000\u0f04\u0f35\u0001"+
		"\u0000\u0000\u0000\u0f05\u0f06\u0005\u000e\u0000\u0000\u0f06\u0f07\u0003"+
		"\u0208\u0104\u0000\u0f07\u0f08\u0005\u02ff\u0000\u0000\u0f08\u0f09\u0003"+
		"\u01f2\u00f9\u0000\u0f09\u0f0a\u0005\u0300\u0000\u0000\u0f0a\u0f35\u0001"+
		"\u0000\u0000\u0000\u0f0b\u0f0c\u0005\u0092\u0000\u0000\u0f0c\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f0d\u0f0e\u0005\u00ba\u0000\u0000\u0f0e\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f0f\u0f10\u0005\u02bb\u0000\u0000\u0f10\u0f11\u0005"+
		"\u0254\u0000\u0000\u0f11\u0f35\u0003\u0208\u0104\u0000\u0f12\u0f13\u0005"+
		"\u00e5\u0000\u0000\u0f13\u0f14\u0005\u0237\u0000\u0000\u0f14\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f15\u0f16\u0005\u00ee\u0000\u0000\u0f16\u0f17\u0003"+
		"\u0208\u0104\u0000\u0f17\u0f18\u0003\u01c4\u00e2\u0000\u0f18\u0f35\u0001"+
		"\u0000\u0000\u0000\u0f19\u0f1a\u0005\u012c\u0000\u0000\u0f1a\u0f1b\u0005"+
		"\u0178\u0000\u0000\u0f1b\u0f35\u0005\u0306\u0000\u0000\u0f1c\u0f1d\u0005"+
		"\u02c6\u0000\u0000\u0f1d\u0f1e\u0005\u0280\u0000\u0000\u0f1e\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f1f\u0f21\u0005\u01b7\u0000\u0000\u0f20\u0f1f\u0001"+
		"\u0000\u0000\u0000\u0f20\u0f21\u0001\u0000\u0000\u0000\u0f21\u0f22\u0001"+
		"\u0000\u0000\u0000\u0f22\u0f23\u0005\u012b\u0000\u0000\u0f23\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f24\u0f25\u0005\u01ba\u0000\u0000\u0f25\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f26\u0f27\u0005\u01e5\u0000\u0000\u0f27\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f28\u0f29\u0005\u01f3\u0000\u0000\u0f29\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f2a\u0f2b\u0005\u0201\u0000\u0000\u0f2b\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f2c\u0f2d\u0005\u0230\u0000\u0000\u0f2d\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f2e\u0f2f\u0005\u023a\u0000\u0000\u0f2f\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f30\u0f31\u0005\u025c\u0000\u0000\u0f31\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f32\u0f33\u0005\u0280\u0000\u0000\u0f33\u0f35\u0003"+
		"\u0208\u0104\u0000\u0f34\u0efe\u0001\u0000\u0000\u0000\u0f34\u0f00\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f05\u0001\u0000\u0000\u0000\u0f34\u0f0b\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f0d\u0001\u0000\u0000\u0000\u0f34\u0f0f\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f12\u0001\u0000\u0000\u0000\u0f34\u0f15\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f19\u0001\u0000\u0000\u0000\u0f34\u0f1c\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f20\u0001\u0000\u0000\u0000\u0f34\u0f24\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f26\u0001\u0000\u0000\u0000\u0f34\u0f28\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f2a\u0001\u0000\u0000\u0000\u0f34\u0f2c\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f2e\u0001\u0000\u0000\u0000\u0f34\u0f30\u0001"+
		"\u0000\u0000\u0000\u0f34\u0f32\u0001\u0000\u0000\u0000\u0f35\u0f36\u0001"+
		"\u0000\u0000\u0000\u0f36\u0f37\u0005\u0121\u0000\u0000\u0f37\u0f38\u0005"+
		"\u0309\u0000\u0000\u0f38\u0157\u0001\u0000\u0000\u0000\u0f39\u0f3b\u0003"+
		"\u015c\u00ae\u0000\u0f3a\u0f39\u0001\u0000\u0000\u0000\u0f3a\u0f3b\u0001"+
		"\u0000\u0000\u0000\u0f3b\u0f56\u0001\u0000\u0000\u0000\u0f3c\u0f3d\u0005"+
		"\u01fe\u0000\u0000\u0f3d\u0f3f\u0003\u017e\u00bf\u0000\u0f3e\u0f40\u0003"+
		"\u0180\u00c0\u0000\u0f3f\u0f3e\u0001\u0000\u0000\u0000\u0f3f\u0f40\u0001"+
		"\u0000\u0000\u0000\u0f40\u0f57\u0001\u0000\u0000\u0000\u0f41\u0f43\u0005"+
		"\u0237\u0000\u0000\u0f42\u0f44\u0005\u0181\u0000\u0000\u0f43\u0f42\u0001"+
		"\u0000\u0000\u0000\u0f43\u0f44\u0001\u0000\u0000\u0000\u0f44\u0f45\u0001"+
		"\u0000\u0000\u0000\u0f45\u0f47\u0003\u01da\u00ed\u0000\u0f46\u0f48\u0005"+
		"\u02fe\u0000\u0000\u0f47\u0f46\u0001\u0000\u0000\u0000\u0f47\u0f48\u0001"+
		"\u0000\u0000\u0000\u0f48\u0f57\u0001\u0000\u0000\u0000\u0f49\u0f4b\u0005"+
		"\u02ff\u0000\u0000\u0f4a\u0f49\u0001\u0000\u0000\u0000\u0f4b\u0f4c\u0001"+
		"\u0000\u0000\u0000\u0f4c\u0f4a\u0001\u0000\u0000\u0000\u0f4c\u0f4d\u0001"+
		"\u0000\u0000\u0000\u0f4d\u0f4e\u0001\u0000\u0000\u0000\u0f4e\u0f50\u0003"+
		"\u0158\u00ac\u0000\u0f4f\u0f51\u0005\u0300\u0000\u0000\u0f50\u0f4f\u0001"+
		"\u0000\u0000\u0000\u0f51\u0f52\u0001\u0000\u0000\u0000\u0f52\u0f50\u0001"+
		"\u0000\u0000\u0000\u0f52\u0f53\u0001\u0000\u0000\u0000\u0f53\u0f54\u0001"+
		"\u0000\u0000\u0000\u0f54\u0f55\u0003\u019c\u00ce\u0000\u0f55\u0f57\u0001"+
		"\u0000\u0000\u0000\u0f56\u0f3c\u0001\u0000\u0000\u0000\u0f56\u0f41\u0001"+
		"\u0000\u0000\u0000\u0f56\u0f4a\u0001\u0000\u0000\u0000\u0f57\u0f59\u0001"+
		"\u0000\u0000\u0000\u0f58\u0f5a\u0003\u0182\u00c1\u0000\u0f59\u0f58\u0001"+
		"\u0000\u0000\u0000\u0f59\u0f5a\u0001\u0000\u0000\u0000\u0f5a\u0f5c\u0001"+
		"\u0000\u0000\u0000\u0f5b\u0f5d\u0003\u0184\u00c2\u0000\u0f5c\u0f5b\u0001"+
		"\u0000\u0000\u0000\u0f5c\u0f5d\u0001\u0000\u0000\u0000\u0f5d\u0f5f\u0001"+
		"\u0000\u0000\u0000\u0f5e\u0f60\u0003\u018a\u00c5\u0000\u0f5f\u0f5e\u0001"+
		"\u0000\u0000\u0000\u0f5f\u0f60\u0001\u0000\u0000\u0000\u0f60\u0f62\u0001"+
		"\u0000\u0000\u0000\u0f61\u0f63\u0003\u019a\u00cd\u0000\u0f62\u0f61\u0001"+
		"\u0000\u0000\u0000\u0f62\u0f63\u0001\u0000\u0000\u0000\u0f63\u0f65\u0001"+
		"\u0000\u0000\u0000\u0f64\u0f66\u0003\u019c\u00ce\u0000\u0f65\u0f64\u0001"+
		"\u0000\u0000\u0000\u0f65\u0f66\u0001\u0000\u0000\u0000\u0f66\u0f68\u0001"+
		"\u0000\u0000\u0000\u0f67\u0f69\u0003\u019e\u00cf\u0000\u0f68\u0f67\u0001"+
		"\u0000\u0000\u0000\u0f68\u0f69\u0001\u0000\u0000\u0000\u0f69\u0f6b\u0001"+
		"\u0000\u0000\u0000\u0f6a\u0f6c\u0003\u01a2\u00d1\u0000\u0f6b\u0f6a\u0001"+
		"\u0000\u0000\u0000\u0f6b\u0f6c\u0001\u0000\u0000\u0000\u0f6c\u0f6e\u0001"+
		"\u0000\u0000\u0000\u0f6d\u0f6f\u0003\u01a4\u00d2\u0000\u0f6e\u0f6d\u0001"+
		"\u0000\u0000\u0000\u0f6e\u0f6f\u0001\u0000\u0000\u0000\u0f6f\u0f71\u0001"+
		"\u0000\u0000\u0000\u0f70\u0f72\u0003\u01a6\u00d3\u0000\u0f71\u0f70\u0001"+
		"\u0000\u0000\u0000\u0f71\u0f72\u0001\u0000\u0000\u0000\u0f72\u0f74\u0001"+
		"\u0000\u0000\u0000\u0f73\u0f75\u0003\u01a8\u00d4\u0000\u0f74\u0f73\u0001"+
		"\u0000\u0000\u0000\u0f74\u0f75\u0001\u0000\u0000\u0000\u0f75\u0159\u0001"+
		"\u0000\u0000\u0000\u0f76\u0f78\u0003\u015c\u00ae\u0000\u0f77\u0f76\u0001"+
		"\u0000\u0000\u0000\u0f77\u0f78\u0001\u0000\u0000\u0000\u0f78\u0f9b\u0001"+
		"\u0000\u0000\u0000\u0f79\u0f7a\u0005\u01fe\u0000\u0000\u0f7a\u0f7b\u0003"+
		"\u017e\u00bf\u0000\u0f7b\u0f7d\u0005\u011f\u0000\u0000\u0f7c\u0f7e\u0007"+
		"\u0014\u0000\u0000\u0f7d\u0f7c\u0001\u0000\u0000\u0000\u0f7d\u0f7e\u0001"+
		"\u0000\u0000\u0000\u0f7e\u0f80\u0001\u0000\u0000\u0000\u0f7f\u0f81\u0005"+
		"\u0237\u0000\u0000\u0f80\u0f7f\u0001\u0000\u0000\u0000\u0f80\u0f81\u0001"+
		"\u0000\u0000\u0000\u0f81\u0f82\u0001\u0000\u0000\u0000\u0f82\u0f84\u0003"+
		"\u01da\u00ed\u0000\u0f83\u0f85\u0003\u0180\u00c0\u0000\u0f84\u0f83\u0001"+
		"\u0000\u0000\u0000\u0f84\u0f85\u0001\u0000\u0000\u0000\u0f85\u0f9c\u0001"+
		"\u0000\u0000\u0000\u0f86\u0f88\u0005\u0237\u0000\u0000\u0f87\u0f89\u0005"+
		"\u0181\u0000\u0000\u0f88\u0f87\u0001\u0000\u0000\u0000\u0f88\u0f89\u0001"+
		"\u0000\u0000\u0000\u0f89\u0f8a\u0001\u0000\u0000\u0000\u0f8a\u0f8c\u0003"+
		"\u01da\u00ed\u0000\u0f8b\u0f8d\u0005\u02fe\u0000\u0000\u0f8c\u0f8b\u0001"+
		"\u0000\u0000\u0000\u0f8c\u0f8d\u0001\u0000\u0000\u0000\u0f8d\u0f9c\u0001"+
		"\u0000\u0000\u0000\u0f8e\u0f90\u0005\u02ff\u0000\u0000\u0f8f\u0f8e\u0001"+
		"\u0000\u0000\u0000\u0f90\u0f91\u0001\u0000\u0000\u0000\u0f91\u0f8f\u0001"+
		"\u0000\u0000\u0000\u0f91\u0f92\u0001\u0000\u0000\u0000\u0f92\u0f93\u0001"+
		"\u0000\u0000\u0000\u0f93\u0f95\u0003\u0158\u00ac\u0000\u0f94\u0f96\u0005"+
		"\u0300\u0000\u0000\u0f95\u0f94\u0001\u0000\u0000\u0000\u0f96\u0f97\u0001"+
		"\u0000\u0000\u0000\u0f97\u0f95\u0001\u0000\u0000\u0000\u0f97\u0f98\u0001"+
		"\u0000\u0000\u0000\u0f98\u0f99\u0001\u0000\u0000\u0000\u0f99\u0f9a\u0003"+
		"\u019c\u00ce\u0000\u0f9a\u0f9c\u0001\u0000\u0000\u0000\u0f9b\u0f79\u0001"+
		"\u0000\u0000\u0000\u0f9b\u0f86\u0001\u0000\u0000\u0000\u0f9b\u0f8f\u0001"+
		"\u0000\u0000\u0000\u0f9c\u0f9e\u0001\u0000\u0000\u0000\u0f9d\u0f9f\u0003"+
		"\u0182\u00c1\u0000\u0f9e\u0f9d\u0001\u0000\u0000\u0000\u0f9e\u0f9f\u0001"+
		"\u0000\u0000\u0000\u0f9f\u0fa1\u0001\u0000\u0000\u0000\u0fa0\u0fa2\u0003"+
		"\u0184\u00c2\u0000\u0fa1\u0fa0\u0001\u0000\u0000\u0000\u0fa1\u0fa2\u0001"+
		"\u0000\u0000\u0000\u0fa2\u0fa4\u0001\u0000\u0000\u0000\u0fa3\u0fa5\u0003"+
		"\u018a\u00c5\u0000\u0fa4\u0fa3\u0001\u0000\u0000\u0000\u0fa4\u0fa5\u0001"+
		"\u0000\u0000\u0000\u0fa5\u0fa7\u0001\u0000\u0000\u0000\u0fa6\u0fa8\u0003"+
		"\u019a\u00cd\u0000\u0fa7\u0fa6\u0001\u0000\u0000\u0000\u0fa7\u0fa8\u0001"+
		"\u0000\u0000\u0000\u0fa8\u0faa\u0001\u0000\u0000\u0000\u0fa9\u0fab\u0003"+
		"\u019c\u00ce\u0000\u0faa\u0fa9\u0001\u0000\u0000\u0000\u0faa\u0fab\u0001"+
		"\u0000\u0000\u0000\u0fab\u0fad\u0001\u0000\u0000\u0000\u0fac\u0fae\u0003"+
		"\u019e\u00cf\u0000\u0fad\u0fac\u0001\u0000\u0000\u0000\u0fad\u0fae\u0001"+
		"\u0000\u0000\u0000\u0fae\u0fb0\u0001\u0000\u0000\u0000\u0faf\u0fb1\u0003"+
		"\u01a2\u00d1\u0000\u0fb0\u0faf\u0001\u0000\u0000\u0000\u0fb0\u0fb1\u0001"+
		"\u0000\u0000\u0000\u0fb1\u0fb3\u0001\u0000\u0000\u0000\u0fb2\u0fb4\u0003"+
		"\u01a4\u00d2\u0000\u0fb3\u0fb2\u0001\u0000\u0000\u0000\u0fb3\u0fb4\u0001"+
		"\u0000\u0000\u0000\u0fb4\u0fb6\u0001\u0000\u0000\u0000\u0fb5\u0fb7\u0003"+
		"\u01a6\u00d3\u0000\u0fb6\u0fb5\u0001\u0000\u0000\u0000\u0fb6\u0fb7\u0001"+
		"\u0000\u0000\u0000\u0fb7\u0fb9\u0001\u0000\u0000\u0000\u0fb8\u0fba\u0003"+
		"\u01a8\u00d4\u0000\u0fb9\u0fb8\u0001\u0000\u0000\u0000\u0fb9\u0fba\u0001"+
		"\u0000\u0000\u0000\u0fba\u015b\u0001\u0000\u0000\u0000\u0fbb\u0fbd\u0005"+
		"\u0287\u0000\u0000\u0fbc\u0fbe\u0005\u01c3\u0000\u0000\u0fbd\u0fbc\u0001"+
		"\u0000\u0000\u0000\u0fbd\u0fbe\u0001\u0000\u0000\u0000\u0fbe\u0fbf\u0001"+
		"\u0000\u0000\u0000\u0fbf\u0fc4\u0003\u015e\u00af\u0000\u0fc0\u0fc1\u0005"+
		"\u02f9\u0000\u0000\u0fc1\u0fc3\u0003\u015e\u00af\u0000\u0fc2\u0fc0\u0001"+
		"\u0000\u0000\u0000\u0fc3\u0fc6\u0001\u0000\u0000\u0000\u0fc4\u0fc2\u0001"+
		"\u0000\u0000\u0000\u0fc4\u0fc5\u0001\u0000\u0000\u0000\u0fc5\u015d\u0001"+
		"\u0000\u0000\u0000\u0fc6\u0fc4\u0001\u0000\u0000\u0000\u0fc7\u0fcc\u0003"+
		"\u01da\u00ed\u0000\u0fc8\u0fc9\u0005\u02ff\u0000\u0000\u0fc9\u0fca\u0003"+
		"\u01d2\u00e9\u0000\u0fca\u0fcb\u0005\u0300\u0000\u0000\u0fcb\u0fcd\u0001"+
		"\u0000\u0000\u0000\u0fcc\u0fc8\u0001\u0000\u0000\u0000\u0fcc\u0fcd\u0001"+
		"\u0000\u0000\u0000\u0fcd\u0fce\u0001\u0000\u0000\u0000\u0fce\u0fcf\u0005"+
		"\u001b\u0000\u0000\u0fcf\u0fd5\u0005\u02ff\u0000\u0000\u0fd0\u0fd6\u0003"+
		"\u0158\u00ac\u0000\u0fd1\u0fd6\u0003\u0132\u0099\u0000\u0fd2\u0fd6\u0003"+
		"\u00d0h\u0000\u0fd3\u0fd6\u0003\u0174\u00ba\u0000\u0fd4\u0fd6\u0003\u017c"+
		"\u00be\u0000\u0fd5\u0fd0\u0001\u0000\u0000\u0000\u0fd5\u0fd1\u0001\u0000"+
		"\u0000\u0000\u0fd5\u0fd2\u0001\u0000\u0000\u0000\u0fd5\u0fd3\u0001\u0000"+
		"\u0000\u0000\u0fd5\u0fd4\u0001\u0000\u0000\u0000\u0fd6\u0fd7\u0001\u0000"+
		"\u0000\u0000\u0fd7\u0fd8\u0005\u0300\u0000\u0000\u0fd8\u015f\u0001\u0000"+
		"\u0000\u0000\u0fd9\u0fdb\u0005\u0207\u0000\u0000\u0fda\u0fdc\u0007\u0015"+
		"\u0000\u0000\u0fdb\u0fda\u0001\u0000\u0000\u0000\u0fdb\u0fdc\u0001\u0000"+
		"\u0000\u0000\u0fdc\u0fdd\u0001\u0000\u0000\u0000\u0fdd\u0fde\u0003\u0208"+
		"\u0104\u0000\u0fde\u0fe1\u0007\u0005\u0000\u0000\u0fdf\u0fe2\u0003\u0202"+
		"\u0101\u0000\u0fe0\u0fe2\u0005\u009b\u0000\u0000\u0fe1\u0fdf\u0001\u0000"+
		"\u0000\u0000\u0fe1\u0fe0\u0001\u0000\u0000\u0000\u0fe2\u0fef\u0001\u0000"+
		"\u0000\u0000\u0fe3\u0fe5\u0005\u0207\u0000\u0000\u0fe4\u0fe6\u0007\u0015"+
		"\u0000\u0000\u0fe5\u0fe4\u0001\u0000\u0000\u0000\u0fe5\u0fe6\u0001\u0000"+
		"\u0000\u0000\u0fe6\u0fe7\u0001\u0000\u0000\u0000\u0fe7\u0fe8\u0005\u0242"+
		"\u0000\u0000\u0fe8\u0fec\u0005\u028f\u0000\u0000\u0fe9\u0fed\u0003\u01ca"+
		"\u00e5\u0000\u0fea\u0fed\u0005\u013a\u0000\u0000\u0feb\u0fed\u0005\u009b"+
		"\u0000\u0000\u0fec\u0fe9\u0001\u0000\u0000\u0000\u0fec\u0fea\u0001\u0000"+
		"\u0000\u0000\u0fec\u0feb\u0001\u0000\u0000\u0000\u0fed\u0fef\u0001\u0000"+
		"\u0000\u0000\u0fee\u0fd9\u0001\u0000\u0000\u0000\u0fee\u0fe3\u0001\u0000"+
		"\u0000\u0000\u0fef\u0161\u0001\u0000\u0000\u0000\u0ff0\u0ff1\u0005\u0207"+
		"\u0000\u0000\u0ff1\u0ff4\u0005q\u0000\u0000\u0ff2\u0ff5\u0005\u0010\u0000"+
		"\u0000\u0ff3\u0ff5\u0003\u01d4\u00ea\u0000\u0ff4\u0ff2\u0001\u0000\u0000"+
		"\u0000\u0ff4\u0ff3\u0001\u0000\u0000\u0000\u0ff5\u0ff6\u0001\u0000\u0000"+
		"\u0000\u0ff6\u0ff7\u0007\u0016\u0000\u0000\u0ff7\u0163\u0001\u0000\u0000"+
		"\u0000\u0ff8\u0ffa\u0005\u0207\u0000\u0000\u0ff9\u0ffb\u0007\u0015\u0000"+
		"\u0000\u0ffa\u0ff9\u0001\u0000\u0000\u0000\u0ffa\u0ffb\u0001\u0000\u0000"+
		"\u0000\u0ffb\u0ffc\u0001\u0000\u0000\u0000\u0ffc\u0fff\u0005\u01e5\u0000"+
		"\u0000\u0ffd\u1000\u0003\u01fe\u00ff\u0000\u0ffe\u1000\u0005\u016a\u0000"+
		"\u0000\u0fff\u0ffd\u0001\u0000\u0000\u0000\u0fff\u0ffe\u0001\u0000\u0000"+
		"\u0000\u1000\u1004\u0001\u0000\u0000\u0000\u1001\u1002\u0005\u01d8\u0000"+
		"\u0000\u1002\u1004\u0005\u01e5\u0000\u0000\u1003\u0ff8\u0001\u0000\u0000"+
		"\u0000\u1003\u1001\u0001\u0000\u0000\u0000\u1004\u0165\u0001\u0000\u0000"+
		"\u0000\u1005\u1006\u0003\u020c\u0106\u0000\u1006\u0167\u0001\u0000\u0000"+
		"\u0000\u1007\u1008\u0005\u0122\u0000\u0000\u1008\u1010\u0005\u0134\u0000"+
		"\u0000\u1009\u1011\u0005\u0203\u0000\u0000\u100a\u100b\u0005\u01d5\u0000"+
		"\u0000\u100b\u1011\u0005\u01be\u0000\u0000\u100c\u100d\u0005\u01be\u0000"+
		"\u0000\u100d\u1011\u0005d\u0000\u0000\u100e\u100f\u0005\u01be\u0000\u0000"+
		"\u100f\u1011\u0005\u025f\u0000\u0000\u1010\u1009\u0001\u0000\u0000\u0000"+
		"\u1010\u100a\u0001\u0000\u0000\u0000\u1010\u100c\u0001\u0000\u0000\u0000"+
		"\u1010\u100e\u0001\u0000\u0000\u0000\u1011\u101b\u0001\u0000\u0000\u0000"+
		"\u1012\u1013\u0005\u01be\u0000\u0000\u1013\u101b\u0005\u028b\u0000\u0000"+
		"\u1014\u1015\u0005\u01be\u0000\u0000\u1015\u101b\u0005\u0181\u0000\u0000"+
		"\u1016\u1018\u0005\u016d\u0000\u0000\u1017\u1016\u0001\u0000\u0000\u0000"+
		"\u1017\u1018\u0001\u0000\u0000\u0000\u1018\u1019\u0001\u0000\u0000\u0000"+
		"\u1019\u101b\u0005\u009e\u0000\u0000\u101a\u1007\u0001\u0000\u0000\u0000"+
		"\u101a\u1012\u0001\u0000\u0000\u0000\u101a\u1014\u0001\u0000\u0000\u0000"+
		"\u101a\u1017\u0001\u0000\u0000\u0000\u101b\u0169\u0001\u0000\u0000\u0000"+
		"\u101c\u1021\u0003\u0168\u00b4\u0000\u101d\u101e\u0005\u02f9\u0000\u0000"+
		"\u101e\u1020\u0003\u0168\u00b4\u0000\u101f\u101d\u0001\u0000\u0000\u0000"+
		"\u1020\u1023\u0001\u0000\u0000\u0000\u1021\u101f\u0001\u0000\u0000\u0000"+
		"\u1021\u1022\u0001\u0000\u0000\u0000\u1022\u016b\u0001\u0000\u0000\u0000"+
		"\u1023\u1021\u0001\u0000\u0000\u0000\u1024\u1025\u0005\u0207\u0000\u0000"+
		"\u1025\u1026\u0005\u024b\u0000\u0000\u1026\u1032\u0003\u016a\u00b5\u0000"+
		"\u1027\u1028\u0005\u0207\u0000\u0000\u1028\u1029\u0005\u024b\u0000\u0000"+
		"\u1029\u102a\u0005\u0211\u0000\u0000\u102a\u1032\u0005\u0309\u0000\u0000"+
		"\u102b\u102c\u0005\u0207\u0000\u0000\u102c\u102d\u0005\u0205\u0000\u0000"+
		"\u102d\u102e\u0005L\u0000\u0000\u102e\u102f\u0005\u001b\u0000\u0000\u102f"+
		"\u1030\u0005\u024b\u0000\u0000\u1030\u1032\u0003\u016a\u00b5\u0000\u1031"+
		"\u1024\u0001\u0000\u0000\u0000\u1031\u1027\u0001\u0000\u0000\u0000\u1031"+
		"\u102b\u0001\u0000\u0000\u0000\u1032\u016d\u0001\u0000\u0000\u0000\u1033"+
		"\u1038\u0005\u020b\u0000\u0000\u1034\u1039\u0003\u0208\u0104\u0000\u1035"+
		"\u1036\u0005\u0242\u0000\u0000\u1036\u1039\u0005\u028f\u0000\u0000\u1037"+
		"\u1039\u0005\u0010\u0000\u0000\u1038\u1034\u0001\u0000\u0000\u0000\u1038"+
		"\u1035\u0001\u0000\u0000\u0000\u1038\u1037\u0001\u0000\u0000\u0000\u1039"+
		"\u016f\u0001\u0000\u0000\u0000\u103a\u103c\u0005\u025a\u0000\u0000\u103b"+
		"\u103d\u0005\u0237\u0000\u0000\u103c\u103b\u0001\u0000\u0000\u0000\u103c"+
		"\u103d\u0001\u0000\u0000\u0000\u103d\u103f\u0001\u0000\u0000\u0000\u103e"+
		"\u1040\u0005\u0181\u0000\u0000\u103f\u103e\u0001\u0000\u0000\u0000\u103f"+
		"\u1040\u0001\u0000\u0000\u0000\u1040\u1041\u0001\u0000\u0000\u0000\u1041"+
		"\u1043\u0003\u01da\u00ed\u0000\u1042\u1044\u0005\u02fe\u0000\u0000\u1043"+
		"\u1042\u0001\u0000\u0000\u0000\u1043\u1044\u0001\u0000\u0000\u0000\u1044"+
		"\u104a\u0001\u0000\u0000\u0000\u1045\u1047\u0005\u02f9\u0000\u0000\u1046"+
		"\u1048\u0005\u0181\u0000\u0000\u1047\u1046\u0001\u0000\u0000\u0000\u1047"+
		"\u1048\u0001\u0000\u0000\u0000\u1048\u1049\u0001\u0000\u0000\u0000\u1049"+
		"\u104b\u0003\u01d4\u00ea\u0000\u104a\u1045\u0001\u0000\u0000\u0000\u104a"+
		"\u104b\u0001\u0000\u0000\u0000\u104b\u104e\u0001\u0000\u0000\u0000\u104c"+
		"\u104d\u0007\u0017\u0000\u0000\u104d\u104f\u0005\u0102\u0000\u0000\u104e"+
		"\u104c\u0001\u0000\u0000\u0000\u104e\u104f\u0001\u0000\u0000\u0000\u104f"+
		"\u1051\u0001\u0000\u0000\u0000\u1050\u1052\u0007\u0001\u0000\u0000\u1051"+
		"\u1050\u0001\u0000\u0000\u0000\u1051\u1052\u0001\u0000\u0000\u0000\u1052"+
		"\u0171\u0001\u0000\u0000\u0000\u1053\u1056\u0005\u0265\u0000\u0000\u1054"+
		"\u1057\u0003\u0208\u0104\u0000\u1055\u1057\u0005\u02fe\u0000\u0000\u1056"+
		"\u1054\u0001\u0000\u0000\u0000\u1056\u1055\u0001\u0000\u0000\u0000\u1057"+
		"\u0173\u0001\u0000\u0000\u0000\u1058\u105a\u0003\u015c\u00ae\u0000\u1059"+
		"\u1058\u0001\u0000\u0000\u0000\u1059\u105a\u0001\u0000\u0000\u0000\u105a"+
		"\u105b\u0001\u0000\u0000\u0000\u105b\u105d\u0005\u026a\u0000\u0000\u105c"+
		"\u105e\u0005\u0181\u0000\u0000\u105d\u105c\u0001\u0000\u0000\u0000\u105d"+
		"\u105e\u0001\u0000\u0000\u0000\u105e\u105f\u0001\u0000\u0000\u0000\u105f"+
		"\u1061\u0003\u01da\u00ed\u0000\u1060\u1062\u0005\u02fe\u0000\u0000\u1061"+
		"\u1060\u0001\u0000\u0000\u0000\u1061\u1062\u0001\u0000\u0000\u0000\u1062"+
		"\u1067\u0001\u0000\u0000\u0000\u1063\u1065\u0005\u001b\u0000\u0000\u1064"+
		"\u1063\u0001\u0000\u0000\u0000\u1064\u1065\u0001\u0000\u0000\u0000\u1065"+
		"\u1066\u0001\u0000\u0000\u0000\u1066\u1068\u0003\u0208\u0104\u0000\u1067"+
		"\u1064\u0001\u0000\u0000\u0000\u1067\u1068\u0001\u0000\u0000\u0000\u1068"+
		"\u1069\u0001\u0000\u0000\u0000\u1069\u106a\u0005\u0207\u0000\u0000\u106a"+
		"\u106c\u0003\u01aa\u00d5\u0000\u106b\u106d\u0003\u0180\u00c0\u0000\u106c"+
		"\u106b\u0001\u0000\u0000\u0000\u106c\u106d\u0001\u0000\u0000\u0000\u106d"+
		"\u1073\u0001\u0000\u0000\u0000\u106e\u1074\u0003\u0182\u00c1\u0000\u106f"+
		"\u1070\u0005\u0284\u0000\u0000\u1070\u1071\u0005\u0085\u0000\u0000\u1071"+
		"\u1072\u0005\u017b\u0000\u0000\u1072\u1074\u0003\u0208\u0104\u0000\u1073"+
		"\u106e\u0001\u0000\u0000\u0000\u1073\u106f\u0001\u0000\u0000\u0000\u1073"+
		"\u1074\u0001\u0000\u0000\u0000\u1074\u1076\u0001\u0000\u0000\u0000\u1075"+
		"\u1077\u0003\u01ae\u00d7\u0000\u1076\u1075\u0001\u0000\u0000\u0000\u1076"+
		"\u1077\u0001\u0000\u0000\u0000\u1077\u0175\u0001\u0000\u0000\u0000\u1078"+
		"\u1079\u0007\u0018\u0000\u0000\u1079\u0177\u0001\u0000\u0000\u0000\u107a"+
		"\u107f\u0003\u0176\u00bb\u0000\u107b\u107c\u0005\u02f9\u0000\u0000\u107c"+
		"\u107e\u0003\u0176\u00bb\u0000\u107d\u107b\u0001\u0000\u0000\u0000\u107e"+
		"\u1081\u0001\u0000\u0000\u0000\u107f\u107d\u0001\u0000\u0000\u0000\u107f"+
		"\u1080\u0001\u0000\u0000\u0000\u1080\u0179\u0001\u0000\u0000\u0000\u1081"+
		"\u107f\u0001\u0000\u0000\u0000\u1082\u1087\u0005\u0273\u0000\u0000\u1083"+
		"\u1084\u0005\u02ff\u0000\u0000\u1084\u1085\u0003\u0178\u00bc\u0000\u1085"+
		"\u1086\u0005\u0300\u0000\u0000\u1086\u1088\u0001\u0000\u0000\u0000\u1087"+
		"\u1083\u0001\u0000\u0000\u0000\u1087\u1088\u0001\u0000\u0000\u0000\u1088"+
		"\u1089\u0001\u0000\u0000\u0000\u1089\u108e\u0003\u01da\u00ed\u0000\u108a"+
		"\u108b\u0005\u02ff\u0000\u0000\u108b\u108c\u0003\u018c\u00c6\u0000\u108c"+
		"\u108d\u0005\u0300\u0000\u0000\u108d\u108f\u0001\u0000\u0000\u0000\u108e"+
		"\u108a\u0001\u0000\u0000\u0000\u108e\u108f\u0001\u0000\u0000\u0000\u108f"+
		"\u10b2\u0001\u0000\u0000\u0000\u1090\u1092\u0005\u0273\u0000\u0000\u1091"+
		"\u1093\u0005\u00ed\u0000\u0000\u1092\u1091\u0001\u0000\u0000\u0000\u1092"+
		"\u1093\u0001\u0000\u0000\u0000\u1093\u1095\u0001\u0000\u0000\u0000\u1094"+
		"\u1096\u0005\u00eb\u0000\u0000\u1095\u1094\u0001\u0000\u0000\u0000\u1095"+
		"\u1096\u0001\u0000\u0000\u0000\u1096\u1098\u0001\u0000\u0000\u0000\u1097"+
		"\u1099\u0005\u027f\u0000\u0000\u1098\u1097\u0001\u0000\u0000\u0000\u1098"+
		"\u1099\u0001\u0000\u0000\u0000\u1099\u109b\u0001\u0000\u0000\u0000\u109a"+
		"\u109c\u0003\u01da\u00ed\u0000\u109b\u109a\u0001\u0000\u0000\u0000\u109b"+
		"\u109c\u0001\u0000\u0000\u0000\u109c\u10b2\u0001\u0000\u0000\u0000\u109d"+
		"\u109f\u0005\u0273\u0000\u0000\u109e\u10a0\u0005\u00ed\u0000\u0000\u109f"+
		"\u109e\u0001\u0000\u0000\u0000\u109f\u10a0\u0001\u0000\u0000\u0000\u10a0"+
		"\u10a2\u0001\u0000\u0000\u0000\u10a1\u10a3\u0005\u00eb\u0000\u0000\u10a2"+
		"\u10a1\u0001\u0000\u0000\u0000\u10a2\u10a3\u0001\u0000\u0000\u0000\u10a3"+
		"\u10a5\u0001\u0000\u0000\u0000\u10a4\u10a6\u0005\u027f\u0000\u0000\u10a5"+
		"\u10a4\u0001\u0000\u0000\u0000\u10a5\u10a6\u0001\u0000\u0000\u0000\u10a6"+
		"\u10a7\u0001\u0000\u0000\u0000\u10a7\u10af\u0005\u0016\u0000\u0000\u10a8"+
		"\u10ad\u0003\u01da\u00ed\u0000\u10a9\u10aa\u0005\u02ff\u0000\u0000\u10aa"+
		"\u10ab\u0003\u018c\u00c6\u0000\u10ab\u10ac\u0005\u0300\u0000\u0000\u10ac"+
		"\u10ae\u0001\u0000\u0000\u0000\u10ad\u10a9\u0001\u0000\u0000\u0000\u10ad"+
		"\u10ae\u0001\u0000\u0000\u0000\u10ae\u10b0\u0001\u0000\u0000\u0000\u10af"+
		"\u10a8\u0001\u0000\u0000\u0000\u10af\u10b0\u0001\u0000\u0000\u0000\u10b0"+
		"\u10b2\u0001\u0000\u0000\u0000\u10b1\u1082\u0001\u0000\u0000\u0000\u10b1"+
		"\u1090\u0001\u0000\u0000\u0000\u10b1\u109d\u0001\u0000\u0000\u0000\u10b2"+
		"\u017b\u0001\u0000\u0000\u0000\u10b3\u10b5\u0003\u015c\u00ae\u0000\u10b4"+
		"\u10b3\u0001\u0000\u0000\u0000\u10b4\u10b5\u0001\u0000\u0000\u0000\u10b5"+
		"\u10c5\u0001\u0000\u0000\u0000\u10b6\u10b7\u0005\u0278\u0000\u0000\u10b7"+
		"\u10c6\u0003\u01be\u00df\u0000\u10b8\u10ba\u0005\u02ff\u0000\u0000\u10b9"+
		"\u10b8\u0001\u0000\u0000\u0000\u10ba\u10bb\u0001\u0000\u0000\u0000\u10bb"+
		"\u10b9\u0001\u0000\u0000\u0000\u10bb\u10bc\u0001\u0000\u0000\u0000\u10bc"+
		"\u10bd\u0001\u0000\u0000\u0000\u10bd\u10bf\u0003\u017c\u00be\u0000\u10be"+
		"\u10c0\u0005\u0300\u0000\u0000\u10bf\u10be\u0001\u0000\u0000\u0000\u10c0"+
		"\u10c1\u0001\u0000\u0000\u0000\u10c1\u10bf\u0001\u0000\u0000\u0000\u10c1"+
		"\u10c2\u0001\u0000\u0000\u0000\u10c2\u10c3\u0001\u0000\u0000\u0000\u10c3"+
		"\u10c4\u0003\u019c\u00ce\u0000\u10c4\u10c6\u0001\u0000\u0000\u0000\u10c5"+
		"\u10b6\u0001\u0000\u0000\u0000\u10c5\u10b9\u0001\u0000\u0000\u0000\u10c6"+
		"\u10c8\u0001\u0000\u0000\u0000\u10c7\u10c9\u0003\u019e\u00cf\u0000\u10c8"+
		"\u10c7\u0001\u0000\u0000\u0000\u10c8\u10c9\u0001\u0000\u0000\u0000\u10c9"+
		"\u10cb\u0001\u0000\u0000\u0000\u10ca\u10cc\u0003\u019c\u00ce\u0000\u10cb"+
		"\u10ca\u0001\u0000\u0000\u0000\u10cb\u10cc\u0001\u0000\u0000\u0000\u10cc"+
		"\u10ce\u0001\u0000\u0000\u0000\u10cd\u10cf\u0003\u01a2\u00d1\u0000\u10ce"+
		"\u10cd\u0001\u0000\u0000\u0000\u10ce\u10cf\u0001\u0000\u0000\u0000\u10cf"+
		"\u10d1\u0001\u0000\u0000\u0000\u10d0\u10d2\u0003\u01a4\u00d2\u0000\u10d1"+
		"\u10d0\u0001\u0000\u0000\u0000\u10d1\u10d2\u0001\u0000\u0000\u0000\u10d2"+
		"\u10d4\u0001\u0000\u0000\u0000\u10d3\u10d5\u0003\u01a6\u00d3\u0000\u10d4"+
		"\u10d3\u0001\u0000\u0000\u0000\u10d4\u10d5\u0001\u0000\u0000\u0000\u10d5"+
		"\u017d\u0001\u0000\u0000\u0000\u10d6\u10dd\u0005\u0010\u0000\u0000\u10d7"+
		"\u10da\u0005\u00b8\u0000\u0000\u10d8\u10d9\u0005\u0180\u0000\u0000\u10d9"+
		"\u10db\u0003\u01bc\u00de\u0000\u10da\u10d8\u0001\u0000\u0000\u0000\u10da"+
		"\u10db\u0001\u0000\u0000\u0000\u10db\u10dd\u0001\u0000\u0000\u0000\u10dc"+
		"\u10d6\u0001\u0000\u0000\u0000\u10dc\u10d7\u0001\u0000\u0000\u0000\u10dc"+
		"\u10dd\u0001\u0000\u0000\u0000\u10dd\u10de\u0001\u0000\u0000\u0000\u10de"+
		"\u10df\u0003\u018c\u00c6\u0000\u10df\u017f\u0001\u0000\u0000\u0000\u10e0"+
		"\u10e1\u0005\u00ec\u0000\u0000\u10e1\u10e6\u0003\u01e8\u00f4\u0000\u10e2"+
		"\u10e3\u0005\u02f9\u0000\u0000\u10e3\u10e5\u0003\u01e8\u00f4\u0000\u10e4"+
		"\u10e2\u0001\u0000\u0000\u0000\u10e5\u10e8\u0001\u0000\u0000\u0000\u10e6"+
		"\u10e4\u0001\u0000\u0000\u0000\u10e6\u10e7\u0001\u0000\u0000\u0000\u10e7"+
		"\u0181\u0001\u0000\u0000\u0000\u10e8\u10e6\u0001\u0000\u0000\u0000\u10e9"+
		"\u10ea\u0005\u0284\u0000\u0000\u10ea\u10eb\u0003\u01f0\u00f8\u0000\u10eb"+
		"\u0183\u0001\u0000\u0000\u0000\u10ec\u10ed\u0005\u00fa\u0000\u0000\u10ed"+
		"\u10ee\u00056\u0000\u0000\u10ee\u10f3\u0003\u0186\u00c3\u0000\u10ef\u10f0"+
		"\u0005\u02f9\u0000\u0000\u10f0\u10f2\u0003\u0186\u00c3\u0000\u10f1\u10ef"+
		"\u0001\u0000\u0000\u0000\u10f2\u10f5\u0001\u0000\u0000\u0000\u10f3\u10f1"+
		"\u0001\u0000\u0000\u0000\u10f3\u10f4\u0001\u0000\u0000\u0000\u10f4\u0185"+
		"\u0001\u0000\u0000\u0000\u10f5\u10f3\u0001\u0000\u0000\u0000\u10f6\u10f7"+
		"\u0005\u02ff\u0000\u0000\u10f7\u1110\u0005\u0300\u0000\u0000\u10f8\u1110"+
		"\u0003\u01b0\u00d8\u0000\u10f9\u1110\u0003\u01bc\u00de\u0000\u10fa\u10fb"+
		"\u0007\u0019\u0000\u0000\u10fb\u10fe\u0005\u02ff\u0000\u0000\u10fc\u10ff"+
		"\u0003\u01b0\u00d8\u0000\u10fd\u10ff\u0003\u01bc\u00de\u0000\u10fe\u10fc"+
		"\u0001\u0000\u0000\u0000\u10fe\u10fd\u0001\u0000\u0000\u0000\u10ff\u1107"+
		"\u0001\u0000\u0000\u0000\u1100\u1103\u0005\u02f9\u0000\u0000\u1101\u1104"+
		"\u0003\u01b0\u00d8\u0000\u1102\u1104\u0003\u01bc\u00de\u0000\u1103\u1101"+
		"\u0001\u0000\u0000\u0000\u1103\u1102\u0001\u0000\u0000\u0000\u1104\u1106"+
		"\u0001\u0000\u0000\u0000\u1105\u1100\u0001\u0000\u0000\u0000\u1106\u1109"+
		"\u0001\u0000\u0000\u0000\u1107\u1105\u0001\u0000\u0000\u0000\u1107\u1108"+
		"\u0001\u0000\u0000\u0000\u1108\u110a\u0001\u0000\u0000\u0000\u1109\u1107"+
		"\u0001\u0000\u0000\u0000\u110a\u110b\u0005\u0300\u0000\u0000\u110b\u1110"+
		"\u0001\u0000\u0000\u0000\u110c\u110d\u0005\u00fb\u0000\u0000\u110d\u110e"+
		"\u0005\u0209\u0000\u0000\u110e\u1110\u0003\u0188\u00c4\u0000\u110f\u10f6"+
		"\u0001\u0000\u0000\u0000\u110f\u10f8\u0001\u0000\u0000\u0000\u110f\u10f9"+
		"\u0001\u0000\u0000\u0000\u110f\u10fa\u0001\u0000\u0000\u0000\u110f\u110c"+
		"\u0001\u0000\u0000\u0000\u1110\u0187\u0001\u0000\u0000\u0000\u1111\u1112"+
		"\u0005\u02ff\u0000\u0000\u1112\u1117\u0003\u0186\u00c3\u0000\u1113\u1114"+
		"\u0005\u02f9\u0000\u0000\u1114\u1116\u0003\u0186\u00c3\u0000\u1115\u1113"+
		"\u0001\u0000\u0000\u0000\u1116\u1119\u0001\u0000\u0000\u0000\u1117\u1115"+
		"\u0001\u0000\u0000\u0000\u1117\u1118\u0001\u0000\u0000\u0000\u1118\u111a"+
		"\u0001\u0000\u0000\u0000\u1119\u1117\u0001\u0000\u0000\u0000\u111a\u111b"+
		"\u0005\u0300\u0000\u0000\u111b\u0189\u0001\u0000\u0000\u0000\u111c\u111d"+
		"\u0005\u00fd\u0000\u0000\u111d\u1122\u0003\u01f0\u00f8\u0000\u111e\u111f"+
		"\u0005\u02f9\u0000\u0000\u111f\u1121\u0003\u01f0\u00f8\u0000\u1120\u111e"+
		"\u0001\u0000\u0000\u0000\u1121\u1124\u0001\u0000\u0000\u0000\u1122\u1120"+
		"\u0001\u0000\u0000\u0000\u1122\u1123\u0001\u0000\u0000\u0000\u1123\u018b"+
		"\u0001\u0000\u0000\u0000\u1124\u1122\u0001\u0000\u0000\u0000\u1125\u112a"+
		"\u0003\u01b0\u00d8\u0000\u1126\u1128\u0005\u001b\u0000\u0000\u1127\u1126"+
		"\u0001\u0000\u0000\u0000\u1127\u1128\u0001\u0000\u0000\u0000\u1128\u1129"+
		"\u0001\u0000\u0000\u0000\u1129\u112b\u0003\u01d0\u00e8\u0000\u112a\u1127"+
		"\u0001\u0000\u0000\u0000\u112a\u112b\u0001\u0000\u0000\u0000\u112b\u112e"+
		"\u0001\u0000\u0000\u0000\u112c\u112e\u0005\u02fe\u0000\u0000\u112d\u1125"+
		"\u0001\u0000\u0000\u0000\u112d\u112c\u0001\u0000\u0000\u0000\u112e\u113c"+
		"\u0001\u0000\u0000\u0000\u112f\u1138\u0005\u02f9\u0000\u0000\u1130\u1135"+
		"\u0003\u01b0\u00d8\u0000\u1131\u1133\u0005\u001b\u0000\u0000\u1132\u1131"+
		"\u0001\u0000\u0000\u0000\u1132\u1133\u0001\u0000\u0000\u0000\u1133\u1134"+
		"\u0001\u0000\u0000\u0000\u1134\u1136\u0003\u01d0\u00e8\u0000\u1135\u1132"+
		"\u0001\u0000\u0000\u0000\u1135\u1136\u0001\u0000\u0000\u0000\u1136\u1139"+
		"\u0001\u0000\u0000\u0000\u1137\u1139\u0005\u02fe\u0000\u0000\u1138\u1130"+
		"\u0001\u0000\u0000\u0000\u1138\u1137\u0001\u0000\u0000\u0000\u1139\u113b"+
		"\u0001\u0000\u0000\u0000\u113a\u112f\u0001\u0000\u0000\u0000\u113b\u113e"+
		"\u0001\u0000\u0000\u0000\u113c\u113a\u0001\u0000\u0000\u0000\u113c\u113d"+
		"\u0001\u0000\u0000\u0000\u113d\u018d\u0001\u0000\u0000\u0000\u113e\u113c"+
		"\u0001\u0000\u0000\u0000\u113f\u1141\u0007\u001a\u0000\u0000\u1140\u1142"+
		"\u0003\u0202\u0101\u0000\u1141\u1140\u0001\u0000\u0000\u0000\u1141\u1142"+
		"\u0001\u0000\u0000\u0000\u1142\u1146\u0001\u0000\u0000\u0000\u1143\u1144"+
		"\u0005\u00e6\u0000\u0000\u1144\u1146\u0007\u001b\u0000\u0000\u1145\u113f"+
		"\u0001\u0000\u0000\u0000\u1145\u1143\u0001\u0000\u0000\u0000\u1146\u018f"+
		"\u0001\u0000\u0000\u0000\u1147\u1148\u0005\u025e\u0000\u0000\u1148\u1154"+
		"\u0005\u01ad\u0000\u0000\u1149\u114a\u0003\u01b4\u00da\u0000\u114a\u114b"+
		"\u0005\u01ad\u0000\u0000\u114b\u1154\u0001\u0000\u0000\u0000\u114c\u114d"+
		"\u0005\u0085\u0000\u0000\u114d\u1154\u0005\u01ec\u0000\u0000\u114e\u114f"+
		"\u0003\u01b4\u00da\u0000\u114f\u1150\u0005\u00e2\u0000\u0000\u1150\u1154"+
		"\u0001\u0000\u0000\u0000\u1151\u1152\u0005\u025e\u0000\u0000\u1152\u1154"+
		"\u0005\u00e2\u0000\u0000\u1153\u1147\u0001\u0000\u0000\u0000\u1153\u1149"+
		"\u0001\u0000\u0000\u0000\u1153\u114c\u0001\u0000\u0000\u0000\u1153\u114e"+
		"\u0001\u0000\u0000\u0000\u1153\u1151\u0001\u0000\u0000\u0000\u1154\u0191"+
		"\u0001\u0000\u0000\u0000\u1155\u1156\u0003\u0190\u00c8\u0000\u1156\u0193"+
		"\u0001\u0000\u0000\u0000\u1157\u1158\u0003\u0190\u00c8\u0000\u1158\u0195"+
		"\u0001\u0000\u0000\u0000\u1159\u115a\u0007\u001c\u0000\u0000\u115a\u1162"+
		"\u0003\u0192\u00c9\u0000\u115b\u115c\u0007\u001c\u0000\u0000\u115c\u115d"+
		"\u0005+\u0000\u0000\u115d\u115e\u0003\u0192\u00c9\u0000\u115e\u115f\u0005"+
		"\u0017\u0000\u0000\u115f\u1160\u0003\u0194\u00ca\u0000\u1160\u1162\u0001"+
		"\u0000\u0000\u0000\u1161\u1159\u0001\u0000\u0000\u0000\u1161\u115b\u0001"+
		"\u0000\u0000\u0000\u1162\u0197\u0001\u0000\u0000\u0000\u1163\u1170\u0003"+
		"\u0218\u010c\u0000\u1164\u1165\u0005\u019f\u0000\u0000\u1165\u1166\u0005"+
		"6\u0000\u0000\u1166\u116b\u0003\u01b0\u00d8\u0000\u1167\u1168\u0005\u02f9"+
		"\u0000\u0000\u1168\u116a\u0003\u01b0\u00d8\u0000\u1169\u1167\u0001\u0000"+
		"\u0000\u0000\u116a\u116d\u0001\u0000\u0000\u0000\u116b\u1169\u0001\u0000"+
		"\u0000\u0000\u116b\u116c\u0001\u0000\u0000\u0000\u116c\u1170\u0001\u0000"+
		"\u0000\u0000\u116d\u116b\u0001\u0000\u0000\u0000\u116e\u1170\u0003\u019e"+
		"\u00cf\u0000\u116f\u1163\u0001\u0000\u0000\u0000\u116f\u1164\u0001\u0000"+
		"\u0000\u0000\u116f\u116e\u0001\u0000\u0000\u0000\u1170\u0199\u0001\u0000"+
		"\u0000\u0000\u1171\u1172\u0005\u0286\u0000\u0000\u1172\u1173\u0003\u0218"+
		"\u010c\u0000\u1173\u1174\u0005\u001b\u0000\u0000\u1174\u1175\u0005\u02ff"+
		"\u0000\u0000\u1175\u1176\u0003\u0198\u00cc\u0000\u1176\u1177\u0005\u0300"+
		"\u0000\u0000\u1177\u019b\u0001\u0000\u0000\u0000\u1178\u117a\u0007\u001d"+
		"\u0000\u0000\u1179\u117b\u0007\u001e\u0000\u0000\u117a\u1179\u0001\u0000"+
		"\u0000\u0000\u117a\u117b\u0001\u0000\u0000\u0000\u117b\u117f\u0001\u0000"+
		"\u0000\u0000\u117c\u117e\u0005";
	private static final String _serializedATNSegment2 =
		"\u02ff\u0000\u0000\u117d\u117c\u0001\u0000\u0000\u0000\u117e\u1181\u0001"+
		"\u0000\u0000\u0000\u117f\u117d\u0001\u0000\u0000\u0000\u117f\u1180\u0001"+
		"\u0000\u0000\u0000\u1180\u1184\u0001\u0000\u0000\u0000\u1181\u117f\u0001"+
		"\u0000\u0000\u0000\u1182\u1185\u0003\u0158\u00ac\u0000\u1183\u1185\u0003"+
		"\u017c\u00be\u0000\u1184\u1182\u0001\u0000\u0000\u0000\u1184\u1183\u0001"+
		"\u0000\u0000\u0000\u1185\u1189\u0001\u0000\u0000\u0000\u1186\u1188\u0005"+
		"\u0300\u0000\u0000\u1187\u1186\u0001\u0000\u0000\u0000\u1188\u118b\u0001"+
		"\u0000\u0000\u0000\u1189\u1187\u0001\u0000\u0000\u0000\u1189\u118a\u0001"+
		"\u0000\u0000\u0000\u118a\u118d\u0001\u0000\u0000\u0000\u118b\u1189\u0001"+
		"\u0000\u0000\u0000\u118c\u118e\u0003\u019c\u00ce\u0000\u118d\u118c\u0001"+
		"\u0000\u0000\u0000\u118d\u118e\u0001\u0000\u0000\u0000\u118e\u019d\u0001"+
		"\u0000\u0000\u0000\u118f\u1190\u0005\u0188\u0000\u0000\u1190\u1191\u0005"+
		"6\u0000\u0000\u1191\u1196\u0003\u01a0\u00d0\u0000\u1192\u1193\u0005\u02f9"+
		"\u0000\u0000\u1193\u1195\u0003\u01a0\u00d0\u0000\u1194\u1192\u0001\u0000"+
		"\u0000\u0000\u1195\u1198\u0001\u0000\u0000\u0000\u1196\u1194\u0001\u0000"+
		"\u0000\u0000\u1196\u1197\u0001\u0000\u0000\u0000\u1197\u019f\u0001\u0000"+
		"\u0000\u0000\u1198\u1196\u0001\u0000\u0000\u0000\u1199\u119c\u0003\u01b0"+
		"\u00d8\u0000\u119a\u119c\u0005\u030a\u0000\u0000\u119b\u1199\u0001\u0000"+
		"\u0000\u0000\u119b\u119a\u0001\u0000\u0000\u0000\u119c\u11a1\u0001\u0000"+
		"\u0000\u0000\u119d\u11a2\u0005\u001c\u0000\u0000\u119e\u11a2\u0005\u00ab"+
		"\u0000\u0000\u119f\u11a0\u0005\u0272\u0000\u0000\u11a0\u11a2\u0003\u01b0"+
		"\u00d8\u0000\u11a1\u119d\u0001\u0000\u0000\u0000\u11a1\u119e\u0001\u0000"+
		"\u0000\u0000\u11a1\u119f\u0001\u0000\u0000\u0000\u11a1\u11a2\u0001\u0000"+
		"\u0000\u0000\u11a2\u11ae\u0001\u0000\u0000\u0000\u11a3\u11a4\u0005\u0175"+
		"\u0000\u0000\u11a4\u11a5\u0007\u001f\u0000\u0000\u11a5\u11ab\u0001\u0000"+
		"\u0000\u0000\u11a6\u11a7\u0005\u02f9\u0000\u0000\u11a7\u11a8\u0005\u0175"+
		"\u0000\u0000\u11a8\u11aa\u0007\u001f\u0000\u0000\u11a9\u11a6\u0001\u0000"+
		"\u0000\u0000\u11aa\u11ad\u0001\u0000\u0000\u0000\u11ab\u11a9\u0001\u0000"+
		"\u0000\u0000\u11ab\u11ac\u0001\u0000\u0000\u0000\u11ac\u11af\u0001\u0000"+
		"\u0000\u0000\u11ad\u11ab\u0001\u0000\u0000\u0000\u11ae\u11a3\u0001\u0000"+
		"\u0000\u0000\u11ae\u11af\u0001\u0000\u0000\u0000\u11af\u01a1\u0001\u0000"+
		"\u0000\u0000\u11b0\u11b4\u0005\u0136\u0000\u0000\u11b1\u11b5\u0003\u01b4"+
		"\u00da\u0000\u11b2\u11b5\u0005\u0010\u0000\u0000\u11b3\u11b5\u0003\u01e4"+
		"\u00f2\u0000\u11b4\u11b1\u0001\u0000\u0000\u0000\u11b4\u11b2\u0001\u0000"+
		"\u0000\u0000\u11b4\u11b3\u0001\u0000\u0000\u0000\u11b5\u01a3\u0001\u0000"+
		"\u0000\u0000\u11b6\u11b7\u0005\u017d\u0000\u0000\u11b7\u11b9\u0003\u01b4"+
		"\u00da\u0000\u11b8\u11ba\u0007 \u0000\u0000\u11b9\u11b8\u0001\u0000\u0000"+
		"\u0000\u11b9\u11ba\u0001\u0000\u0000\u0000\u11ba\u01a5\u0001\u0000\u0000"+
		"\u0000\u11bb\u11bc\u0005\u00db\u0000\u0000\u11bc\u11be\u0007!\u0000\u0000"+
		"\u11bd\u11bf\u0003\u01b4\u00da\u0000\u11be\u11bd\u0001\u0000\u0000\u0000"+
		"\u11be\u11bf\u0001\u0000\u0000\u0000\u11bf\u11c0\u0001\u0000\u0000\u0000"+
		"\u11c0\u11c1\u0007 \u0000\u0000\u11c1\u11c2\u0005\u0181\u0000\u0000\u11c2"+
		"\u01a7\u0001\u0000\u0000\u0000\u11c3\u11cb\u0005\u00e3\u0000\u0000\u11c4"+
		"\u11cc\u0005\u026a\u0000\u0000\u11c5\u11c6\u0005\u0167\u0000\u0000\u11c6"+
		"\u11c7\u0005\u0126\u0000\u0000\u11c7\u11cc\u0005\u026a\u0000\u0000\u11c8"+
		"\u11cc\u0005\u020a\u0000\u0000\u11c9\u11ca\u0005\u0126\u0000\u0000\u11ca"+
		"\u11cc\u0005\u020a\u0000\u0000\u11cb\u11c4\u0001\u0000\u0000\u0000\u11cb"+
		"\u11c5\u0001\u0000\u0000\u0000\u11cb\u11c8\u0001\u0000\u0000\u0000\u11cb"+
		"\u11c9\u0001\u0000\u0000\u0000\u11cc\u11d6\u0001\u0000\u0000\u0000\u11cd"+
		"\u11ce\u0005\u017b\u0000\u0000\u11ce\u11d3\u0003\u01da\u00ed\u0000\u11cf"+
		"\u11d0\u0005\u02f9\u0000\u0000\u11d0\u11d2\u0003\u01da\u00ed\u0000\u11d1"+
		"\u11cf\u0001\u0000\u0000\u0000\u11d2\u11d5\u0001\u0000\u0000\u0000\u11d3"+
		"\u11d1\u0001\u0000\u0000\u0000\u11d3\u11d4\u0001\u0000\u0000\u0000\u11d4"+
		"\u11d7\u0001\u0000\u0000\u0000\u11d5\u11d3\u0001\u0000\u0000\u0000\u11d6"+
		"\u11cd\u0001\u0000\u0000\u0000\u11d6\u11d7\u0001\u0000\u0000\u0000\u11d7"+
		"\u11dd\u0001\u0000\u0000\u0000\u11d8\u11dc\u0005\u0171\u0000\u0000\u11d9"+
		"\u11da\u0005\u020f\u0000\u0000\u11da\u11dc\u0005\u0140\u0000\u0000\u11db"+
		"\u11d8\u0001\u0000\u0000\u0000\u11db\u11d9\u0001\u0000\u0000\u0000\u11dc"+
		"\u11df\u0001\u0000\u0000\u0000\u11dd\u11db\u0001\u0000\u0000\u0000\u11dd"+
		"\u11de\u0001\u0000\u0000\u0000\u11de\u01a9\u0001\u0000\u0000\u0000\u11df"+
		"\u11dd\u0001\u0000\u0000\u0000\u11e0\u11e5\u0003\u01ac\u00d6\u0000\u11e1"+
		"\u11e2\u0005\u02f9\u0000\u0000\u11e2\u11e4\u0003\u01ac\u00d6\u0000\u11e3"+
		"\u11e1\u0001\u0000\u0000\u0000\u11e4\u11e7\u0001\u0000\u0000\u0000\u11e5"+
		"\u11e3\u0001\u0000\u0000\u0000\u11e5\u11e6\u0001\u0000\u0000\u0000\u11e6"+
		"\u01ab\u0001\u0000\u0000\u0000\u11e7\u11e5\u0001\u0000\u0000\u0000\u11e8"+
		"\u11f2\u0003\u01b0\u00d8\u0000\u11e9\u11ea\u0005\u02ff\u0000\u0000\u11ea"+
		"\u11eb\u0003\u01d2\u00e9\u0000\u11eb\u11ec\u0005\u0300\u0000\u0000\u11ec"+
		"\u11ef\u0005\u0318\u0000\u0000\u11ed\u11f0\u0003\u01b0\u00d8\u0000\u11ee"+
		"\u11f0\u0003\u01bc\u00de\u0000\u11ef\u11ed\u0001\u0000\u0000\u0000\u11ef"+
		"\u11ee\u0001\u0000\u0000\u0000\u11f0\u11f2\u0001\u0000\u0000\u0000\u11f1"+
		"\u11e8\u0001\u0000\u0000\u0000\u11f1\u11e9\u0001\u0000\u0000\u0000\u11f2"+
		"\u01ad\u0001\u0000\u0000\u0000\u11f3\u11f4\u0005\u01e1\u0000\u0000\u11f4"+
		"\u11f5\u0003\u018c\u00c6\u0000\u11f5\u01af\u0001\u0000\u0000\u0000\u11f6"+
		"\u11f7\u0006\u00d8\uffff\uffff\u0000\u11f7\u1242\u0005\u0172\u0000\u0000"+
		"\u11f8\u1242\u0005\u0086\u0000\u0000\u11f9\u1242\u0005\u0089\u0000\u0000"+
		"\u11fa\u1242\u0005\u008a\u0000\u0000\u11fb\u1242\u0005\u008b\u0000\u0000"+
		"\u11fc\u1242\u0005\u008d\u0000\u0000\u11fd\u1242\u0005\u009b\u0000\u0000"+
		"\u11fe\u1242\u0005\u0306\u0000\u0000\u11ff\u1242\u0005\u0307\u0000\u0000"+
		"\u1200\u1242\u0005\u0305\u0000\u0000\u1201\u1242\u0005\u0309\u0000\u0000"+
		"\u1202\u1242\u0005\u0303\u0000\u0000\u1203\u1242\u0005\u0304\u0000\u0000"+
		"\u1204\u1206\u0005\u02fd\u0000\u0000\u1205\u1207\b\"\u0000\u0000\u1206"+
		"\u1205\u0001\u0000\u0000\u0000\u1207\u1208\u0001\u0000\u0000\u0000\u1208"+
		"\u1206\u0001\u0000\u0000\u0000\u1208\u1209\u0001\u0000\u0000\u0000\u1209"+
		"\u120a\u0001\u0000\u0000\u0000\u120a\u1242\u0005\u02fd\u0000\u0000\u120b"+
		"\u120c\u0005\u02fc\u0000\u0000\u120c\u120e\u0003\u0208\u0104\u0000\u120d"+
		"\u120f\b\"\u0000\u0000\u120e\u120d\u0001\u0000\u0000\u0000\u120f\u1210"+
		"\u0001\u0000\u0000\u0000\u1210\u120e\u0001\u0000\u0000\u0000\u1210\u1211"+
		"\u0001\u0000\u0000\u0000\u1211\u1212\u0001\u0000\u0000\u0000\u1212\u1213"+
		"\u0005\u02fc\u0000\u0000\u1213\u1214\u0003\u0208\u0104\u0000\u1214\u1215"+
		"\u0005\u02fc\u0000\u0000\u1215\u1242\u0001\u0000\u0000\u0000\u1216\u1242"+
		"\u0003\u01b8\u00dc\u0000\u1217\u1242\u0003\u017c\u00be\u0000\u1218\u1242"+
		"\u0003\u01bc\u00de\u0000\u1219\u121a\u0005\u02ff\u0000\u0000\u121a\u121b"+
		"\u0003\u01b0\u00d8\u0000\u121b\u121c\u0005\u0300\u0000\u0000\u121c\u1242"+
		"\u0001\u0000\u0000\u0000\u121d\u121e\u0003\u01c8\u00e4\u0000\u121e\u121f"+
		"\u0005\u0309\u0000\u0000\u121f\u1242\u0001\u0000\u0000\u0000\u1220\u1221"+
		"\u0007#\u0000\u0000\u1221\u1242\u0003\u01b0\u00d8\u001f\u1222\u1223\u0007"+
		"$\u0000\u0000\u1223\u1242\u0003\u01b0\u00d8\u001e\u1224\u1225\u0007%\u0000"+
		"\u0000\u1225\u1242\u0003\u01b0\u00d8\u0012\u1226\u1242\u0003\u01e4\u00f2"+
		"\u0000\u1227\u1242\u0003\u0208\u0104\u0000\u1228\u1229\u0005?\u0000\u0000"+
		"\u1229\u122a\u0005\u02ff\u0000\u0000\u122a\u122b\u0003\u01b0\u00d8\u0000"+
		"\u122b\u122c\u0005\u001b\u0000\u0000\u122c\u122d\u0003\u01dc\u00ee\u0000"+
		"\u122d\u122e\u0005\u0300\u0000\u0000\u122e\u1242\u0001\u0000\u0000\u0000"+
		"\u122f\u1230\u0003\u020e\u0107\u0000\u1230\u1231\u0005\u0308\u0000\u0000"+
		"\u1231\u1232\u0003\u0210\u0108\u0000\u1232\u1242\u0001\u0000\u0000\u0000"+
		"\u1233\u1242\u0003\u01ba\u00dd\u0000\u1234\u1235\u0003\u01dc\u00ee\u0000"+
		"\u1235\u1236\u0003\u01b0\u00d8\n\u1236\u1242\u0001\u0000\u0000\u0000\u1237"+
		"\u1242\u0003\u01ce\u00e7\u0000\u1238\u1242\u0003\u01e6\u00f3\u0000\u1239"+
		"\u123a\u0005\u00d3\u0000\u0000\u123a\u1242\u0003\u01b0\u00d8\u0004\u123b"+
		"\u1242\u0005\u030c\u0000\u0000\u123c\u123d\u0005\u02ff\u0000\u0000\u123d"+
		"\u123e\u0003\u0158\u00ac\u0000\u123e\u123f\u0005\u0300\u0000\u0000\u123f"+
		"\u1242\u0001\u0000\u0000\u0000\u1240\u1242\u0003\u01b2\u00d9\u0000\u1241"+
		"\u11f6\u0001\u0000\u0000\u0000\u1241\u11f8\u0001\u0000\u0000\u0000\u1241"+
		"\u11f9\u0001\u0000\u0000\u0000\u1241\u11fa\u0001\u0000\u0000\u0000\u1241"+
		"\u11fb\u0001\u0000\u0000\u0000\u1241\u11fc\u0001\u0000\u0000\u0000\u1241"+
		"\u11fd\u0001\u0000\u0000\u0000\u1241\u11fe\u0001\u0000\u0000\u0000\u1241"+
		"\u11ff\u0001\u0000\u0000\u0000\u1241\u1200\u0001\u0000\u0000\u0000\u1241"+
		"\u1201\u0001\u0000\u0000\u0000\u1241\u1202\u0001\u0000\u0000\u0000\u1241"+
		"\u1203\u0001\u0000\u0000\u0000\u1241\u1204\u0001\u0000\u0000\u0000\u1241"+
		"\u120b\u0001\u0000\u0000\u0000\u1241\u1216\u0001\u0000\u0000\u0000\u1241"+
		"\u1217\u0001\u0000\u0000\u0000\u1241\u1218\u0001\u0000\u0000\u0000\u1241"+
		"\u1219\u0001\u0000\u0000\u0000\u1241\u121d\u0001\u0000\u0000\u0000\u1241"+
		"\u1220\u0001\u0000\u0000\u0000\u1241\u1222\u0001\u0000\u0000\u0000\u1241"+
		"\u1224\u0001\u0000\u0000\u0000\u1241\u1226\u0001\u0000\u0000\u0000\u1241"+
		"\u1227\u0001\u0000\u0000\u0000\u1241\u1228\u0001\u0000\u0000\u0000\u1241"+
		"\u122f\u0001\u0000\u0000\u0000\u1241\u1233\u0001\u0000\u0000\u0000\u1241"+
		"\u1234\u0001\u0000\u0000\u0000\u1241\u1237\u0001\u0000\u0000\u0000\u1241"+
		"\u1238\u0001\u0000\u0000\u0000\u1241\u1239\u0001\u0000\u0000\u0000\u1241"+
		"\u123b\u0001\u0000\u0000\u0000\u1241\u123c\u0001\u0000\u0000\u0000\u1241"+
		"\u1240\u0001\u0000\u0000\u0000\u1242\u12a6\u0001\u0000\u0000\u0000\u1243"+
		"\u1244\n\u001c\u0000\u0000\u1244\u1245\u0007&\u0000\u0000\u1245\u12a5"+
		"\u0003\u01b0\u00d8\u001d\u1246\u1247\n\u001b\u0000\u0000\u1247\u1248\u0007"+
		"\'\u0000\u0000\u1248\u12a5\u0003\u01b0\u00d8\u001c\u1249\u124a\n\u001a"+
		"\u0000\u0000\u124a\u124b\u0007(\u0000\u0000\u124b\u12a5\u0003\u01b0\u00d8"+
		"\u001b\u124c\u124d\n\u0019\u0000\u0000\u124d\u124e\u0007)\u0000\u0000"+
		"\u124e\u12a5\u0003\u01b0\u00d8\u001a\u124f\u1253\n\u0018\u0000\u0000\u1250"+
		"\u1251\u0005\u016d\u0000\u0000\u1251\u1254\u0005\u0135\u0000\u0000\u1252"+
		"\u1254\u0005\u0135\u0000\u0000\u1253\u1250\u0001\u0000\u0000\u0000\u1253"+
		"\u1252\u0001\u0000\u0000\u0000\u1254\u1255\u0001\u0000\u0000\u0000\u1255"+
		"\u12a5\u0003\u01b0\u00d8\u0019\u1256\u1258\n\u0017\u0000\u0000\u1257\u1259"+
		"\u0005\u016d\u0000\u0000\u1258\u1257\u0001\u0000\u0000\u0000\u1258\u1259"+
		"\u0001\u0000\u0000\u0000\u1259\u125a\u0001\u0000\u0000\u0000\u125a\u125b"+
		"\u0005+\u0000\u0000\u125b\u125c\u0003\u01b0\u00d8\u0000\u125c\u125d\u0005"+
		"\u0017\u0000\u0000\u125d\u125e\u0003\u01b0\u00d8\u0018\u125e\u12a5\u0001"+
		"\u0000\u0000\u0000\u125f\u1260\n\u0016\u0000\u0000\u1260\u1261\u0005\u0109"+
		"\u0000\u0000\u1261\u12a5\u0003\u01b0\u00d8\u0017\u1262\u1263\n\u0015\u0000"+
		"\u0000\u1263\u1264\u0007*\u0000\u0000\u1264\u12a5\u0003\u01b0\u00d8\u0016"+
		"\u1265\u1266\n\u0013\u0000\u0000\u1266\u1268\u0005\u0121\u0000\u0000\u1267"+
		"\u1269\u0005\u016d\u0000\u0000\u1268\u1267\u0001\u0000\u0000\u0000\u1268"+
		"\u1269\u0001\u0000\u0000\u0000\u1269\u126a\u0001\u0000\u0000\u0000\u126a"+
		"\u126b\u0005\u00b8\u0000\u0000\u126b\u126c\u0005\u00ec\u0000\u0000\u126c"+
		"\u12a5\u0003\u01b0\u00d8\u0014\u126d\u126e\n\"\u0000\u0000\u126e\u126f"+
		"\u0005\u0301\u0000\u0000\u126f\u1270\u0003\u01b0\u00d8\u0000\u1270\u1271"+
		"\u0005\u0302\u0000\u0000\u1271\u12a5\u0001\u0000\u0000\u0000\u1272\u1273"+
		"\n\u001d\u0000\u0000\u1273\u12a5\u0005\u0314\u0000\u0000\u1274\u1275\n"+
		"\u0014\u0000\u0000\u1275\u127a\u0005\u0121\u0000\u0000\u1276\u127b\u0003"+
		"\u01b8\u00dc\u0000\u1277\u127b\u0005\u0172\u0000\u0000\u1278\u1279\u0005"+
		"\u016d\u0000\u0000\u1279\u127b\u0005\u0172\u0000\u0000\u127a\u1276\u0001"+
		"\u0000\u0000\u0000\u127a\u1277\u0001\u0000\u0000\u0000\u127a\u1278\u0001"+
		"\u0000\u0000\u0000\u127b\u12a5\u0001\u0000\u0000\u0000\u127c\u1286\n\f"+
		"\u0000\u0000\u127d\u127f\u0005\u0301\u0000\u0000\u127e\u1280\u0003\u01b0"+
		"\u00d8\u0000\u127f\u127e\u0001\u0000\u0000\u0000\u127f\u1280\u0001\u0000"+
		"\u0000\u0000\u1280\u1281\u0001\u0000\u0000\u0000\u1281\u1283\u0005\u02fa"+
		"\u0000\u0000\u1282\u1284\u0003\u01b0\u00d8\u0000\u1283\u1282\u0001\u0000"+
		"\u0000\u0000\u1283\u1284\u0001\u0000\u0000\u0000\u1284\u1285\u0001\u0000"+
		"\u0000\u0000\u1285\u1287\u0005\u0302\u0000\u0000\u1286\u127d\u0001\u0000"+
		"\u0000\u0000\u1287\u1288\u0001\u0000\u0000\u0000\u1288\u1286\u0001\u0000"+
		"\u0000\u0000\u1288\u1289\u0001\u0000\u0000\u0000\u1289\u12a5\u0001\u0000"+
		"\u0000\u0000\u128a\u128d\n\u000b\u0000\u0000\u128b\u128c\u0005\u02fb\u0000"+
		"\u0000\u128c\u128e\u0003\u01dc\u00ee\u0000\u128d\u128b\u0001\u0000\u0000"+
		"\u0000\u128e\u128f\u0001\u0000\u0000\u0000\u128f\u128d\u0001\u0000\u0000"+
		"\u0000\u128f\u1290\u0001\u0000\u0000\u0000\u1290\u12a5\u0001\u0000\u0000"+
		"\u0000\u1291\u1292\n\t\u0000\u0000\u1292\u1293\u0005\u0121\u0000\u0000"+
		"\u1293\u1294\u0005\u017b\u0000\u0000\u1294\u1295\u0005\u02ff\u0000\u0000"+
		"\u1295\u1296\u0003\u01dc\u00ee\u0000\u1296\u1297\u0005\u0300\u0000\u0000"+
		"\u1297\u12a5\u0001\u0000\u0000\u0000\u1298\u1299\n\b\u0000\u0000\u1299"+
		"\u129c\u0005\u0308\u0000\u0000\u129a\u129d\u0003\u0208\u0104\u0000\u129b"+
		"\u129d\u0005\u02fe\u0000\u0000\u129c\u129a\u0001\u0000\u0000\u0000\u129c"+
		"\u129b\u0001\u0000\u0000\u0000\u129d\u12a5\u0001\u0000\u0000\u0000\u129e"+
		"\u129f\n\u0005\u0000\u0000\u129f\u12a0\u0005!\u0000\u0000\u12a0\u12a1"+
		"\u0005\u0242\u0000\u0000\u12a1\u12a2\u0005\u028f\u0000\u0000\u12a2\u12a3"+
		"\u0001\u0000\u0000\u0000\u12a3\u12a5\u0005\u0309\u0000\u0000\u12a4\u1243"+
		"\u0001\u0000\u0000\u0000\u12a4\u1246\u0001\u0000\u0000\u0000\u12a4\u1249"+
		"\u0001\u0000\u0000\u0000\u12a4\u124c\u0001\u0000\u0000\u0000\u12a4\u124f"+
		"\u0001\u0000\u0000\u0000\u12a4\u1256\u0001\u0000\u0000\u0000\u12a4\u125f"+
		"\u0001\u0000\u0000\u0000\u12a4\u1262\u0001\u0000\u0000\u0000\u12a4\u1265"+
		"\u0001\u0000\u0000\u0000\u12a4\u126d\u0001\u0000\u0000\u0000\u12a4\u1272"+
		"\u0001\u0000\u0000\u0000\u12a4\u1274\u0001\u0000\u0000\u0000\u12a4\u127c"+
		"\u0001\u0000\u0000\u0000\u12a4\u128a\u0001\u0000\u0000\u0000\u12a4\u1291"+
		"\u0001\u0000\u0000\u0000\u12a4\u1298\u0001\u0000\u0000\u0000\u12a4\u129e"+
		"\u0001\u0000\u0000\u0000\u12a5\u12a8\u0001\u0000\u0000\u0000\u12a6\u12a4"+
		"\u0001\u0000\u0000\u0000\u12a6\u12a7\u0001\u0000\u0000\u0000\u12a7\u01b1"+
		"\u0001\u0000\u0000\u0000\u12a8\u12a6\u0001\u0000\u0000\u0000\u12a9\u12aa"+
		"\u0005\u02fa\u0000\u0000\u12aa\u12b8\u0005\u0344\u0000\u0000\u12ab\u12ac"+
		"\u0005\u02fa\u0000\u0000\u12ac\u12b8\u0003\u0208\u0104\u0000\u12ad\u12ae"+
		"\u0005\u02fa\u0000\u0000\u12ae\u12b8\u0003\u0204\u0102\u0000\u12af\u12b0"+
		"\u0005\u02fa\u0000\u0000\u12b0\u12b8\u0005\u0306\u0000\u0000\u12b1\u12b2"+
		"\u0005\u0335\u0000\u0000\u12b2\u12b8\u0005\u0344\u0000\u0000\u12b3\u12b5"+
		"\u0005\u0335\u0000\u0000\u12b4\u12b6\u0005\u0306\u0000\u0000\u12b5\u12b4"+
		"\u0001\u0000\u0000\u0000\u12b5\u12b6\u0001\u0000\u0000\u0000\u12b6\u12b8"+
		"\u0001\u0000\u0000\u0000\u12b7\u12a9\u0001\u0000\u0000\u0000\u12b7\u12ab"+
		"\u0001\u0000\u0000\u0000\u12b7\u12ad\u0001\u0000\u0000\u0000\u12b7\u12af"+
		"\u0001\u0000\u0000\u0000\u12b7\u12b1\u0001\u0000\u0000\u0000\u12b7\u12b3"+
		"\u0001\u0000\u0000\u0000\u12b8\u01b3\u0001\u0000\u0000\u0000\u12b9\u12bc"+
		"\u0003\u01b2\u00d9\u0000\u12ba\u12bc\u0005\u0306\u0000\u0000\u12bb\u12b9"+
		"\u0001\u0000\u0000\u0000\u12bb\u12ba\u0001\u0000\u0000\u0000\u12bc\u01b5"+
		"\u0001\u0000\u0000\u0000\u12bd\u12c0\u0003\u01b2\u00d9\u0000\u12be\u12c0"+
		"\u0005\u0305\u0000\u0000\u12bf\u12bd\u0001\u0000\u0000\u0000\u12bf\u12be"+
		"\u0001\u0000\u0000\u0000\u12c0\u01b7\u0001\u0000\u0000\u0000\u12c1\u12c2"+
		"\u0006\u00dc\uffff\uffff\u0000\u12c2\u12c7\u0005\u0259\u0000\u0000\u12c3"+
		"\u12c7\u0005\u00da\u0000\u0000\u12c4\u12c5\u0005\u016d\u0000\u0000\u12c5"+
		"\u12c7\u0003\u01b8\u00dc\u0003\u12c6\u12c1\u0001\u0000\u0000\u0000\u12c6"+
		"\u12c3\u0001\u0000\u0000\u0000\u12c6\u12c4\u0001\u0000\u0000\u0000\u12c7"+
		"\u12d0\u0001\u0000\u0000\u0000\u12c8\u12c9\n\u0002\u0000\u0000\u12c9\u12ca"+
		"\u0005\u0017\u0000\u0000\u12ca\u12cf\u0003\u01b8\u00dc\u0003\u12cb\u12cc"+
		"\n\u0001\u0000\u0000\u12cc\u12cd\u0005\u0187\u0000\u0000\u12cd\u12cf\u0003"+
		"\u01b8\u00dc\u0002\u12ce\u12c8\u0001\u0000\u0000\u0000\u12ce\u12cb\u0001"+
		"\u0000\u0000\u0000\u12cf\u12d2\u0001\u0000\u0000\u0000\u12d0\u12ce\u0001"+
		"\u0000\u0000\u0000\u12d0\u12d1\u0001\u0000\u0000\u0000\u12d1\u01b9\u0001"+
		"\u0000\u0000\u0000\u12d2\u12d0\u0001\u0000\u0000\u0000\u12d3\u12d4\u0005"+
		">\u0000\u0000\u12d4\u12da\u0003\u01b0\u00d8\u0000\u12d5\u12d6\u0005\u0282"+
		"\u0000\u0000\u12d6\u12d7\u0003\u01b0\u00d8\u0000\u12d7\u12d8\u0005\u0240"+
		"\u0000\u0000\u12d8\u12d9\u0003\u01b0\u00d8\u0000\u12d9\u12db\u0001\u0000"+
		"\u0000\u0000\u12da\u12d5\u0001\u0000\u0000\u0000\u12db\u12dc\u0001\u0000"+
		"\u0000\u0000\u12dc\u12da\u0001\u0000\u0000\u0000\u12dc\u12dd\u0001\u0000"+
		"\u0000\u0000\u12dd\u12e0\u0001\u0000\u0000\u0000\u12de\u12df\u0005\u00c2"+
		"\u0000\u0000\u12df\u12e1\u0003\u01b0\u00d8\u0000\u12e0\u12de\u0001\u0000"+
		"\u0000\u0000\u12e0\u12e1\u0001\u0000\u0000\u0000\u12e1\u12e2\u0001\u0000"+
		"\u0000\u0000\u12e2\u12e3\u0005\u00c6\u0000\u0000\u12e3\u12f5\u0001\u0000"+
		"\u0000\u0000\u12e4\u12ea\u0005>\u0000\u0000\u12e5\u12e6\u0005\u0282\u0000"+
		"\u0000\u12e6\u12e7\u0003\u01f0\u00f8\u0000\u12e7\u12e8\u0005\u0240\u0000"+
		"\u0000\u12e8\u12e9\u0003\u01b0\u00d8\u0000\u12e9\u12eb\u0001\u0000\u0000"+
		"\u0000\u12ea\u12e5\u0001\u0000\u0000\u0000\u12eb\u12ec\u0001\u0000\u0000"+
		"\u0000\u12ec\u12ea\u0001\u0000\u0000\u0000\u12ec\u12ed\u0001\u0000\u0000"+
		"\u0000\u12ed\u12f0\u0001\u0000\u0000\u0000\u12ee\u12ef\u0005\u00c2\u0000"+
		"\u0000\u12ef\u12f1\u0003\u01b0\u00d8\u0000\u12f0\u12ee\u0001\u0000\u0000"+
		"\u0000\u12f0\u12f1\u0001\u0000\u0000\u0000\u12f1\u12f2\u0001\u0000\u0000"+
		"\u0000\u12f2\u12f3\u0005\u00c6\u0000\u0000\u12f3\u12f5\u0001\u0000\u0000"+
		"\u0000\u12f4\u12d3\u0001\u0000\u0000\u0000\u12f4\u12e4\u0001\u0000\u0000"+
		"\u0000\u12f5\u01bb\u0001\u0000\u0000\u0000\u12f6\u12f7\u0005\u02ff\u0000"+
		"\u0000\u12f7\u12fc\u0003\u01b0\u00d8\u0000\u12f8\u12f9\u0005\u02f9\u0000"+
		"\u0000\u12f9\u12fb\u0003\u01b0\u00d8\u0000\u12fa\u12f8\u0001\u0000\u0000"+
		"\u0000\u12fb\u12fe\u0001\u0000\u0000\u0000\u12fc\u12fa\u0001\u0000\u0000"+
		"\u0000\u12fc\u12fd\u0001\u0000\u0000\u0000\u12fd\u12ff\u0001\u0000\u0000"+
		"\u0000\u12fe\u12fc\u0001\u0000\u0000\u0000\u12ff\u1300\u0005\u0300\u0000"+
		"\u0000\u1300\u01bd\u0001\u0000\u0000\u0000\u1301\u1303\u0005\u02ff\u0000"+
		"\u0000\u1302\u1301\u0001\u0000\u0000\u0000\u1302\u1303\u0001\u0000\u0000"+
		"\u0000\u1303\u1304\u0001\u0000\u0000\u0000\u1304\u1309\u0003\u01bc\u00de"+
		"\u0000\u1305\u1306\u0005\u02f9\u0000\u0000\u1306\u1308\u0003\u01bc\u00de"+
		"\u0000\u1307\u1305\u0001\u0000\u0000\u0000\u1308\u130b\u0001\u0000\u0000"+
		"\u0000\u1309\u1307\u0001\u0000\u0000\u0000\u1309\u130a\u0001\u0000\u0000"+
		"\u0000\u130a\u130d\u0001\u0000\u0000\u0000\u130b\u1309\u0001\u0000\u0000"+
		"\u0000\u130c\u130e\u0005\u0300\u0000\u0000\u130d\u130c\u0001\u0000\u0000"+
		"\u0000\u130d\u130e\u0001\u0000\u0000\u0000\u130e\u01bf\u0001\u0000\u0000"+
		"\u0000\u130f\u1311\u0007+\u0000\u0000\u1310\u130f\u0001\u0000\u0000\u0000"+
		"\u1310\u1311\u0001\u0000\u0000\u0000\u1311\u1313\u0001\u0000\u0000\u0000"+
		"\u1312\u1314\u0003\u0208\u0104\u0000\u1313\u1312\u0001\u0000\u0000\u0000"+
		"\u1313\u1314\u0001\u0000\u0000\u0000\u1314\u1315\u0001\u0000\u0000\u0000"+
		"\u1315\u1317\u0003\u01dc\u00ee\u0000\u1316\u1310\u0001\u0000\u0000\u0000"+
		"\u1316\u1317\u0001\u0000\u0000\u0000\u1317\u01c1\u0001\u0000\u0000\u0000"+
		"\u1318\u131d\u0003\u01c0\u00e0\u0000\u1319\u131a\u0005\u02f9\u0000\u0000"+
		"\u131a\u131c\u0003\u01c0\u00e0\u0000\u131b\u1319\u0001\u0000\u0000\u0000"+
		"\u131c\u131f\u0001\u0000\u0000\u0000\u131d\u131b\u0001\u0000\u0000\u0000"+
		"\u131d\u131e\u0001\u0000\u0000\u0000\u131e\u01c3\u0001\u0000\u0000\u0000"+
		"\u131f\u131d\u0001\u0000\u0000\u0000\u1320\u1325\u0003\u0208\u0104\u0000"+
		"\u1321\u1322\u0005\u02ff\u0000\u0000\u1322\u1323\u0003\u01c2\u00e1\u0000"+
		"\u1323\u1324\u0005\u0300\u0000\u0000\u1324\u1326\u0001\u0000\u0000\u0000"+
		"\u1325\u1321\u0001\u0000\u0000\u0000\u1325\u1326\u0001\u0000\u0000\u0000"+
		"\u1326\u01c5\u0001\u0000\u0000\u0000\u1327\u132c\u0003\u01c4\u00e2\u0000"+
		"\u1328\u1329\u0005\u02f9\u0000\u0000\u1329\u132b\u0003\u01c4\u00e2\u0000"+
		"\u132a\u1328\u0001\u0000\u0000\u0000\u132b\u132e\u0001\u0000\u0000\u0000"+
		"\u132c\u132a\u0001\u0000\u0000\u0000\u132c\u132d\u0001\u0000\u0000\u0000"+
		"\u132d\u01c7\u0001\u0000\u0000\u0000\u132e\u132c\u0001\u0000\u0000\u0000"+
		"\u132f\u13c0\u0005\u02d0\u0000\u0000\u1330\u13c0\u0005\u02e9\u0000\u0000"+
		"\u1331\u13c0\u0005,\u0000\u0000\u1332\u13c0\u0005\u02d1\u0000\u0000\u1333"+
		"\u1337\u0005.\u0000\u0000\u1334\u1335\u0005\u02ff\u0000\u0000\u1335\u1336"+
		"\u0005\u0306\u0000\u0000\u1336\u1338\u0005\u0300\u0000\u0000\u1337\u1334"+
		"\u0001\u0000\u0000\u0000\u1337\u1338\u0001\u0000\u0000\u0000\u1338\u13c0"+
		"\u0001\u0000\u0000\u0000\u1339\u133d\u0005\u02d2\u0000\u0000\u133a\u133b"+
		"\u0005\u02ff\u0000\u0000\u133b\u133c\u0005\u0306\u0000\u0000\u133c\u133e"+
		"\u0005\u0300\u0000\u0000\u133d\u133a\u0001\u0000\u0000\u0000\u133d\u133e"+
		"\u0001\u0000\u0000\u0000\u133e\u13c0\u0001\u0000\u0000\u0000\u133f\u13c0"+
		"\u0005\u02d3\u0000\u0000\u1340\u13c0\u00052\u0000\u0000\u1341\u13c0\u0005"+
		"\u02d4\u0000\u0000\u1342\u13c0\u0005\u02d5\u0000\u0000\u1343\u1347\u0005"+
		"E\u0000\u0000\u1344\u1345\u0005\u02ff\u0000\u0000\u1345\u1346\u0005\u0306"+
		"\u0000\u0000\u1346\u1348\u0005\u0300\u0000\u0000\u1347\u1344\u0001\u0000"+
		"\u0000\u0000\u1347\u1348\u0001\u0000\u0000\u0000\u1348\u13c0\u0001\u0000"+
		"\u0000\u0000\u1349\u134d\u0005G\u0000\u0000\u134a\u134b\u0005\u02ff\u0000"+
		"\u0000\u134b\u134c\u0005\u0306\u0000\u0000\u134c\u134e\u0005\u0300\u0000"+
		"\u0000\u134d\u134a\u0001\u0000\u0000\u0000\u134d\u134e\u0001\u0000\u0000"+
		"\u0000\u134e\u13c0\u0001\u0000\u0000\u0000\u134f\u1353\u0005\u02d6\u0000"+
		"\u0000\u1350\u1351\u0005\u02ff\u0000\u0000\u1351\u1352\u0005\u0306\u0000"+
		"\u0000\u1352\u1354\u0005\u0300\u0000\u0000\u1353\u1350\u0001\u0000\u0000"+
		"\u0000\u1353\u1354\u0001\u0000\u0000\u0000\u1354\u13c0\u0001\u0000\u0000"+
		"\u0000\u1355\u13c0\u0005\u02d7\u0000\u0000\u1356\u13c0\u0005\u02d8\u0000"+
		"\u0000\u1357\u13c0\u0005\u0093\u0000\u0000\u1358\u135e\u0005\u0099\u0000"+
		"\u0000\u1359\u135a\u0005\u02ff\u0000\u0000\u135a\u135b\u0005\u0306\u0000"+
		"\u0000\u135b\u135c\u0005\u02f9\u0000\u0000\u135c\u135d\u0005\u0306\u0000"+
		"\u0000\u135d\u135f\u0005\u0300\u0000\u0000\u135e\u1359\u0001\u0000\u0000"+
		"\u0000\u135e\u135f\u0001\u0000\u0000\u0000\u135f\u13c0\u0001\u0000\u0000"+
		"\u0000\u1360\u1361\u0005\u00bb\u0000\u0000\u1361\u13c0\u0005\u01ae\u0000"+
		"\u0000\u1362\u13c0\u0005\u02d9\u0000\u0000\u1363\u13c0\u0005\u02da\u0000"+
		"\u0000\u1364\u13c0\u0005\u02db\u0000\u0000\u1365\u13c0\u0005\u011a\u0000"+
		"\u0000\u1366\u13c0\u0005\u02dd\u0000\u0000\u1367\u13c0\u0005\u02dc\u0000"+
		"\u0000\u1368\u13c0\u0005\u02de\u0000\u0000\u1369\u13c0\u0005\u011b\u0000"+
		"\u0000\u136a\u136c\u0005\u011e\u0000\u0000\u136b\u136d\u0005\u00dc\u0000"+
		"\u0000\u136c\u136b\u0001\u0000\u0000\u0000\u136c\u136d\u0001\u0000\u0000"+
		"\u0000\u136d\u136f\u0001\u0000\u0000\u0000\u136e\u1370\u0005\u0306\u0000"+
		"\u0000\u136f\u136e\u0001\u0000\u0000\u0000\u136f\u1370\u0001\u0000\u0000"+
		"\u0000\u1370\u13c0\u0001\u0000\u0000\u0000\u1371\u13c0\u0005\u02df\u0000"+
		"\u0000\u1372\u13c0\u0005\u02e0\u0000\u0000\u1373\u13c0\u0005\u02e1\u0000"+
		"\u0000\u1374\u13c0\u0005\u02e2\u0000\u0000\u1375\u13c0\u0005\u02e3\u0000"+
		"\u0000\u1376\u13c0\u0005\u02e4\u0000\u0000\u1377\u13c0\u0005\u02e5\u0000"+
		"\u0000\u1378\u137e\u0005\u0177\u0000\u0000\u1379\u137a\u0005\u02ff\u0000"+
		"\u0000\u137a\u137b\u0005\u0306\u0000\u0000\u137b\u137c\u0005\u02f9\u0000"+
		"\u0000\u137c\u137d\u0005\u0306\u0000\u0000\u137d\u137f\u0005\u0300\u0000"+
		"\u0000\u137e\u1379\u0001\u0000\u0000\u0000\u137e\u137f\u0001\u0000\u0000"+
		"\u0000\u137f\u13c0\u0001\u0000\u0000\u0000\u1380\u13c0\u0005\u01a2\u0000"+
		"\u0000\u1381\u13c0\u0005\u02e6\u0000\u0000\u1382\u13c0\u0005\u02e7\u0000"+
		"\u0000\u1383\u13c0\u0005\u02e8\u0000\u0000\u1384\u13c0\u0005\u01c0\u0000"+
		"\u0000\u1385\u13c0\u0005\u02ea\u0000\u0000\u1386\u13c0\u0005\u02eb\u0000"+
		"\u0000\u1387\u13c0\u0005\u02ec\u0000\u0000\u1388\u13c0\u0005\u02ed\u0000"+
		"\u0000\u1389\u13c0\u0005\u0210\u0000\u0000\u138a\u13c0\u0005\u02ee\u0000"+
		"\u0000\u138b\u13c0\u0005\u02f0\u0000\u0000\u138c\u1390\u0005\u0242\u0000"+
		"\u0000\u138d\u138e\u0005\u02ff\u0000\u0000\u138e\u138f\u0005\u0306\u0000"+
		"\u0000\u138f\u1391\u0005\u0300\u0000\u0000\u1390\u138d\u0001\u0000\u0000"+
		"\u0000\u1390\u1391\u0001\u0000\u0000\u0000\u1391\u1395\u0001\u0000\u0000"+
		"\u0000\u1392\u1393\u0007,\u0000\u0000\u1393\u1394\u0005\u0242\u0000\u0000"+
		"\u1394\u1396\u0005\u028f\u0000\u0000\u1395\u1392\u0001\u0000\u0000\u0000"+
		"\u1395\u1396\u0001\u0000\u0000\u0000\u1396\u13c0\u0001\u0000\u0000\u0000"+
		"\u1397\u139b\u0005\u0243\u0000\u0000\u1398\u1399\u0005\u02ff\u0000\u0000"+
		"\u1399\u139a\u0005\u0306\u0000\u0000\u139a\u139c\u0005\u0300\u0000\u0000"+
		"\u139b\u1398\u0001\u0000\u0000\u0000\u139b\u139c\u0001\u0000\u0000\u0000"+
		"\u139c\u13a0\u0001\u0000\u0000\u0000\u139d\u139e\u0007,\u0000\u0000\u139e"+
		"\u139f\u0005\u0242\u0000\u0000\u139f\u13a1\u0005\u028f\u0000\u0000\u13a0"+
		"\u139d\u0001\u0000\u0000\u0000\u13a0\u13a1\u0001\u0000\u0000\u0000\u13a1"+
		"\u13c0\u0001\u0000\u0000\u0000\u13a2\u13a6\u0005\u02f2\u0000\u0000\u13a3"+
		"\u13a4\u0005\u02ff\u0000\u0000\u13a4\u13a5\u0005\u0306\u0000\u0000\u13a5"+
		"\u13a7\u0005\u0300\u0000\u0000\u13a6\u13a3\u0001\u0000\u0000\u0000\u13a6"+
		"\u13a7\u0001\u0000\u0000\u0000\u13a7\u13c0\u0001\u0000\u0000\u0000\u13a8"+
		"\u13ac\u0005\u02f1\u0000\u0000\u13a9\u13aa\u0005\u02ff\u0000\u0000\u13aa"+
		"\u13ab\u0005\u0306\u0000\u0000\u13ab\u13ad\u0005\u0300\u0000\u0000\u13ac"+
		"\u13a9\u0001\u0000\u0000\u0000\u13ac\u13ad\u0001\u0000\u0000\u0000\u13ad"+
		"\u13c0\u0001\u0000\u0000\u0000\u13ae\u13c0\u0005\u02f3\u0000\u0000\u13af"+
		"\u13c0\u0005\u02f4\u0000\u0000\u13b0\u13c0\u0005\u02f5\u0000\u0000\u13b1"+
		"\u13c0\u0005\u02f6\u0000\u0000\u13b2\u13b6\u0005\u02f7\u0000\u0000\u13b3"+
		"\u13b4\u0005\u02ff\u0000\u0000\u13b4\u13b5\u0005\u0306\u0000\u0000\u13b5"+
		"\u13b7\u0005\u0300\u0000\u0000\u13b6\u13b3\u0001\u0000\u0000\u0000\u13b6"+
		"\u13b7\u0001\u0000\u0000\u0000\u13b7\u13c0\u0001\u0000\u0000\u0000\u13b8"+
		"\u13bc\u0005\u027b\u0000\u0000\u13b9\u13ba\u0005\u02ff\u0000\u0000\u13ba"+
		"\u13bb\u0005\u0306\u0000\u0000\u13bb\u13bd\u0005\u0300\u0000\u0000\u13bc"+
		"\u13b9\u0001\u0000\u0000\u0000\u13bc\u13bd\u0001\u0000\u0000\u0000\u13bd"+
		"\u13c0\u0001\u0000\u0000\u0000\u13be\u13c0\u0005\u02f8\u0000\u0000\u13bf"+
		"\u132f\u0001\u0000\u0000\u0000\u13bf\u1330\u0001\u0000\u0000\u0000\u13bf"+
		"\u1331\u0001\u0000\u0000\u0000\u13bf\u1332\u0001\u0000\u0000\u0000\u13bf"+
		"\u1333\u0001\u0000\u0000\u0000\u13bf\u1339\u0001\u0000\u0000\u0000\u13bf"+
		"\u133f\u0001\u0000\u0000\u0000\u13bf\u1340\u0001\u0000\u0000\u0000\u13bf"+
		"\u1341\u0001\u0000\u0000\u0000\u13bf\u1342\u0001\u0000\u0000\u0000\u13bf"+
		"\u1343\u0001\u0000\u0000\u0000\u13bf\u1349\u0001\u0000\u0000\u0000\u13bf"+
		"\u134f\u0001\u0000\u0000\u0000\u13bf\u1355\u0001\u0000\u0000\u0000\u13bf"+
		"\u1356\u0001\u0000\u0000\u0000\u13bf\u1357\u0001\u0000\u0000\u0000\u13bf"+
		"\u1358\u0001\u0000\u0000\u0000\u13bf\u1360\u0001\u0000\u0000\u0000\u13bf"+
		"\u1362\u0001\u0000\u0000\u0000\u13bf\u1363\u0001\u0000\u0000\u0000\u13bf"+
		"\u1364\u0001\u0000\u0000\u0000\u13bf\u1365\u0001\u0000\u0000\u0000\u13bf"+
		"\u1366\u0001\u0000\u0000\u0000\u13bf\u1367\u0001\u0000\u0000\u0000\u13bf"+
		"\u1368\u0001\u0000\u0000\u0000\u13bf\u1369\u0001\u0000\u0000\u0000\u13bf"+
		"\u136a\u0001\u0000\u0000\u0000\u13bf\u1371\u0001\u0000\u0000\u0000\u13bf"+
		"\u1372\u0001\u0000\u0000\u0000\u13bf\u1373\u0001\u0000\u0000\u0000\u13bf"+
		"\u1374\u0001\u0000\u0000\u0000\u13bf\u1375\u0001\u0000\u0000\u0000\u13bf"+
		"\u1376\u0001\u0000\u0000\u0000\u13bf\u1377\u0001\u0000\u0000\u0000\u13bf"+
		"\u1378\u0001\u0000\u0000\u0000\u13bf\u1380\u0001\u0000\u0000\u0000\u13bf"+
		"\u1381\u0001\u0000\u0000\u0000\u13bf\u1382\u0001\u0000\u0000\u0000\u13bf"+
		"\u1383\u0001\u0000\u0000\u0000\u13bf\u1384\u0001\u0000\u0000\u0000\u13bf"+
		"\u1385\u0001\u0000\u0000\u0000\u13bf\u1386\u0001\u0000\u0000\u0000\u13bf"+
		"\u1387\u0001\u0000\u0000\u0000\u13bf\u1388\u0001\u0000\u0000\u0000\u13bf"+
		"\u1389\u0001\u0000\u0000\u0000\u13bf\u138a\u0001\u0000\u0000\u0000\u13bf"+
		"\u138b\u0001\u0000\u0000\u0000\u13bf\u138c\u0001\u0000\u0000\u0000\u13bf"+
		"\u1397\u0001\u0000\u0000\u0000\u13bf\u13a2\u0001\u0000\u0000\u0000\u13bf"+
		"\u13a8\u0001\u0000\u0000\u0000\u13bf\u13ae\u0001\u0000\u0000\u0000\u13bf"+
		"\u13af\u0001\u0000\u0000\u0000\u13bf\u13b0\u0001\u0000\u0000\u0000\u13bf"+
		"\u13b1\u0001\u0000\u0000\u0000\u13bf\u13b2\u0001\u0000\u0000\u0000\u13bf"+
		"\u13b8\u0001\u0000\u0000\u0000\u13bf\u13be\u0001\u0000\u0000\u0000\u13c0"+
		"\u01c9\u0001\u0000\u0000\u0000\u13c1\u13c2\u0007-\u0000\u0000\u13c2\u01cb"+
		"\u0001\u0000\u0000\u0000\u13c3\u13c8\u0001\u0000\u0000\u0000\u13c4\u13c5"+
		"\u0005\u0121\u0000\u0000\u13c5\u13c8\u0005\u017b\u0000\u0000\u13c6\u13c8"+
		"\u0005\u0010\u0000\u0000\u13c7\u13c3\u0001\u0000\u0000\u0000\u13c7\u13c4"+
		"\u0001\u0000\u0000\u0000\u13c7\u13c6\u0001\u0000\u0000\u0000\u13c8\u01cd"+
		"\u0001\u0000\u0000\u0000\u13c9\u13ca\u0003\u0208\u0104\u0000\u13ca\u13cc"+
		"\u0005\u02ff\u0000\u0000\u13cb\u13cd\u0007\u001e\u0000\u0000\u13cc\u13cb"+
		"\u0001\u0000\u0000\u0000\u13cc\u13cd\u0001\u0000\u0000\u0000\u13cd\u13ce"+
		"\u0001\u0000\u0000\u0000\u13ce\u13d3\u0003\u01b0\u00d8\u0000\u13cf\u13d0"+
		"\u0005\u02f9\u0000\u0000\u13d0\u13d2\u0003\u01b0\u00d8\u0000\u13d1\u13cf"+
		"\u0001\u0000\u0000\u0000\u13d2\u13d5\u0001\u0000\u0000\u0000\u13d3\u13d1"+
		"\u0001\u0000\u0000\u0000\u13d3\u13d4\u0001\u0000\u0000\u0000\u13d4\u13d7"+
		"\u0001\u0000\u0000\u0000\u13d5\u13d3\u0001\u0000\u0000\u0000\u13d6\u13d8"+
		"\u0003\u019e\u00cf\u0000\u13d7\u13d6\u0001\u0000\u0000\u0000\u13d7\u13d8"+
		"\u0001\u0000\u0000\u0000\u13d8\u13d9\u0001\u0000\u0000\u0000\u13d9\u13e0"+
		"\u0005\u0300\u0000\u0000\u13da\u13db\u0005\u00dd\u0000\u0000\u13db\u13dc"+
		"\u0005\u02ff\u0000\u0000\u13dc\u13dd\u0005\u0284\u0000\u0000\u13dd\u13de"+
		"\u0003\u0182\u00c1\u0000\u13de\u13df\u0005\u0300\u0000\u0000\u13df\u13e1"+
		"\u0001\u0000\u0000\u0000\u13e0\u13da\u0001\u0000\u0000\u0000\u13e0\u13e1"+
		"\u0001\u0000\u0000\u0000\u13e1\u1409\u0001\u0000\u0000\u0000\u13e2\u13e3"+
		"\u0003\u0208\u0104\u0000\u13e3\u13e4\u0005\u02ff\u0000\u0000\u13e4\u13e5"+
		"\u0005\u02fe\u0000\u0000\u13e5\u13ec\u0005\u0300\u0000\u0000\u13e6\u13e7"+
		"\u0005\u00dd\u0000\u0000\u13e7\u13e8\u0005\u02ff\u0000\u0000\u13e8\u13e9"+
		"\u0005\u0284\u0000\u0000\u13e9\u13ea\u0003\u0182\u00c1\u0000\u13ea\u13eb"+
		"\u0005\u0300\u0000\u0000\u13eb\u13ed\u0001\u0000\u0000\u0000\u13ec\u13e6"+
		"\u0001\u0000\u0000\u0000\u13ec\u13ed\u0001\u0000\u0000\u0000\u13ed\u1409"+
		"\u0001\u0000\u0000\u0000\u13ee\u13ef\u0003\u0208\u0104\u0000\u13ef\u13f8"+
		"\u0005\u02ff\u0000\u0000\u13f0\u13f5\u0003\u01b0\u00d8\u0000\u13f1\u13f2"+
		"\u0005\u02f9\u0000\u0000\u13f2\u13f4\u0003\u01b0\u00d8\u0000\u13f3\u13f1"+
		"\u0001\u0000\u0000\u0000\u13f4\u13f7\u0001\u0000\u0000\u0000\u13f5\u13f3"+
		"\u0001\u0000\u0000\u0000\u13f5\u13f6\u0001\u0000\u0000\u0000\u13f6\u13f9"+
		"\u0001\u0000\u0000\u0000\u13f7\u13f5\u0001\u0000\u0000\u0000\u13f8\u13f0"+
		"\u0001\u0000\u0000\u0000\u13f8\u13f9\u0001\u0000\u0000\u0000\u13f9\u13fa"+
		"\u0001\u0000\u0000\u0000\u13fa\u13fb\u0005\u0300\u0000\u0000\u13fb\u13fc"+
		"\u0005\u0288\u0000\u0000\u13fc\u13fd\u0005\u00fa\u0000\u0000\u13fd\u13fe"+
		"\u0005\u02ff\u0000\u0000\u13fe\u13ff\u0003\u019e\u00cf\u0000\u13ff\u1406"+
		"\u0005\u0300\u0000\u0000\u1400\u1401\u0005\u00dd\u0000\u0000\u1401\u1402"+
		"\u0005\u02ff\u0000\u0000\u1402\u1403\u0005\u0284\u0000\u0000\u1403\u1404"+
		"\u0003\u0182\u00c1\u0000\u1404\u1405\u0005\u0300\u0000\u0000\u1405\u1407"+
		"\u0001\u0000\u0000\u0000\u1406\u1400\u0001\u0000\u0000\u0000\u1406\u1407"+
		"\u0001\u0000\u0000\u0000\u1407\u1409\u0001\u0000\u0000\u0000\u1408\u13c9"+
		"\u0001\u0000\u0000\u0000\u1408\u13e2\u0001\u0000\u0000\u0000\u1408\u13ee"+
		"\u0001\u0000\u0000\u0000\u1409\u01cf\u0001\u0000\u0000\u0000\u140a\u140d"+
		"\u0005\u0309\u0000\u0000\u140b\u140d\u0003\u0208\u0104\u0000\u140c\u140a"+
		"\u0001\u0000\u0000\u0000\u140c\u140b\u0001\u0000\u0000\u0000\u140d\u01d1"+
		"\u0001\u0000\u0000\u0000\u140e\u1413\u0003\u01d0\u00e8\u0000\u140f\u1410"+
		"\u0005\u02f9\u0000\u0000\u1410\u1412\u0003\u01d0\u00e8\u0000\u1411\u140f"+
		"\u0001\u0000\u0000\u0000\u1412\u1415\u0001\u0000\u0000\u0000\u1413\u1411"+
		"\u0001\u0000\u0000\u0000\u1413\u1414\u0001\u0000\u0000\u0000\u1414\u01d3"+
		"\u0001\u0000\u0000\u0000\u1415\u1413\u0001\u0000\u0000\u0000\u1416\u141b"+
		"\u0003\u0208\u0104\u0000\u1417\u1418\u0005\u02f9\u0000\u0000\u1418\u141a"+
		"\u0003\u0208\u0104\u0000\u1419\u1417\u0001\u0000\u0000\u0000\u141a\u141d"+
		"\u0001\u0000\u0000\u0000\u141b\u1419\u0001\u0000\u0000\u0000\u141b\u141c"+
		"\u0001\u0000\u0000\u0000\u141c\u01d5\u0001\u0000\u0000\u0000\u141d\u141b"+
		"\u0001\u0000\u0000\u0000\u141e\u1421\u0003\u0208\u0104\u0000\u141f\u1420"+
		"\u0005\u0318\u0000\u0000\u1420\u1422\u0003\u0202\u0101\u0000\u1421\u141f"+
		"\u0001\u0000\u0000\u0000\u1421\u1422\u0001\u0000\u0000\u0000\u1422\u01d7"+
		"\u0001\u0000\u0000\u0000\u1423\u1428\u0003\u01d6\u00eb\u0000\u1424\u1425"+
		"\u0005\u02f9\u0000\u0000\u1425\u1427\u0003\u01d6\u00eb\u0000\u1426\u1424"+
		"\u0001\u0000\u0000\u0000\u1427\u142a\u0001\u0000\u0000\u0000\u1428\u1426"+
		"\u0001\u0000\u0000\u0000\u1428\u1429\u0001\u0000\u0000\u0000\u1429\u01d9"+
		"\u0001\u0000\u0000\u0000\u142a\u1428\u0001\u0000\u0000\u0000\u142b\u142c"+
		"\u0003\u0208\u0104\u0000\u142c\u01db\u0001\u0000\u0000\u0000\u142d\u1430"+
		"\u0003\u01c8\u00e4\u0000\u142e\u1430\u0003\u0208\u0104\u0000\u142f\u142d"+
		"\u0001\u0000\u0000\u0000\u142f\u142e\u0001\u0000\u0000\u0000\u1430\u1438"+
		"\u0001\u0000\u0000\u0000\u1431\u1433\u0005\u0301\u0000\u0000\u1432\u1434"+
		"\u0005\u0306\u0000\u0000\u1433\u1432\u0001\u0000\u0000\u0000\u1433\u1434"+
		"\u0001\u0000\u0000\u0000\u1434\u1435\u0001\u0000\u0000\u0000\u1435\u1437"+
		"\u0005\u0302\u0000\u0000\u1436\u1431\u0001\u0000\u0000\u0000\u1437\u143a"+
		"\u0001\u0000\u0000\u0000\u1438\u1436\u0001\u0000\u0000\u0000\u1438\u1439"+
		"\u0001\u0000\u0000\u0000\u1439\u01dd\u0001\u0000\u0000\u0000\u143a\u1438"+
		"\u0001\u0000\u0000\u0000\u143b\u1440\u0003\u01dc\u00ee\u0000\u143c\u143d"+
		"\u0005\u02f9\u0000\u0000\u143d\u143f\u0003\u01dc\u00ee\u0000\u143e\u143c"+
		"\u0001\u0000\u0000\u0000\u143f\u1442\u0001\u0000\u0000\u0000\u1440\u143e"+
		"\u0001\u0000\u0000\u0000\u1440\u1441\u0001\u0000\u0000\u0000\u1441\u01df"+
		"\u0001\u0000\u0000\u0000\u1442\u1440\u0001\u0000\u0000\u0000\u1443\u1446"+
		"\u0007.\u0000\u0000\u1444\u1446\u0003\u0208\u0104\u0000\u1445\u1443\u0001"+
		"\u0000\u0000\u0000\u1445\u1444\u0001\u0000\u0000\u0000\u1446\u01e1\u0001"+
		"\u0000\u0000\u0000\u1447\u1448\u0003\u0208\u0104\u0000\u1448\u01e3\u0001"+
		"\u0000\u0000\u0000\u1449\u144a\u0003\u01e2\u00f1\u0000\u144a\u144b\u0005"+
		"\u02ff\u0000\u0000\u144b\u144c\u0005\u027d\u0000\u0000\u144c\u144d\u0003"+
		"\u01b0\u00d8\u0000\u144d\u144e\u0005\u0300\u0000\u0000\u144e\u146e\u0001"+
		"\u0000\u0000\u0000\u144f\u1450\u0003\u01e2\u00f1\u0000\u1450\u145e\u0005"+
		"\u02ff\u0000\u0000\u1451\u1456\u0003\u01b0\u00d8\u0000\u1452\u1453\u0005"+
		"\u02f9\u0000\u0000\u1453\u1455\u0003\u01b0\u00d8\u0000\u1454\u1452\u0001"+
		"\u0000\u0000\u0000\u1455\u1458\u0001\u0000\u0000\u0000\u1456\u1454\u0001"+
		"\u0000\u0000\u0000\u1456\u1457\u0001\u0000\u0000\u0000\u1457\u145c\u0001"+
		"\u0000\u0000\u0000\u1458\u1456\u0001\u0000\u0000\u0000\u1459\u145a\u0005"+
		"\u02f9\u0000\u0000\u145a\u145b\u0005\u027d\u0000\u0000\u145b\u145d\u0003"+
		"\u01b0\u00d8\u0000\u145c\u1459\u0001\u0000\u0000\u0000\u145c\u145d\u0001"+
		"\u0000\u0000\u0000\u145d\u145f\u0001\u0000\u0000\u0000\u145e\u1451\u0001"+
		"\u0000\u0000\u0000\u145e\u145f\u0001\u0000\u0000\u0000\u145f\u1460\u0001"+
		"\u0000\u0000\u0000\u1460\u1461\u0005\u0300\u0000\u0000\u1461\u146e\u0001"+
		"\u0000\u0000\u0000\u1462\u1463\u0003\u01e2\u00f1\u0000\u1463\u1464\u0005"+
		"\u02ff\u0000\u0000\u1464\u1465\u0003\u020a\u0105\u0000\u1465\u1466\u0005"+
		"\u00ec\u0000\u0000\u1466\u1469\u0003\u01b0\u00d8\u0000\u1467\u1468\u0005"+
		"\u00e3\u0000\u0000\u1468\u146a\u0003\u01b0\u00d8\u0000\u1469\u1467\u0001"+
		"\u0000\u0000\u0000\u1469\u146a\u0001\u0000\u0000\u0000\u146a\u146b\u0001"+
		"\u0000\u0000\u0000\u146b\u146c\u0005\u0300\u0000\u0000\u146c\u146e\u0001"+
		"\u0000\u0000\u0000\u146d\u1449\u0001\u0000\u0000\u0000\u146d\u144f\u0001"+
		"\u0000\u0000\u0000\u146d\u1462\u0001\u0000\u0000\u0000\u146e\u01e5\u0001"+
		"\u0000\u0000\u0000\u146f\u1470\u0005\u001a\u0000\u0000\u1470\u1479\u0005"+
		"\u0301\u0000\u0000\u1471\u1476\u0003\u01b0\u00d8\u0000\u1472\u1473\u0005"+
		"\u02f9\u0000\u0000\u1473\u1475\u0003\u01b0\u00d8\u0000\u1474\u1472\u0001"+
		"\u0000\u0000\u0000\u1475\u1478\u0001\u0000\u0000\u0000\u1476\u1474\u0001"+
		"\u0000\u0000\u0000\u1476\u1477\u0001\u0000\u0000\u0000\u1477\u147a\u0001"+
		"\u0000\u0000\u0000\u1478\u1476\u0001\u0000\u0000\u0000\u1479\u1471\u0001"+
		"\u0000\u0000\u0000\u1479\u147a\u0001\u0000\u0000\u0000\u147a\u147b\u0001"+
		"\u0000\u0000\u0000\u147b\u147c\u0005\u0302\u0000\u0000\u147c\u01e7\u0001"+
		"\u0000\u0000\u0000\u147d\u147f\u0006\u00f4\uffff\uffff\u0000\u147e\u1480"+
		"\u0005\u0181\u0000\u0000\u147f\u147e\u0001\u0000\u0000\u0000\u147f\u1480"+
		"\u0001\u0000\u0000\u0000\u1480\u1481\u0001\u0000\u0000\u0000\u1481\u1483"+
		"\u0003\u01da\u00ed\u0000\u1482\u1484\u0005\u02fe\u0000\u0000\u1483\u1482"+
		"\u0001\u0000\u0000\u0000\u1483\u1484\u0001\u0000\u0000\u0000\u1484\u1486"+
		"\u0001\u0000\u0000\u0000\u1485\u1487\u0003\u01ea\u00f5\u0000\u1486\u1485"+
		"\u0001\u0000\u0000\u0000\u1486\u1487\u0001\u0000\u0000\u0000\u1487\u149b"+
		"\u0001\u0000\u0000\u0000\u1488\u1489\u0005\u0239\u0000\u0000\u1489\u148a"+
		"\u0003\u020a\u0105\u0000\u148a\u148b\u0005\u02ff\u0000\u0000\u148b\u1490"+
		"\u0003\u01b0\u00d8\u0000\u148c\u148d\u0005\u02f9\u0000\u0000\u148d\u148f"+
		"\u0003\u01b0\u00d8\u0000\u148e\u148c\u0001\u0000\u0000\u0000\u148f\u1492"+
		"\u0001\u0000\u0000\u0000\u1490\u148e\u0001\u0000\u0000\u0000\u1490\u1491"+
		"\u0001\u0000\u0000\u0000\u1491\u1493\u0001\u0000\u0000\u0000\u1492\u1490"+
		"\u0001\u0000\u0000\u0000\u1493\u1499\u0005\u0300\u0000\u0000\u1494\u1495"+
		"\u0005\u01d5\u0000\u0000\u1495\u1496\u0005\u02ff\u0000\u0000\u1496\u1497"+
		"\u0003\u020a\u0105\u0000\u1497\u1498\u0005\u0300\u0000\u0000\u1498\u149a"+
		"\u0001\u0000\u0000\u0000\u1499\u1494\u0001\u0000\u0000\u0000\u1499\u149a"+
		"\u0001\u0000\u0000\u0000\u149a\u149c\u0001\u0000\u0000\u0000\u149b\u1488"+
		"\u0001\u0000\u0000\u0000\u149b\u149c\u0001\u0000\u0000\u0000\u149c\u14e8"+
		"\u0001\u0000\u0000\u0000\u149d\u149f\u0005\u012e\u0000\u0000\u149e\u149d"+
		"\u0001\u0000\u0000\u0000\u149e\u149f\u0001\u0000\u0000\u0000\u149f\u14a0"+
		"\u0001\u0000\u0000\u0000\u14a0\u14a1\u0005\u02ff\u0000\u0000\u14a1\u14a2"+
		"\u0003\u0002\u0001\u0000\u14a2\u14a4\u0005\u0300\u0000\u0000\u14a3\u14a5"+
		"\u0005\u001b\u0000\u0000\u14a4\u14a3\u0001\u0000\u0000\u0000\u14a4\u14a5"+
		"\u0001\u0000\u0000\u0000\u14a5\u14a6\u0001\u0000\u0000\u0000\u14a6\u14b2"+
		"\u0003\u0212\u0109\u0000\u14a7\u14a8\u0005\u02ff\u0000\u0000\u14a8\u14ad"+
		"\u0003\u0214\u010a\u0000\u14a9\u14aa\u0005\u02f9\u0000\u0000\u14aa\u14ac"+
		"\u0003\u0214\u010a\u0000\u14ab\u14a9\u0001\u0000\u0000\u0000\u14ac\u14af"+
		"\u0001\u0000\u0000\u0000\u14ad\u14ab\u0001\u0000\u0000\u0000\u14ad\u14ae"+
		"\u0001\u0000\u0000\u0000\u14ae\u14b0\u0001\u0000\u0000\u0000\u14af\u14ad"+
		"\u0001\u0000\u0000\u0000\u14b0\u14b1\u0005\u0300\u0000\u0000\u14b1\u14b3"+
		"\u0001\u0000\u0000\u0000\u14b2\u14a7\u0001\u0000\u0000\u0000\u14b2\u14b3"+
		"\u0001\u0000\u0000\u0000\u14b3\u14e8\u0001\u0000\u0000\u0000\u14b4\u14b6"+
		"\u0005\u012e\u0000\u0000\u14b5\u14b4\u0001\u0000\u0000\u0000\u14b5\u14b6"+
		"\u0001\u0000\u0000\u0000\u14b6\u14b7\u0001\u0000\u0000\u0000\u14b7\u14ba"+
		"\u0003\u01e4\u00f2\u0000\u14b8\u14b9\u0005\u0287\u0000\u0000\u14b9\u14bb"+
		"\u0005\u018a\u0000\u0000\u14ba\u14b8\u0001\u0000\u0000\u0000\u14ba\u14bb"+
		"\u0001\u0000\u0000\u0000\u14bb\u14bd\u0001\u0000\u0000\u0000\u14bc\u14be"+
		"\u0003\u01ea\u00f5\u0000\u14bd\u14bc\u0001\u0000\u0000\u0000\u14bd\u14be"+
		"\u0001\u0000\u0000\u0000\u14be\u14e8\u0001\u0000\u0000\u0000\u14bf\u14c1"+
		"\u0005\u012e\u0000\u0000\u14c0\u14bf\u0001\u0000\u0000\u0000\u14c0\u14c1"+
		"\u0001\u0000\u0000\u0000\u14c1\u14c2\u0001\u0000\u0000\u0000\u14c2\u14c3"+
		"\u0003\u01e4\u00f2\u0000\u14c3\u14c4\u0005\u001b\u0000\u0000\u14c4\u14c5"+
		"\u0005\u02ff\u0000\u0000\u14c5\u14ca\u0003\u0216\u010b\u0000\u14c6\u14c7"+
		"\u0005\u02f9\u0000\u0000\u14c7\u14c9\u0003\u0216\u010b\u0000\u14c8\u14c6"+
		"\u0001\u0000\u0000\u0000\u14c9\u14cc\u0001\u0000\u0000\u0000\u14ca\u14c8"+
		"\u0001\u0000\u0000\u0000\u14ca\u14cb\u0001\u0000\u0000\u0000\u14cb\u14cd"+
		"\u0001\u0000\u0000\u0000\u14cc\u14ca\u0001\u0000\u0000\u0000\u14cd\u14ce"+
		"\u0005\u0300\u0000\u0000\u14ce\u14e8\u0001\u0000\u0000\u0000\u14cf\u14d1"+
		"\u0005\u012e\u0000\u0000\u14d0\u14cf\u0001\u0000\u0000\u0000\u14d0\u14d1"+
		"\u0001\u0000\u0000\u0000\u14d1\u14d2\u0001\u0000\u0000\u0000\u14d2\u14d3"+
		"\u0005\u01ef\u0000\u0000\u14d3\u14d4\u0005\u00ec\u0000\u0000\u14d4\u14d5"+
		"\u0005\u02ff\u0000\u0000\u14d5\u14d6\u0003\u01e4\u00f2\u0000\u14d6\u14e3"+
		"\u0005\u0300\u0000\u0000\u14d7\u14d8\u0005\u001b\u0000\u0000\u14d8\u14d9"+
		"\u0005\u02ff\u0000\u0000\u14d9\u14de\u0003\u0216\u010b\u0000\u14da\u14db"+
		"\u0005\u02f9\u0000\u0000\u14db\u14dd\u0003\u0216\u010b\u0000\u14dc\u14da"+
		"\u0001\u0000\u0000\u0000\u14dd\u14e0\u0001\u0000\u0000\u0000\u14de\u14dc"+
		"\u0001\u0000\u0000\u0000\u14de\u14df\u0001\u0000\u0000\u0000\u14df\u14e1"+
		"\u0001\u0000\u0000\u0000\u14e0\u14de\u0001\u0000\u0000\u0000\u14e1\u14e2"+
		"\u0005\u0300\u0000\u0000\u14e2\u14e4\u0001\u0000\u0000\u0000\u14e3\u14d7"+
		"\u0001\u0000\u0000\u0000\u14e3\u14e4\u0001\u0000\u0000\u0000\u14e4\u14e5"+
		"\u0001\u0000\u0000\u0000\u14e5\u14e6\u0005\u0300\u0000\u0000\u14e6\u14e8"+
		"\u0001\u0000\u0000\u0000\u14e7\u147d\u0001\u0000\u0000\u0000\u14e7\u149e"+
		"\u0001\u0000\u0000\u0000\u14e7\u14b5\u0001\u0000\u0000\u0000\u14e7\u14c0"+
		"\u0001\u0000\u0000\u0000\u14e7\u14d0\u0001\u0000\u0000\u0000\u14e8\u14fa"+
		"\u0001\u0000\u0000\u0000\u14e9\u14eb\n\u0001\u0000\u0000\u14ea\u14ec\u0005"+
		"\u0161\u0000\u0000\u14eb\u14ea\u0001\u0000\u0000\u0000\u14eb\u14ec\u0001"+
		"\u0000\u0000\u0000\u14ec\u14ed\u0001\u0000\u0000\u0000\u14ed\u14ef\u0003"+
		"\u01ec\u00f6\u0000\u14ee\u14f0\u0005\u02ff\u0000\u0000\u14ef\u14ee\u0001"+
		"\u0000\u0000\u0000\u14ef\u14f0\u0001\u0000\u0000\u0000\u14f0\u14f1\u0001"+
		"\u0000\u0000\u0000\u14f1\u14f3\u0003\u01e8\u00f4\u0000\u14f2\u14f4\u0003"+
		"\u01ee\u00f7\u0000\u14f3\u14f2\u0001\u0000\u0000\u0000\u14f3\u14f4\u0001"+
		"\u0000\u0000\u0000\u14f4\u14f6\u0001\u0000\u0000\u0000\u14f5\u14f7\u0005"+
		"\u0300\u0000\u0000\u14f6\u14f5\u0001\u0000\u0000\u0000\u14f6\u14f7\u0001"+
		"\u0000\u0000\u0000\u14f7\u14f9\u0001\u0000\u0000\u0000\u14f8\u14e9\u0001"+
		"\u0000\u0000\u0000\u14f9\u14fc\u0001\u0000\u0000\u0000\u14fa\u14f8\u0001"+
		"\u0000\u0000\u0000\u14fa\u14fb\u0001\u0000\u0000\u0000\u14fb\u01e9\u0001"+
		"\u0000\u0000\u0000\u14fc\u14fa\u0001\u0000\u0000\u0000\u14fd\u14ff\u0005"+
		"\u001b\u0000\u0000\u14fe\u14fd\u0001\u0000\u0000\u0000\u14fe\u14ff\u0001"+
		"\u0000\u0000\u0000\u14ff\u1500\u0001\u0000\u0000\u0000\u1500\u1509\u0003"+
		"\u0212\u0109\u0000\u1501\u1506\u0003\u0214\u010a\u0000\u1502\u1503\u0005"+
		"\u02f9\u0000\u0000\u1503\u1505\u0003\u0214\u010a\u0000\u1504\u1502\u0001"+
		"\u0000\u0000\u0000\u1505\u1508\u0001\u0000\u0000\u0000\u1506\u1504\u0001"+
		"\u0000\u0000\u0000\u1506\u1507\u0001\u0000\u0000\u0000\u1507\u150a\u0001"+
		"\u0000\u0000\u0000\u1508\u1506\u0001\u0000\u0000\u0000\u1509\u1501\u0001"+
		"\u0000\u0000\u0000\u1509\u150a\u0001\u0000\u0000\u0000\u150a\u1514\u0001"+
		"\u0000\u0000\u0000\u150b\u150d\u0005\u001b\u0000\u0000\u150c\u150b\u0001"+
		"\u0000\u0000\u0000\u150c\u150d\u0001\u0000\u0000\u0000\u150d\u150e\u0001"+
		"\u0000\u0000\u0000\u150e\u150f\u0003\u0212\u0109\u0000\u150f\u1510\u0005"+
		"\u02ff\u0000\u0000\u1510\u1511\u0003\u01d2\u00e9\u0000\u1511\u1512\u0005"+
		"\u0300\u0000\u0000\u1512\u1514\u0001\u0000\u0000\u0000\u1513\u14fe\u0001"+
		"\u0000\u0000\u0000\u1513\u150c\u0001\u0000\u0000\u0000\u1514\u01eb\u0001"+
		"\u0000\u0000\u0000\u1515\u1517\u0005\u0112\u0000\u0000\u1516\u1515\u0001"+
		"\u0000\u0000\u0000\u1516\u1517\u0001\u0000\u0000\u0000\u1517\u1518\u0001"+
		"\u0000\u0000\u0000\u1518\u152b\u0005\u0124\u0000\u0000\u1519\u151b\u0005"+
		"\u0131\u0000\u0000\u151a\u151c\u0005\u018d\u0000\u0000\u151b\u151a\u0001"+
		"\u0000\u0000\u0000\u151b\u151c\u0001\u0000\u0000\u0000\u151c\u151d\u0001"+
		"\u0000\u0000\u0000\u151d\u152b\u0005\u0124\u0000\u0000\u151e\u1520\u0005"+
		"\u01e4\u0000\u0000\u151f\u1521\u0005\u018d\u0000\u0000\u1520\u151f\u0001"+
		"\u0000\u0000\u0000\u1520\u1521\u0001\u0000\u0000\u0000\u1521\u1522\u0001"+
		"\u0000\u0000\u0000\u1522\u152b\u0005\u0124\u0000\u0000\u1523\u1525\u0005"+
		"\u00ed\u0000\u0000\u1524\u1526\u0005\u018d\u0000\u0000\u1525\u1524\u0001"+
		"\u0000\u0000\u0000\u1525\u1526\u0001\u0000\u0000\u0000\u1526\u1527\u0001"+
		"\u0000\u0000\u0000\u1527\u152b\u0005\u0124\u0000\u0000\u1528\u1529\u0005"+
		"\u0081\u0000\u0000\u1529\u152b\u0005\u0124\u0000\u0000\u152a\u1516\u0001"+
		"\u0000\u0000\u0000\u152a\u1519\u0001\u0000\u0000\u0000\u152a\u151e\u0001"+
		"\u0000\u0000\u0000\u152a\u1523\u0001\u0000\u0000\u0000\u152a\u1528\u0001"+
		"\u0000\u0000\u0000\u152b\u01ed\u0001\u0000\u0000\u0000\u152c\u152d\u0005"+
		"\u0180\u0000\u0000\u152d\u153b\u0003\u01f0\u00f8\u0000\u152e\u152f\u0005"+
		"\u0272\u0000\u0000\u152f\u1530\u0005\u02ff\u0000\u0000\u1530\u1535\u0003"+
		"\u0210\u0108\u0000\u1531\u1532\u0005\u02f9\u0000\u0000\u1532\u1534\u0003"+
		"\u0210\u0108\u0000\u1533\u1531\u0001\u0000\u0000\u0000\u1534\u1537\u0001"+
		"\u0000\u0000\u0000\u1535\u1533\u0001\u0000\u0000\u0000\u1535\u1536\u0001"+
		"\u0000\u0000\u0000\u1536\u1538\u0001\u0000\u0000\u0000\u1537\u1535\u0001"+
		"\u0000\u0000\u0000\u1538\u1539\u0005\u0300\u0000\u0000\u1539\u153b\u0001"+
		"\u0000\u0000\u0000\u153a\u152c\u0001\u0000\u0000\u0000\u153a\u152e\u0001"+
		"\u0000\u0000\u0000\u153b\u01ef\u0001\u0000\u0000\u0000\u153c\u153d\u0006"+
		"\u00f8\uffff\uffff\u0000\u153d\u1549\u0003\u01b0\u00d8\u0000\u153e\u153f"+
		"\u0003\u01b0\u00d8\u0000\u153f\u1540\u0003\u01cc\u00e6\u0000\u1540\u1541"+
		"\u0003\u01b0\u00d8\u0000\u1541\u1549\u0001\u0000\u0000\u0000\u1542\u1543"+
		"\u0005\u02ff\u0000\u0000\u1543\u1544\u0003\u01f0\u00f8\u0000\u1544\u1545"+
		"\u0005\u0300\u0000\u0000\u1545\u1549\u0001\u0000\u0000\u0000\u1546\u1547"+
		"\u0005\u016d\u0000\u0000\u1547\u1549\u0003\u01f0\u00f8\u0001\u1548\u153c"+
		"\u0001\u0000\u0000\u0000\u1548\u153e\u0001\u0000\u0000\u0000\u1548\u1542"+
		"\u0001\u0000\u0000\u0000\u1548\u1546\u0001\u0000\u0000\u0000\u1549\u1552"+
		"\u0001\u0000\u0000\u0000\u154a\u154b\n\u0003\u0000\u0000\u154b\u154c\u0005"+
		"\u0017\u0000\u0000\u154c\u1551\u0003\u01f0\u00f8\u0004\u154d\u154e\n\u0002"+
		"\u0000\u0000\u154e\u154f\u0005\u0187\u0000\u0000\u154f\u1551\u0003\u01f0"+
		"\u00f8\u0003\u1550\u154a\u0001\u0000\u0000\u0000\u1550\u154d\u0001\u0000"+
		"\u0000\u0000\u1551\u1554\u0001\u0000\u0000\u0000\u1552\u1550\u0001\u0000"+
		"\u0000\u0000\u1552\u1553\u0001\u0000\u0000\u0000\u1553\u01f1\u0001\u0000"+
		"\u0000\u0000\u1554\u1552\u0001\u0000\u0000\u0000\u1555\u1570\u0005\u02fe"+
		"\u0000\u0000\u1556\u1558\u0007\u0006\u0000\u0000\u1557\u1556\u0001\u0000"+
		"\u0000\u0000\u1557\u1558\u0001\u0000\u0000\u0000\u1558\u155a\u0001\u0000"+
		"\u0000\u0000\u1559\u155b\u0003\u0208\u0104\u0000\u155a\u1559\u0001\u0000"+
		"\u0000\u0000\u155a\u155b\u0001\u0000\u0000\u0000\u155b\u155c\u0001\u0000"+
		"\u0000\u0000\u155c\u1570\u0003\u01de\u00ef\u0000\u155d\u155f\u0007\u0006"+
		"\u0000\u0000\u155e\u155d\u0001\u0000\u0000\u0000\u155e\u155f\u0001\u0000"+
		"\u0000\u0000\u155f\u1561\u0001\u0000\u0000\u0000\u1560\u1562\u0003\u0208"+
		"\u0104\u0000\u1561\u1560\u0001\u0000\u0000\u0000\u1561\u1562\u0001\u0000"+
		"\u0000\u0000\u1562\u1563\u0001\u0000\u0000\u0000\u1563\u1564\u0003\u01de"+
		"\u00ef\u0000\u1564\u1565\u0001\u0000\u0000\u0000\u1565\u1566\u0005\u0188"+
		"\u0000\u0000\u1566\u1568\u00056\u0000\u0000\u1567\u1569\u0007\u0006\u0000"+
		"\u0000\u1568\u1567\u0001\u0000\u0000\u0000\u1568\u1569\u0001\u0000\u0000"+
		"\u0000\u1569\u156b\u0001\u0000\u0000\u0000\u156a\u156c\u0003\u0208\u0104"+
		"\u0000\u156b\u156a\u0001\u0000\u0000\u0000\u156b\u156c\u0001\u0000\u0000"+
		"\u0000\u156c\u156d\u0001\u0000\u0000\u0000\u156d\u156e\u0003\u01de\u00ef"+
		"\u0000\u156e\u1570\u0001\u0000\u0000\u0000\u156f\u1555\u0001\u0000\u0000"+
		"\u0000\u156f\u1557\u0001\u0000\u0000\u0000\u156f\u155e\u0001\u0000\u0000"+
		"\u0000\u1570\u01f3\u0001\u0000\u0000\u0000\u1571\u1572\u0005\u016d\u0000"+
		"\u0000\u1572\u1573\u0005\u0172\u0000\u0000\u1573\u01f5\u0001\u0000\u0000"+
		"\u0000\u1574\u1576\u0003\u01f4\u00fa\u0000\u1575\u1574\u0001\u0000\u0000"+
		"\u0000\u1576\u1577\u0001\u0000\u0000\u0000\u1577\u1575\u0001\u0000\u0000"+
		"\u0000\u1577\u1578\u0001\u0000\u0000\u0000\u1578\u01f7\u0001\u0000\u0000"+
		"\u0000\u1579\u157a\u0005\u0287\u0000\u0000\u157a\u157b\u0005\u02ff\u0000"+
		"\u0000\u157b\u157c\u0003\u01d8\u00ec\u0000\u157c\u157d\u0005\u0300\u0000"+
		"\u0000\u157d\u157f\u0001\u0000\u0000\u0000\u157e\u1579\u0001\u0000\u0000"+
		"\u0000\u157e\u157f\u0001\u0000\u0000\u0000\u157f\u1584\u0001\u0000\u0000"+
		"\u0000\u1580\u1581\u0005\u0272\u0000\u0000\u1581\u1582\u0005\u010c\u0000"+
		"\u0000\u1582\u1583\u0005\u023a\u0000\u0000\u1583\u1585\u0003\u0208\u0104"+
		"\u0000\u1584\u1580\u0001\u0000\u0000\u0000\u1584\u1585\u0001\u0000\u0000"+
		"\u0000\u1585\u01f9\u0001\u0000\u0000\u0000\u1586\u158c\u0003\u0208\u0104"+
		"\u0000\u1587\u1588\u0005\u02ff\u0000\u0000\u1588\u1589\u0003\u01b0\u00d8"+
		"\u0000\u1589\u158a\u0005\u0300\u0000\u0000\u158a\u158c\u0001\u0000\u0000"+
		"\u0000\u158b\u1586\u0001\u0000\u0000\u0000\u158b\u1587\u0001\u0000\u0000"+
		"\u0000\u158c\u158e\u0001\u0000\u0000\u0000\u158d\u158f\u0003\u0208\u0104"+
		"\u0000\u158e\u158d\u0001\u0000\u0000\u0000\u158e\u158f\u0001\u0000\u0000"+
		"\u0000\u158f\u1591\u0001\u0000\u0000\u0000\u1590\u1592\u0007/\u0000\u0000"+
		"\u1591\u1590\u0001\u0000\u0000\u0000\u1591\u1592\u0001\u0000\u0000\u0000"+
		"\u1592\u1595\u0001\u0000\u0000\u0000\u1593\u1594\u0005\u0175\u0000\u0000"+
		"\u1594\u1596\u0007\u001f\u0000\u0000\u1595\u1593\u0001\u0000\u0000\u0000"+
		"\u1595\u1596\u0001\u0000\u0000\u0000\u1596\u01fb\u0001\u0000\u0000\u0000"+
		"\u1597\u1598\u0005m\u0000\u0000\u1598\u159a\u0003\u01d0\u00e8\u0000\u1599"+
		"\u1597\u0001\u0000\u0000\u0000\u1599\u159a\u0001\u0000\u0000\u0000\u159a"+
		"\u15dc\u0001\u0000\u0000\u0000\u159b\u159c\u0005N\u0000\u0000\u159c\u159d"+
		"\u0005\u02ff\u0000\u0000\u159d\u159e\u0003\u01b0\u00d8\u0000\u159e\u15a1"+
		"\u0005\u0300\u0000\u0000\u159f\u15a0\u0005\u0167\u0000\u0000\u15a0\u15a2"+
		"\u0005\u0294\u0000\u0000\u15a1\u159f\u0001\u0000\u0000\u0000\u15a1\u15a2"+
		"\u0001\u0000\u0000\u0000\u15a2\u15dd\u0001\u0000\u0000\u0000\u15a3\u15a4"+
		"\u0005\u0263\u0000\u0000\u15a4\u15a5\u0005\u02ff\u0000\u0000\u15a5\u15a6"+
		"\u0003\u01d4\u00ea\u0000\u15a6\u15a7\u0005\u0300\u0000\u0000\u15a7\u15dd"+
		"\u0001\u0000\u0000\u0000\u15a8\u15a9\u0005\u01b4\u0000\u0000\u15a9\u15aa"+
		"\u0005\u0126\u0000\u0000\u15aa\u15ab\u0005\u02ff\u0000\u0000\u15ab\u15ac"+
		"\u0003\u01d4\u00ea\u0000\u15ac\u15ad\u0005\u0300\u0000\u0000\u15ad\u15ae"+
		"\u0003\u01f8\u00fc\u0000\u15ae\u15dd\u0001\u0000\u0000\u0000\u15af\u15b2"+
		"\u0005\u00cd\u0000\u0000\u15b0\u15b1\u0005\u0272\u0000\u0000\u15b1\u15b3"+
		"\u0003\u01e0\u00f0\u0000\u15b2\u15b0\u0001\u0000\u0000\u0000\u15b2\u15b3"+
		"\u0001\u0000\u0000\u0000\u15b3\u15b4\u0001\u0000\u0000\u0000\u15b4\u15b5"+
		"\u0005\u02ff\u0000\u0000\u15b5\u15b6\u0003\u01fa\u00fd\u0000\u15b6\u15b7"+
		"\u0005\u0287\u0000\u0000\u15b7\u15b8\u0003\u01d4\u00ea\u0000\u15b8\u15b9"+
		"\u0005\u0300\u0000\u0000\u15b9\u15ba\u0003\u01f8\u00fc\u0000\u15ba\u15bb"+
		"\u0005\u0284\u0000\u0000\u15bb\u15bc\u0005\u02ff\u0000\u0000\u15bc\u15bd"+
		"\u0003\u01f0\u00f8\u0000\u15bd\u15be\u0005\u0300\u0000\u0000\u15be\u15c0"+
		"\u0001\u0000\u0000\u0000\u15bf\u15af\u0001\u0000\u0000\u0000\u15bf\u15c0"+
		"\u0001\u0000\u0000\u0000\u15c0\u15dd\u0001\u0000\u0000\u0000\u15c1\u15c2"+
		"\u0005\u00e5\u0000\u0000\u15c2\u15c3\u0005\u0126\u0000\u0000\u15c3\u15c4"+
		"\u0005\u02ff\u0000\u0000\u15c4\u15c5\u0003\u01d4\u00ea\u0000\u15c5\u15c6"+
		"\u0005\u0300\u0000\u0000\u15c6\u15c7\u0005\u01c5\u0000\u0000\u15c7\u15c9"+
		"\u0003\u0208\u0104\u0000\u15c8\u15ca\u0003\u01d4\u00ea\u0000\u15c9\u15c8"+
		"\u0001\u0000\u0000\u0000\u15c9\u15ca\u0001\u0000\u0000\u0000\u15ca\u15d0"+
		"\u0001\u0000\u0000\u0000\u15cb\u15cc\u0005\u0146\u0000\u0000\u15cc\u15d1"+
		"\u0005\u00ed\u0000\u0000\u15cd\u15ce\u0005\u0146\u0000\u0000\u15ce\u15d1"+
		"\u0005\u019e\u0000\u0000\u15cf\u15d1\u0005\u0147\u0000\u0000\u15d0\u15cb"+
		"\u0001\u0000\u0000\u0000\u15d0\u15cd\u0001\u0000\u0000\u0000\u15d0\u15cf"+
		"\u0001\u0000\u0000\u0000\u15d0\u15d1\u0001\u0000\u0000\u0000\u15d1\u15d5"+
		"\u0001\u0000\u0000\u0000\u15d2\u15d3\u0005\u0180\u0000\u0000\u15d3\u15d4"+
		"\u0005\u00a3\u0000\u0000\u15d4\u15d6\u0003\u0208\u0104\u0000\u15d5\u15d2"+
		"\u0001\u0000\u0000\u0000\u15d5\u15d6\u0001\u0000\u0000\u0000\u15d6\u15da"+
		"\u0001\u0000\u0000\u0000\u15d7\u15d8\u0005\u0180\u0000\u0000\u15d8\u15d9"+
		"\u0005\u026a\u0000\u0000\u15d9\u15db\u0003\u0208\u0104\u0000\u15da\u15d7"+
		"\u0001\u0000\u0000\u0000\u15da\u15db\u0001\u0000\u0000\u0000\u15db\u15dd"+
		"\u0001\u0000\u0000\u0000\u15dc\u159b\u0001\u0000\u0000\u0000\u15dc\u15a3"+
		"\u0001\u0000\u0000\u0000\u15dc\u15a8\u0001\u0000\u0000\u0000\u15dc\u15bf"+
		"\u0001\u0000\u0000\u0000\u15dc\u15c1\u0001\u0000\u0000\u0000\u15dd\u15e2"+
		"\u0001\u0000\u0000\u0000\u15de\u15e0\u0005\u016d\u0000\u0000\u15df\u15de"+
		"\u0001\u0000\u0000\u0000\u15df\u15e0\u0001\u0000\u0000\u0000\u15e0\u15e1"+
		"\u0001\u0000\u0000\u0000\u15e1\u15e3\u0005\u009d\u0000\u0000\u15e2\u15df"+
		"\u0001\u0000\u0000\u0000\u15e2\u15e3\u0001\u0000\u0000\u0000\u15e3\u15e6"+
		"\u0001\u0000\u0000\u0000\u15e4\u15e5\u0005\u0111\u0000\u0000\u15e5\u15e7"+
		"\u0007\u0016\u0000\u0000\u15e6\u15e4\u0001\u0000\u0000\u0000\u15e6\u15e7"+
		"\u0001\u0000\u0000\u0000\u15e7\u01fd\u0001\u0000\u0000\u0000\u15e8\u15ed"+
		"\u0003\u01d0\u00e8\u0000\u15e9\u15ed\u0005\u008d\u0000\u0000\u15ea\u15ed"+
		"\u0005\u0206\u0000\u0000\u15eb\u15ed\u0005\u01b9\u0000\u0000\u15ec\u15e8"+
		"\u0001\u0000\u0000\u0000\u15ec\u15e9\u0001\u0000\u0000\u0000\u15ec\u15ea"+
		"\u0001\u0000\u0000\u0000\u15ec\u15eb\u0001\u0000\u0000\u0000\u15ed\u01ff"+
		"\u0001\u0000\u0000\u0000\u15ee\u15f3\u0003\u01fe\u00ff\u0000\u15ef\u15f0"+
		"\u0005\u02f9\u0000\u0000\u15f0\u15f2\u0003\u01fe\u00ff\u0000\u15f1\u15ef"+
		"\u0001\u0000\u0000\u0000\u15f2\u15f5\u0001\u0000\u0000\u0000\u15f3\u15f1"+
		"\u0001\u0000\u0000\u0000\u15f3\u15f4\u0001\u0000\u0000\u0000\u15f4\u0201"+
		"\u0001\u0000\u0000\u0000\u15f5\u15f3\u0001\u0000\u0000\u0000\u15f6\u1602"+
		"\u0005\u0180\u0000\u0000\u15f7\u1602\u0005\u017c\u0000\u0000\u15f8\u1602"+
		"\u0005\u0259\u0000\u0000\u15f9\u1602\u0005\u00da\u0000\u0000\u15fa\u1602"+
		"\u0005\u028e\u0000\u0000\u15fb\u1602\u0005\u0167\u0000\u0000\u15fc\u1602"+
		"\u0005\u016a\u0000\u0000\u15fd\u1602\u0005\u0309\u0000\u0000\u15fe\u1602"+
		"\u0003\u01b6\u00db\u0000\u15ff\u1602\u0003\u01b4\u00da\u0000\u1600\u1602"+
		"\u0003\u0208\u0104\u0000\u1601\u15f6\u0001\u0000\u0000\u0000\u1601\u15f7"+
		"\u0001\u0000\u0000\u0000\u1601\u15f8\u0001\u0000\u0000\u0000\u1601\u15f9"+
		"\u0001\u0000\u0000\u0000\u1601\u15fa\u0001\u0000\u0000\u0000\u1601\u15fb"+
		"\u0001\u0000\u0000\u0000\u1601\u15fc\u0001\u0000\u0000\u0000\u1601\u15fd"+
		"\u0001\u0000\u0000\u0000\u1601\u15fe\u0001\u0000\u0000\u0000\u1601\u15ff"+
		"\u0001\u0000\u0000\u0000\u1601\u1600\u0001\u0000\u0000\u0000\u1602\u0203"+
		"\u0001\u0000\u0000\u0000\u1603\u1604\u00070\u0000\u0000\u1604\u0205\u0001"+
		"\u0000\u0000\u0000\u1605\u1606\u00071\u0000\u0000\u1606\u0207\u0001\u0000"+
		"\u0000\u0000\u1607\u1608\u0006\u0104\uffff\uffff\u0000\u1608\u160e\u0003"+
		"\u0206\u0103\u0000\u1609\u160e\u0005\u030a\u0000\u0000\u160a\u160e\u0005"+
		"\u030b\u0000\u0000\u160b\u160e\u0003\u01c8\u00e4\u0000\u160c\u160e\u0005"+
		"\u030d\u0000\u0000\u160d\u1607\u0001\u0000\u0000\u0000\u160d\u1609\u0001"+
		"\u0000\u0000\u0000\u160d\u160a\u0001\u0000\u0000\u0000\u160d\u160b\u0001"+
		"\u0000\u0000\u0000\u160d\u160c\u0001\u0000\u0000\u0000\u160e\u1614\u0001"+
		"\u0000\u0000\u0000\u160f\u1610\n\u0003\u0000\u0000\u1610\u1611\u0005\u0308"+
		"\u0000\u0000\u1611\u1613\u0003\u0208\u0104\u0004\u1612\u160f\u0001\u0000"+
		"\u0000\u0000\u1613\u1616\u0001\u0000\u0000\u0000\u1614\u1612\u0001\u0000"+
		"\u0000\u0000\u1614\u1615\u0001\u0000\u0000\u0000\u1615\u0209\u0001\u0000"+
		"\u0000\u0000\u1616\u1614\u0001\u0000\u0000\u0000\u1617\u1618\t\u0000\u0000"+
		"\u0000\u1618\u020b\u0001\u0000\u0000\u0000\u1619\u161a\u0003\u0208\u0104"+
		"\u0000\u161a\u020d\u0001\u0000\u0000\u0000\u161b\u161c\u0003\u0208\u0104"+
		"\u0000\u161c\u020f\u0001\u0000\u0000\u0000\u161d\u161e\u0003\u0208\u0104"+
		"\u0000\u161e\u0211\u0001\u0000\u0000\u0000\u161f\u1620\u0003\u0208\u0104"+
		"\u0000\u1620\u0213\u0001\u0000\u0000\u0000\u1621\u1622\u0003\u0208\u0104"+
		"\u0000\u1622\u0215\u0001\u0000\u0000\u0000\u1623\u1624\u0003\u0208\u0104"+
		"\u0000\u1624\u0217\u0001\u0000\u0000\u0000\u1625\u1626\u0003\u0208\u0104"+
		"\u0000\u1626\u0219\u0001\u0000\u0000\u0000\u02b7\u021f\u0223\u025b\u0287"+
		"\u02a7\u02c4\u02db\u02e9\u02f9\u0302\u0306\u032d\u033b\u0346\u0350\u0358"+
		"\u0361\u0367\u036d\u0370\u0374\u0378\u037c\u0380\u0385\u038b\u038f\u0398"+
		"\u03a0\u03a9\u03b2\u03bc\u03c6\u03cf\u03d4\u03da\u03e3\u03e7\u03ee\u03f5"+
		"\u040f\u0411\u0418\u0420\u0423\u0427\u0430\u0433\u0437\u043b\u0446\u0452"+
		"\u0459\u0472\u0478\u0483\u0496\u04a2\u04b2\u04b8\u04ba\u04be\u04c8\u04d1"+
		"\u04d3\u04de\u04f9\u0505\u0519\u051d\u0522\u0524\u052c\u0536\u0540\u055a"+
		"\u056e\u0575\u057b\u0580\u058d\u0592\u0599\u059f\u05a4\u05af\u05b4\u05bc"+
		"\u05c1\u05c5\u05df\u05e1\u05e7\u05ec\u05f0\u05f4\u05f8\u05fc\u0606\u060d"+
		"\u061d\u0627\u0637\u064a\u0656\u0678\u0688\u069b\u06ad\u06ea\u070a\u0722"+
		"\u0737\u074d\u0754\u0789\u0799\u079c\u07ac\u07b2\u07b6\u07bc\u07c2\u07c8"+
		"\u07ce\u07d4\u07da\u07e0\u07e6\u07ec\u07f0\u07f6\u07fc\u0802\u080b\u080e"+
		"\u0811\u0816\u0819\u0829\u082f\u0833\u0839\u083f\u0843\u085a\u0860\u0864"+
		"\u086a\u0870\u0876\u087c\u0882\u0888\u088e\u0894\u089a\u089e\u08a4\u08aa"+
		"\u08ae\u08be\u08c4\u08ca\u08de\u08e5\u08ed\u08f9\u08ff\u0903\u0912\u0917"+
		"\u091c\u0921\u0926\u092b\u0930\u0935\u093b\u0940\u0944\u094e\u0954\u095c"+
		"\u095e\u0969\u0971\u097c\u098a\u0996\u0998\u099f\u09a6\u09ae\u09b9\u09bd"+
		"\u09c2\u09cb\u09d0\u09d9\u09e8\u09fd\u09ff\u0a01\u0a05\u0a09\u0a0e\u0a11"+
		"\u0a17\u0a1b\u0a1f\u0a24\u0a27\u0a2e\u0a31\u0a34\u0a3c\u0a40\u0a42\u0a4a"+
		"\u0a51\u0a54\u0a58\u0a5e\u0a61\u0a6e\u0a74\u0a7a\u0a80\u0a86\u0a8c\u0a90"+
		"\u0a94\u0aa1\u0aa9\u0aad\u0ab6\u0abd\u0ac6\u0ace\u0adf\u0ae3\u0aea\u0af2"+
		"\u0af8\u0b0c\u0b21\u0b23\u0b25\u0b2c\u0b37\u0b3b\u0b3f\u0b46\u0b49\u0b50"+
		"\u0b5a\u0b63\u0b67\u0b6d\u0b72\u0b75\u0b7b\u0b81\u0b85\u0b88\u0b8c\u0b8f"+
		"\u0b92\u0b9b\u0b9d\u0bc0\u0bc3\u0bc6\u0bce\u0bd5\u0bda\u0bde\u0be2\u0be9"+
		"\u0bee\u0bf2\u0bf5\u0bf8\u0bfc\u0c03\u0c06\u0c34\u0c3b\u0c3f\u0c45\u0c50"+
		"\u0c58\u0c5e\u0c62\u0c68\u0c6c\u0c72\u0c7a\u0c7e\u0c85\u0c89\u0c8f\u0c93"+
		"\u0c9b\u0c9f\u0ca6\u0caa\u0cb0\u0cb4\u0cba\u0cc1\u0cc5\u0cc9\u0ccd\u0cd2"+
		"\u0cd6\u0cdd\u0ce1\u0cea\u0cf0\u0cf7\u0cfd\u0d04\u0d0a\u0d10\u0d16\u0d1a"+
		"\u0d20\u0d28\u0d2e\u0d34\u0d38\u0d3e\u0d42\u0d48\u0d4c\u0d52\u0d5a\u0d5e"+
		"\u0d64\u0d68\u0d6e\u0d78\u0d7c\u0d84\u0d88\u0d90\u0d94\u0d9c\u0da0\u0da6"+
		"\u0db2\u0db8\u0dbe\u0dc2\u0dc8\u0dd1\u0dd9\u0de2\u0de6\u0deb\u0def\u0df2"+
		"\u0dfb\u0e00\u0e0b\u0e14\u0e1b\u0e21\u0e25\u0e28\u0e2e\u0e36\u0e3b\u0e3e"+
		"\u0e47\u0e49\u0e4b\u0e4e\u0e57\u0e5a\u0e5e\u0e71\u0e74\u0e77\u0e87\u0e8c"+
		"\u0e8e\u0e91\u0e93\u0e9b\u0ea3\u0eab\u0eb7\u0ebd\u0ec1\u0ec8\u0ed0\u0ed7"+
		"\u0ede\u0ee4\u0eec\u0ef0\u0efb\u0f20\u0f34\u0f3a\u0f3f\u0f43\u0f47\u0f4c"+
		"\u0f52\u0f56\u0f59\u0f5c\u0f5f\u0f62\u0f65\u0f68\u0f6b\u0f6e\u0f71\u0f74"+
		"\u0f77\u0f7d\u0f80\u0f84\u0f88\u0f8c\u0f91\u0f97\u0f9b\u0f9e\u0fa1\u0fa4"+
		"\u0fa7\u0faa\u0fad\u0fb0\u0fb3\u0fb6\u0fb9\u0fbd\u0fc4\u0fcc\u0fd5\u0fdb"+
		"\u0fe1\u0fe5\u0fec\u0fee\u0ff4\u0ffa\u0fff\u1003\u1010\u1017\u101a\u1021"+
		"\u1031\u1038\u103c\u103f\u1043\u1047\u104a\u104e\u1051\u1056\u1059\u105d"+
		"\u1061\u1064\u1067\u106c\u1073\u1076\u107f\u1087\u108e\u1092\u1095\u1098"+
		"\u109b\u109f\u10a2\u10a5\u10ad\u10af\u10b1\u10b4\u10bb\u10c1\u10c5\u10c8"+
		"\u10cb\u10ce\u10d1\u10d4\u10da\u10dc\u10e6\u10f3\u10fe\u1103\u1107\u110f"+
		"\u1117\u1122\u1127\u112a\u112d\u1132\u1135\u1138\u113c\u1141\u1145\u1153"+
		"\u1161\u116b\u116f\u117a\u117f\u1184\u1189\u118d\u1196\u119b\u11a1\u11ab"+
		"\u11ae\u11b4\u11b9\u11be\u11cb\u11d3\u11d6\u11db\u11dd\u11e5\u11ef\u11f1"+
		"\u1208\u1210\u1241\u1253\u1258\u1268\u127a\u127f\u1283\u1288\u128f\u129c"+
		"\u12a4\u12a6\u12b5\u12b7\u12bb\u12bf\u12c6\u12ce\u12d0\u12dc\u12e0\u12ec"+
		"\u12f0\u12f4\u12fc\u1302\u1309\u130d\u1310\u1313\u1316\u131d\u1325\u132c"+
		"\u1337\u133d\u1347\u134d\u1353\u135e\u136c\u136f\u137e\u1390\u1395\u139b"+
		"\u13a0\u13a6\u13ac\u13b6\u13bc\u13bf\u13c7\u13cc\u13d3\u13d7\u13e0\u13ec"+
		"\u13f5\u13f8\u1406\u1408\u140c\u1413\u141b\u1421\u1428\u142f\u1433\u1438"+
		"\u1440\u1445\u1456\u145c\u145e\u1469\u146d\u1476\u1479\u147f\u1483\u1486"+
		"\u1490\u1499\u149b\u149e\u14a4\u14ad\u14b2\u14b5\u14ba\u14bd\u14c0\u14ca"+
		"\u14d0\u14de\u14e3\u14e7\u14eb\u14ef\u14f3\u14f6\u14fa\u14fe\u1506\u1509"+
		"\u150c\u1513\u1516\u151b\u1520\u1525\u152a\u1535\u153a\u1548\u1550\u1552"+
		"\u1557\u155a\u155e\u1561\u1568\u156b\u156f\u1577\u157e\u1584\u158b\u158e"+
		"\u1591\u1595\u1599\u15a1\u15b2\u15bf\u15c9\u15d0\u15d5\u15da\u15dc\u15df"+
		"\u15e2\u15e6\u15ec\u15f3\u1601\u160d\u1614";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}